{"ast":null,"code":"var assert = require('assert');\n/**\n * Get a list of all identifiers that are initialised by this (possibly destructuring)\n * node.\n *\n * eg with input:\n *\n * var { a: [b, ...c], d } = xyz\n *\n * this returns the nodes for 'b', 'c', and 'd'\n */\n\n\nmodule.exports = function getAssignedIdentifiers(node, identifiers) {\n  assert.equal(typeof node, 'object', 'get-assigned-identifiers: node must be object');\n  assert.equal(typeof node.type, 'string', 'get-assigned-identifiers: node must have a type');\n  identifiers = identifiers || [];\n\n  if (node.type === 'ImportDeclaration') {\n    node.specifiers.forEach(function (el) {\n      getAssignedIdentifiers(el, identifiers);\n    });\n  }\n\n  if (node.type === 'ImportDefaultSpecifier' || node.type === 'ImportNamespaceSpecifier' || node.type === 'ImportSpecifier') {\n    node = node.local;\n  }\n\n  if (node.type === 'RestElement') {\n    node = node.argument;\n  }\n\n  if (node.type === 'ArrayPattern') {\n    node.elements.forEach(function (el) {\n      // `el` might be `null` in case of `[x,,y] = whatever`\n      if (el) {\n        getAssignedIdentifiers(el, identifiers);\n      }\n    });\n  }\n\n  if (node.type === 'ObjectPattern') {\n    node.properties.forEach(function (prop) {\n      if (prop.type === 'Property') {\n        getAssignedIdentifiers(prop.value, identifiers);\n      } else if (prop.type === 'RestElement') {\n        getAssignedIdentifiers(prop, identifiers);\n      }\n    });\n  }\n\n  if (node.type === 'Identifier') {\n    identifiers.push(node);\n  }\n\n  return identifiers;\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/get-assigned-identifiers/index.js"],"names":["assert","require","module","exports","getAssignedIdentifiers","node","identifiers","equal","type","specifiers","forEach","el","local","argument","elements","properties","prop","value","push"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAEA;;;;;;;;;;;;AAUAC,MAAM,CAACC,OAAP,GAAiB,SAASC,sBAAT,CAAiCC,IAAjC,EAAuCC,WAAvC,EAAoD;AACnEN,EAAAA,MAAM,CAACO,KAAP,CAAa,OAAOF,IAApB,EAA0B,QAA1B,EAAoC,+CAApC;AACAL,EAAAA,MAAM,CAACO,KAAP,CAAa,OAAOF,IAAI,CAACG,IAAzB,EAA+B,QAA/B,EAAyC,iDAAzC;AAEAF,EAAAA,WAAW,GAAGA,WAAW,IAAI,EAA7B;;AAEA,MAAID,IAAI,CAACG,IAAL,KAAc,mBAAlB,EAAuC;AACrCH,IAAAA,IAAI,CAACI,UAAL,CAAgBC,OAAhB,CAAwB,UAAUC,EAAV,EAAc;AACpCP,MAAAA,sBAAsB,CAACO,EAAD,EAAKL,WAAL,CAAtB;AACD,KAFD;AAGD;;AAED,MAAID,IAAI,CAACG,IAAL,KAAc,wBAAd,IAA0CH,IAAI,CAACG,IAAL,KAAc,0BAAxD,IAAsFH,IAAI,CAACG,IAAL,KAAc,iBAAxG,EAA2H;AACzHH,IAAAA,IAAI,GAAGA,IAAI,CAACO,KAAZ;AACD;;AAED,MAAIP,IAAI,CAACG,IAAL,KAAc,aAAlB,EAAiC;AAC/BH,IAAAA,IAAI,GAAGA,IAAI,CAACQ,QAAZ;AACD;;AAED,MAAIR,IAAI,CAACG,IAAL,KAAc,cAAlB,EAAkC;AAChCH,IAAAA,IAAI,CAACS,QAAL,CAAcJ,OAAd,CAAsB,UAAUC,EAAV,EAAc;AAClC;AACA,UAAIA,EAAJ,EAAQ;AACNP,QAAAA,sBAAsB,CAACO,EAAD,EAAKL,WAAL,CAAtB;AACD;AACF,KALD;AAMD;;AAED,MAAID,IAAI,CAACG,IAAL,KAAc,eAAlB,EAAmC;AACjCH,IAAAA,IAAI,CAACU,UAAL,CAAgBL,OAAhB,CAAwB,UAAUM,IAAV,EAAgB;AACtC,UAAIA,IAAI,CAACR,IAAL,KAAc,UAAlB,EAA8B;AAC5BJ,QAAAA,sBAAsB,CAACY,IAAI,CAACC,KAAN,EAAaX,WAAb,CAAtB;AACD,OAFD,MAEO,IAAIU,IAAI,CAACR,IAAL,KAAc,aAAlB,EAAiC;AACtCJ,QAAAA,sBAAsB,CAACY,IAAD,EAAOV,WAAP,CAAtB;AACD;AACF,KAND;AAOD;;AAED,MAAID,IAAI,CAACG,IAAL,KAAc,YAAlB,EAAgC;AAC9BF,IAAAA,WAAW,CAACY,IAAZ,CAAiBb,IAAjB;AACD;;AAED,SAAOC,WAAP;AACD,CA5CD","sourcesContent":["var assert = require('assert')\n\n/**\n * Get a list of all identifiers that are initialised by this (possibly destructuring)\n * node.\n *\n * eg with input:\n *\n * var { a: [b, ...c], d } = xyz\n *\n * this returns the nodes for 'b', 'c', and 'd'\n */\nmodule.exports = function getAssignedIdentifiers (node, identifiers) {\n  assert.equal(typeof node, 'object', 'get-assigned-identifiers: node must be object')\n  assert.equal(typeof node.type, 'string', 'get-assigned-identifiers: node must have a type')\n\n  identifiers = identifiers || []\n\n  if (node.type === 'ImportDeclaration') {\n    node.specifiers.forEach(function (el) {\n      getAssignedIdentifiers(el, identifiers)\n    })\n  }\n\n  if (node.type === 'ImportDefaultSpecifier' || node.type === 'ImportNamespaceSpecifier' || node.type === 'ImportSpecifier') {\n    node = node.local\n  }\n\n  if (node.type === 'RestElement') {\n    node = node.argument\n  }\n\n  if (node.type === 'ArrayPattern') {\n    node.elements.forEach(function (el) {\n      // `el` might be `null` in case of `[x,,y] = whatever`\n      if (el) {\n        getAssignedIdentifiers(el, identifiers)\n      }\n    })\n  }\n\n  if (node.type === 'ObjectPattern') {\n    node.properties.forEach(function (prop) {\n      if (prop.type === 'Property') {\n        getAssignedIdentifiers(prop.value, identifiers)\n      } else if (prop.type === 'RestElement') {\n        getAssignedIdentifiers(prop, identifiers)\n      }\n    })\n  }\n\n  if (node.type === 'Identifier') {\n    identifiers.push(node)\n  }\n\n  return identifiers\n}\n"]},"metadata":{},"sourceType":"script"}