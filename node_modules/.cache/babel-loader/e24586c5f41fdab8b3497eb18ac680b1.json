{"ast":null,"code":"var _ = require('lodash');\n\nvar __slice = Array.prototype.slice;\n\nvar utils = require(\"./utils\");\n\nvar deprecator = utils.deprecator;\n\nfunction Asserter(_assert) {\n  this.assert = _assert;\n}\n/**\n * asserters.nonEmptyText\n *\n * @asserter\n */\n\n\nvar nonEmptyText = new Asserter(function (target, cb) {\n  target.text(function (err, text) {\n    if (err) {\n      return cb(err);\n    }\n\n    var satisfied = text && _(text).trim().length > 0;\n    cb(null, satisfied, satisfied ? text : undefined);\n  });\n});\n/**\n * asserters.textInclude(content) -> Asserter\n *\n * @asserter\n */\n\nfunction textInclude(content) {\n  return new Asserter(function (target, cb) {\n    target.text(function (err, text) {\n      if (err) {\n        return cb(err);\n      }\n\n      var satisfied = text && _(text).includes(content);\n\n      cb(null, satisfied, satisfied ? text : undefined);\n    });\n  });\n}\n/**\n * asserters.isVisible\n *\n * @asserter\n */\n\n\nvar isDisplayed = new Asserter(function (el, cb) {\n  el.isDisplayed(function (err, displayed) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, displayed);\n  });\n});\nvar isVisible = new Asserter(function () {\n  deprecator.warn('isVisible asserter', 'isVisible asserter has been deprecated, use isDisplayed asserter instead.');\n\n  var args = __slice.call(arguments, 0);\n\n  isDisplayed.assert.apply(this, args);\n});\n/**\n * asserters.isHidden\n *\n * @asserter\n */\n\nvar isNotDisplayed = new Asserter(function (el, cb) {\n  el.isDisplayed(function (err, displayed) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, !displayed);\n  });\n});\nvar isHidden = new Asserter(function () {\n  deprecator.warn('isHidden asserter', 'isHidden asserter has been deprecated, use isNotDisplayed asserter instead.');\n\n  var args = __slice.call(arguments, 0);\n\n  isNotDisplayed.assert.apply(this, args);\n});\n/**\n * asserters.jsCondition(jsConditionExpr) -> Asserter\n * jsConditionExpr: js script expression, should evaluate as boolean.\n *\n * @asserter\n */\n\nfunction jsCondition(jsConditionExpr, safe) {\n  if (safe === undefined) {\n    safe = false;\n  }\n\n  return new Asserter(function (browser, cb) {\n    var _eval = safe ? browser.safeEval : browser.eval;\n\n    _eval.apply(browser, [jsConditionExpr, function (err, res) {\n      if (err) {\n        return cb(err);\n      }\n\n      cb(null, res, res);\n    }]);\n  });\n}\n\nmodule.exports = {\n  Asserter: Asserter,\n  nonEmptyText: nonEmptyText,\n  isDisplayed: isDisplayed,\n  isNotDisplayed: isNotDisplayed,\n  textInclude: textInclude,\n  jsCondition: jsCondition,\n  // deprecated\n  isVisible: isVisible,\n  isHidden: isHidden\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/wd/lib/asserters.js"],"names":["_","require","__slice","Array","prototype","slice","utils","deprecator","Asserter","_assert","assert","nonEmptyText","target","cb","text","err","satisfied","trim","length","undefined","textInclude","content","includes","isDisplayed","el","displayed","isVisible","warn","args","call","arguments","apply","isNotDisplayed","isHidden","jsCondition","jsConditionExpr","safe","browser","_eval","safeEval","eval","res","module","exports"],"mappings":"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","sourcesContent":["var _ = require('lodash');\nvar __slice = Array.prototype.slice;\nvar utils = require(\"./utils\");\nvar deprecator = utils.deprecator;\n\nfunction Asserter(_assert){\n  this.assert = _assert;\n}\n\n/**\n * asserters.nonEmptyText\n *\n * @asserter\n */\nvar nonEmptyText = new Asserter(\n  function (target, cb) {\n    target.text(function(err, text) {\n      if(err) { return cb(err); }\n      var satisfied = text && _(text).trim().length > 0;\n      cb(null, satisfied, satisfied? text : undefined);\n    });\n  }\n);\n\n/**\n * asserters.textInclude(content) -> Asserter\n *\n * @asserter\n */\nfunction textInclude(content) {\n  return new Asserter(\n    function(target, cb) {\n      target.text(function(err, text) {\n        if(err) { return cb(err); }\n        var satisfied = text && _(text).includes(content);\n        cb(null, satisfied, satisfied? text : undefined);\n      });\n    }\n  );\n}\n\n/**\n * asserters.isVisible\n *\n * @asserter\n */\nvar isDisplayed = new Asserter(\n  function(el,cb) {\n    el.isDisplayed(function(err, displayed) {\n      if(err) { return cb(err); }\n      cb(null, displayed);\n    });\n  }\n);\nvar isVisible = new Asserter(\n  function() {\n    deprecator.warn('isVisible asserter', 'isVisible asserter has been deprecated, use isDisplayed asserter instead.');\n    var args = __slice.call(arguments, 0);\n    isDisplayed.assert.apply(this, args);\n  }\n);\n\n/**\n * asserters.isHidden\n *\n * @asserter\n */\nvar isNotDisplayed = new Asserter(\n  function(el,cb) {\n    el.isDisplayed(function(err, displayed) {\n      if(err) { return cb(err); }\n      cb(null, !displayed);\n    });\n  }\n);\nvar isHidden = new Asserter(\n  function() {\n    deprecator.warn('isHidden asserter', 'isHidden asserter has been deprecated, use isNotDisplayed asserter instead.');\n    var args = __slice.call(arguments, 0);\n    isNotDisplayed.assert.apply(this, args);\n  }\n);\n\n/**\n * asserters.jsCondition(jsConditionExpr) -> Asserter\n * jsConditionExpr: js script expression, should evaluate as boolean.\n *\n * @asserter\n */\nfunction jsCondition(jsConditionExpr, safe) {\n  if(safe === undefined) { safe = false; }\n  return new Asserter(\n    function(browser, cb) {\n      var _eval = safe? browser.safeEval : browser.eval;\n      _eval.apply( browser , [jsConditionExpr, function(err, res) {\n        if(err) {return cb(err);}\n        cb(null, res, res);\n      }]);\n    }\n  );\n}\n\nmodule.exports = {\n  Asserter: Asserter,\n  nonEmptyText: nonEmptyText,\n  isDisplayed: isDisplayed,\n  isNotDisplayed: isNotDisplayed,\n  textInclude: textInclude,\n  jsCondition: jsCondition,\n  // deprecated\n  isVisible: isVisible,\n  isHidden: isHidden,\n};\n"]},"metadata":{},"sourceType":"script"}