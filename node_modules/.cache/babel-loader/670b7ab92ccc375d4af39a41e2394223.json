{"ast":null,"code":"module.exports = function popper({\n  tests = 'browserify test.js',\n  farm = 'browserstack',\n  notunnel = false,\n  runner = 'mocha',\n  browsers = [],\n  globals = '',\n  port = 1945,\n  watch = '.',\n  opts = {},\n  timeout,\n  ripple\n} = {}) {\n  // defaults\n  const wait = debounce(timeout = timeout || +env.POPPER_TIMEOUT || 20000)(quit),\n        maxRetries = 3;\n  ripple = (ripple || rijs)(extend({\n    dir,\n    port\n  })(opts));\n  resdir(ripple, dir);\n  browsers = browsers.map(canonical(farm)).filter(Boolean); // define data resources\n\n  ripple('results', {}, {\n    from\n  });\n  ripple('totals', {}); // watch files\n\n  if (!isCI && watch) {\n    log('watching', watch);\n    chokidar.watch(watch, {\n      ignored: [/^\\.(.*)[^\\/\\\\]/, /[\\/\\\\]\\./, /node_modules(.+)popper/],\n      ignoreInitial: true,\n      usePolling: false,\n      depth: 5\n    }).on('change', debounce(generate));\n  } // icons\n\n\n  ripple(require('browser-icons')); // limit dashboard resources\n\n  ripple.to = limit(ripple.to); // proxy errors and register agent details\n\n  ripple.server.on('connected', connected); // serve assets\n\n  ripple.server.express.use(compression()).use('/utilise.min.js', send(local('utilise', 'utilise.min.js'))).use('/utilise.js', send(local('utilise', 'utilise.js'))).use('/mocha.css', send(local('mocha', 'mocha.css'))).use('/mocha.js', send(local('mocha', 'mocha.js'))).use('/chai.js', send(local('chai', 'chai.js'))).use('/dashboard/:id', send(local(`./client/${runner}/logs.html`))).use('/dashboard', send(local('./client/dashboard.html'))).use('/', serve(local('./client'))).use('/', index());\n  return generate(), spawn(), ripple;\n\n  function index() {\n    const head = is.arr(globals) ? globals.join('\\n') : globals,\n          html = file(local(`./client/${runner}/index.html`)).replace('<!-- { extra scripts } -->', head || '');\n    return (req, res) => res.send(html);\n  }\n\n  function generate() {\n    log('generating tests');\n    const bundle = write(local('./client/tests.js')),\n          stream = is.fn(tests) ? tests() : run('sh', ['-c', tests], {\n      stdio: 'pipe'\n    });\n    if (stream.stderr) stream.stderr.pipe(process.stderr);\n    ((stream.stdout || stream).on('end', debounce(500)(reload)).pipe(bundle).flow || noop)();\n  }\n\n  function from(req) {\n    return req.data.type == 'RERUN' ? reload(req.data.value) : req.data.type == 'SAVE' ? save(req.socket.platform, req.data.value) : false;\n  }\n\n  function save(platform, result) {\n    const uid = platform.uid,\n          results = ripple('results'),\n          retries = uid in results ? results[uid].retries : 0;\n    log('received result from', uid);\n    result.platform = platform;\n    result.retries = retries;\n    update(uid, result)(ripple('results'));\n    totals();\n    ci(result);\n  }\n\n  function ci(r) {\n    if (!isCI || r.stats.running) return;\n    const browser = browsers.filter(d => {\n      if (d._name && d._name !== r.platform.name) return false;\n      if (d._version && d._version !== r.platform.version) return false;\n      if (d._os && d._os !== r.platform.os.name) return false;\n      if (d._os_version && d._os_version !== r.platform.os.version) return false;\n      return true;\n    }).pop();\n    if (!browser) return log('result not in matrix'.red, r.platform.uid);\n    browser.passed_by = r.platform.uid;\n    browser.passed = !r.stats.failures;\n    browser.passed ? log('browser passed:', r.platform.uid.green.bold) : err('browser failed:', r.platform.uid.red.bold);\n    if (!browser.passed && r.retries < maxRetries) return log('retrying'.yellow, r.platform.uid, ++r.retries, '/', str(maxRetries).grey), reload(r.platform.uid);\n    if (farms[farm].status) farms[farm].status(browser, r.platform);\n    const target = browsers.length,\n          passed = browsers.filter(by('passed')).length,\n          finished = browsers.filter(by('passed_by')).length;\n    log('ci targets', str(passed).green.bold, '/', str(target).grey);\n    target === passed ? time(3000, d => process.exit(0)) : target === finished ? time(3000, d => !env.POPPER_TIMEOUT && process.exit(1)) : wait();\n  }\n\n  function connected(socket) {\n    socket.platform = parse(socket);\n    socket.type = socket.handshake.url == '/dashboard' ? 'dashboard' : 'agent';\n    log('connected', socket.platform.uid.green, socket.type.grey);\n    socket.on('global err', (message, url, linenumber) => err('Global error: ', socket.platform.uid.bold, message, url, linenumber));\n    if (debug) socket.on('console', function () {\n      log(socket.platform.uid.bold, 'says:', '', arguments[0], to.arr(arguments[1]).map(str).join(' '));\n    });\n  }\n\n  function quit() {\n    log('no updates received for', timeout / 1000, 'seconds. timing out..');\n    process.exit(1);\n  }\n\n  function reload(uid) {\n    const uids = uid ? [uid] : ripple.server.ws.sockets.map(d => d.platform.uid);\n    uids.map(uid => update(`${uid}.stats.running`, true)(ripple('results')));\n    const agents = ripple.server.ws.sockets.filter(not(by('handshake.url', '/dashboard'))).filter(by('platform.uid', is.in(uids))).map(emitReload).length;\n    log('reloading', str(agents).cyan, 'agents', uid || '');\n  }\n\n  function totals() {\n    const res = values(ripple('results'));\n    return ripple('totals', {\n      tests: str(res.map(key('stats.tests')).filter(Boolean).pop() || '?'),\n      browsers: str(res.length),\n      passing: str(res.map(key('stats.failures')).filter(is(0)).length || '0')\n    });\n  }\n\n  function spawn() {\n    ripple.server.once('listening').then(() => {\n      log('running on port', ripple.server.http.address().port);\n      !notunnel && require('ngrok').connect(ripple.server.http.address().port, (e, url) => {\n        log('tunnelling', url && url.magenta);\n        return e ? err('error setting up reverse tunnel', e.stack) : browsers.map(boot(farm)(url));\n      });\n    });\n  }\n};\n\nconst _require = require('utilise/pure'),\n      values = _require.values,\n      key = _require.key,\n      str = _require.str,\n      not = _require.not,\n      by = _require.by,\n      grep = _require.grep,\n      lo = _require.lo,\n      is = _require.is,\n      debounce = _require.debounce,\n      extend = _require.extend,\n      falsy = _require.falsy,\n      send = _require.send,\n      file = _require.file,\n      noop = _require.noop,\n      update = _require.update,\n      identity = _require.identity,\n      time = _require.time,\n      includes = _require.includes,\n      write = require('fs').createWriteStream,\n      run = require('child_process').spawn,\n      _require2 = require('cryonic'),\n      stringify = _require2.stringify,\n      _require3 = require('path'),\n      resolve = _require3.resolve,\n      compression = require('compression'),\n      browserify = require('browserify'),\n      platform = require('platform'),\n      chokidar = require('chokidar'),\n      express = require('express'),\n      resdir = require('rijs.resdir'),\n      serve = require('serve-static'),\n      farms = require('./farms'),\n      wd = require('wd'),\n      rijs = opts => require('rijs.npm')(require('rijs')(opts));\n\nconst log = require('utilise/log')('[popper]'),\n      err = require('utilise/err')('[popper]'),\n      old = grep(console, 'log', /^(?!.*\\[ri\\/)/),\n      env = process.env,\n      dir = __dirname,\n      isCI = env.CI === 'true',\n      debug = lo(env.NODE_ENV) == 'debug';\n\nconst heartbeat = vm => setInterval(d => vm.eval('', e => {\n  if (e) console.error(e);\n}), 30000);\n\nconst canonical = farm => browser => is.str(browser) ? farms[farm].browsers[browser] : browser;\n\nconst local = (module, file) => {\n  const base = !file ? __dirname : require.resolve(module),\n        read = !file ? module : '../' + file;\n  return resolve(base, read);\n};\n\nconst emitReload = socket => socket.send(stringify({\n  data: {\n    exec: () => location.reload()\n  }\n}));\n\nconst parse = socket => {\n  const ua = socket.handshake.headers['user-agent'],\n        p = platform.parse(ua),\n        o = {\n    name: lo(p.name),\n    version: major(p.version),\n    os: {\n      name: lo(p.os.family.split(' ').shift()),\n      version: major(p.os.version, p.os.family)\n    }\n  };\n  if (o.os.name == 'os') o.os.name = 'osx';\n  if (o.name == 'chrome mobile') o.name = 'chrome';\n  if (o.name == 'microsoft edge') o.name = 'ie';\n  const uid = o.name + '-' + o.version + '-' + o.os.name + '-' + o.os.version;\n  o.uid = uid;\n  return o;\n};\n\nconst major = (v, f) => v ? v.split('.').shift() : includes('xp')(lo(f)) ? 'xp' : '?';\n\nconst limit = next => (req, socket) => {\n  return socket.handshake.url == '/dashboard' ? next(req, socket) : false;\n};\n\nconst boot = farm => url => opts => {\n  const _opts$_name = opts._name,\n        _name = _opts$_name === void 0 ? '?' : _opts$_name,\n        _opts$_version = opts._version,\n        _version = _opts$_version === void 0 ? '?' : _opts$_version,\n        _opts$_os = opts._os,\n        _os = _opts$_os === void 0 ? '?' : _opts$_os,\n        _farms$farm = farms[farm],\n        connect = _farms$farm.connect,\n        _farms$farm$parse = _farms$farm.parse,\n        parse = _farms$farm$parse === void 0 ? identity : _farms$farm$parse,\n        id = `${_name.cyan} ${_version.cyan} on ${_os}`,\n        vm = opts.vm = connect(wd);\n\n  if (!vm) err('failed to connect to ' + farm), process.exit(1);\n  log(`booting up ${id}`);\n  vm.init(parse(opts), e => {\n    if (e) return err(e, id);\n    log('initialised', id);\n    vm.get(url, e => {\n      if (e) return err(e, id);\n      log('opened to test page', id.cyan);\n      heartbeat(vm);\n    });\n  });\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/popper/index.js"],"names":["module","exports","popper","tests","farm","notunnel","runner","browsers","globals","port","watch","opts","timeout","ripple","wait","debounce","env","POPPER_TIMEOUT","quit","maxRetries","rijs","extend","dir","resdir","map","canonical","filter","Boolean","from","isCI","log","chokidar","ignored","ignoreInitial","usePolling","depth","on","generate","require","to","limit","server","connected","express","use","compression","send","local","serve","index","spawn","head","is","arr","join","html","file","replace","req","res","bundle","write","stream","fn","run","stdio","stderr","pipe","process","stdout","reload","flow","noop","data","type","value","save","socket","platform","result","uid","results","retries","update","totals","ci","r","stats","running","browser","d","_name","name","_version","version","_os","os","_os_version","pop","red","passed_by","passed","failures","green","bold","err","yellow","str","grey","farms","status","target","length","by","finished","time","exit","parse","handshake","url","message","linenumber","debug","arguments","uids","ws","sockets","agents","not","in","emitReload","cyan","values","key","passing","once","then","http","address","connect","e","magenta","stack","boot","grep","lo","falsy","identity","includes","createWriteStream","stringify","resolve","browserify","wd","old","console","__dirname","CI","NODE_ENV","heartbeat","vm","setInterval","eval","error","base","read","exec","location","ua","headers","p","o","major","family","split","shift","v","f","next","id","init","get"],"mappings":"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","sourcesContent":["module.exports = function popper({ \r\n  tests = 'browserify test.js'\r\n, farm = 'browserstack'\r\n, notunnel = false\r\n, runner = 'mocha'\r\n, browsers = []\r\n, globals = ''\r\n, port = 1945\r\n, watch = '.'\r\n, opts = {}\r\n, timeout\r\n, ripple\r\n} = {}){\r\n   \r\n  // defaults\r\n  const wait = debounce(timeout = timeout || +env.POPPER_TIMEOUT || 20000)(quit)\r\n      , maxRetries = 3\r\n\r\n  ripple = (ripple || rijs)(extend({ dir, port })(opts))\r\n  resdir(ripple, dir)\r\n  browsers = browsers\r\n    .map(canonical(farm))\r\n    .filter(Boolean)\r\n\r\n  // define data resources\r\n  ripple('results', {}, { from })\r\n  ripple('totals' , {})\r\n\r\n  // watch files\r\n  if (!isCI && watch) {\r\n    log('watching', watch)\r\n\r\n    chokidar.watch(watch, {\r\n      ignored: [/^\\.(.*)[^\\/\\\\]/, /[\\/\\\\]\\./, /node_modules(.+)popper/]\r\n    , ignoreInitial: true\r\n    , usePolling: false\r\n    , depth: 5\r\n    })\r\n    .on('change', debounce(generate))\r\n  }\r\n\r\n  // icons\r\n  ripple(require('browser-icons'))\r\n\r\n  // limit dashboard resources\r\n  ripple.to = limit(ripple.to)\r\n  \r\n  // proxy errors and register agent details\r\n  ripple.server.on('connected', connected)\r\n\r\n  // serve assets\r\n  ripple.server.express\r\n    .use(compression())\r\n    .use('/utilise.min.js', send(local('utilise', 'utilise.min.js')))\r\n    .use('/utilise.js'    , send(local('utilise', 'utilise.js')))\r\n    .use('/mocha.css'     , send(local('mocha', 'mocha.css')))\r\n    .use('/mocha.js'      , send(local('mocha', 'mocha.js')))\r\n    .use('/chai.js'       , send(local('chai', 'chai.js')))\r\n    .use('/dashboard/:id' , send(local(`./client/${runner}/logs.html`)))\r\n    .use('/dashboard'     , send(local('./client/dashboard.html')))\r\n    .use('/'              , serve(local('./client')))\r\n    .use('/'              , index())\r\n\r\n  return generate()\r\n       , spawn()\r\n       , ripple\r\n\r\n  function index(){\r\n    const head = is.arr(globals) ? globals.join('\\n') : globals\r\n        , html = file(local(`./client/${runner}/index.html`))\r\n            .replace('<!-- { extra scripts } -->', head || '')\r\n\r\n    return (req, res) => res.send(html)\r\n  }\r\n\r\n  function generate() {\r\n    log('generating tests')\r\n\r\n    const bundle = write(local('./client/tests.js'))\r\n        , stream = is.fn(tests) \r\n            ? tests()\r\n            : run('sh', ['-c', tests], { stdio: 'pipe' })\r\n\r\n    if (stream.stderr) \r\n      stream.stderr.pipe(process.stderr)\r\n\r\n    ;((stream.stdout || stream)\r\n      .on('end', debounce(500)(reload))\r\n      .pipe(bundle)\r\n      .flow || noop)()\r\n  }\r\n\r\n  function from(req){\r\n    return req.data.type == 'RERUN'  ? reload(req.data.value)\r\n         : req.data.type == 'SAVE'   ? save(req.socket.platform, req.data.value)\r\n                                     : false\r\n  }\r\n\r\n  function save(platform, result) {\r\n    const { uid } = platform\r\n        , results = ripple('results')\r\n        , retries = uid in results ? results[uid].retries : 0\r\n\r\n    log('received result from', uid)\r\n    result.platform = platform\r\n    result.retries = retries\r\n    update(uid, result)(ripple('results'))\r\n    totals()\r\n    ci(result)\r\n  }\r\n\r\n  function ci(r) {\r\n    if (!isCI || r.stats.running) return\r\n\r\n    const browser = browsers\r\n      .filter(d => {\r\n        if (d._name       && d._name       !== r.platform.name)        return false\r\n        if (d._version    && d._version    !== r.platform.version)     return false\r\n        if (d._os         && d._os         !== r.platform.os.name)     return false\r\n        if (d._os_version && d._os_version !== r.platform.os.version)  return false\r\n        return true\r\n      })\r\n      .pop()\r\n\r\n    if (!browser) return log('result not in matrix'.red, r.platform.uid)\r\n\r\n    browser.passed_by = r.platform.uid\r\n    browser.passed    = !r.stats.failures\r\n    browser.passed\r\n      ? log('browser passed:', r.platform.uid.green.bold)\r\n      : err('browser failed:', r.platform.uid.red.bold)\r\n\r\n    if (!browser.passed && r.retries < maxRetries) \r\n      return log('retrying'.yellow, r.platform.uid, ++r.retries, '/', str(maxRetries).grey) \r\n           , reload(r.platform.uid)\r\n\r\n    if (farms[farm].status)\r\n      farms[farm].status(browser, r.platform)\r\n\r\n    const target   = browsers.length\r\n        , passed   = browsers.filter(by('passed')).length\r\n        , finished = browsers.filter(by('passed_by')).length\r\n\r\n    log('ci targets', str(passed).green.bold, '/', str(target).grey)\r\n    \r\n      target === passed   ? time(3000, d => process.exit(0))\r\n    : target === finished ? time(3000, d => (!env.POPPER_TIMEOUT && process.exit(1)))\r\n                          : wait()\r\n  }\r\n\r\n  function connected(socket){\r\n    socket.platform = parse(socket)\r\n    socket.type = socket.handshake.url == '/dashboard' ? 'dashboard' : 'agent'\r\n    log('connected', socket.platform.uid.green, socket.type.grey)\r\n\r\n    socket.on('global err', (message, url, linenumber) => err('Global error: ', socket.platform.uid.bold, message, url, linenumber))\r\n\r\n    if (debug) \r\n      socket.on('console', function(){ log(socket.platform.uid.bold, 'says:', '', arguments[0], to.arr(arguments[1]).map(str).join(' ')) })\r\n  }\r\n\r\n  function quit(){\r\n    log('no updates received for', timeout/1000, 'seconds. timing out..')\r\n    process.exit(1)\r\n  }\r\n\r\n  function reload(uid) { \r\n    const uids = uid ? [uid] : ripple.server.ws.sockets.map(d => d.platform.uid)\r\n    \r\n    uids\r\n      .map(uid => update(`${uid}.stats.running`, true)(ripple('results')))\r\n\r\n    const agents = ripple.server.ws.sockets\r\n      .filter(not(by('handshake.url', '/dashboard')))\r\n      .filter(by('platform.uid', is.in(uids)))\r\n      .map(emitReload)\r\n      .length \r\n\r\n    log('reloading', str(agents).cyan, 'agents', uid || '')\r\n  }\r\n\r\n  function totals() {\r\n    const res = values(ripple('results'))\r\n    return ripple('totals', { \r\n      tests: str(res.map(key('stats.tests')).filter(Boolean).pop() || '?')\r\n    , browsers: str(res.length)\r\n    , passing: str(res.map(key('stats.failures')).filter(is(0)).length || '0')\r\n    })\r\n  }\r\n\r\n  function spawn(){\r\n    ripple.server.once('listening').then(() => {\r\n      log('running on port', ripple.server.http.address().port)\r\n      !notunnel && require('ngrok').connect(ripple.server.http.address().port, (e, url) => {\r\n        log('tunnelling', url && url.magenta)\r\n        return e ? err('error setting up reverse tunnel', e.stack)\r\n                 : browsers.map(boot(farm)(url))\r\n      })\r\n    })\r\n  }\r\n\r\n}\r\n\r\nconst { values, key, str, not, by, grep, lo, is, debounce, extend, falsy, send, file, noop, update, identity, time, includes } = require('utilise/pure')\r\n    , write = require('fs').createWriteStream\r\n    , run = require('child_process').spawn\r\n    , { stringify } = require('cryonic')\r\n    , { resolve } = require('path')\r\n    , compression = require('compression')\r\n    , browserify = require('browserify')\r\n    , platform = require('platform')\r\n    , chokidar = require('chokidar')\r\n    , express = require('express')\r\n    , resdir = require('rijs.resdir')\r\n    , serve = require('serve-static')\r\n    , farms = require('./farms')\r\n    , wd = require('wd')\r\n    , rijs = opts => require('rijs.npm')(require('rijs')(opts))\r\n\r\nconst log = require('utilise/log')('[popper]')\r\n    , err = require('utilise/err')('[popper]')\r\n    , old = grep(console, 'log', /^(?!.*\\[ri\\/)/)\r\n    , env = process.env\r\n    , dir = __dirname\r\n    , isCI  = env.CI === 'true'\r\n    , debug  = lo(env.NODE_ENV) == 'debug'\r\n\r\nconst heartbeat = vm => setInterval(d => vm.eval('', e => { if (e) console.error(e) }), 30000)\r\n\r\nconst canonical = farm => browser => is.str(browser) \r\n  ? farms[farm].browsers[browser]\r\n  : browser\r\n\r\nconst local = (module, file) => {\r\n  const base = !file ? __dirname : require.resolve(module) \r\n      , read = !file ? module : '../'+file\r\n  return resolve(base, read)\r\n}\r\n\r\nconst emitReload = socket => socket.send(stringify({ data: { exec: () => location.reload() }}))\r\n\r\nconst parse = socket => {\r\n  const ua = socket.handshake.headers['user-agent']\r\n      , p = platform.parse(ua)\r\n      , o = { \r\n          name: lo(p.name)\r\n        , version: major(p.version)\r\n        , os: { \r\n            name: lo(p.os.family.split(' ').shift())\r\n          , version: major(p.os.version, p.os.family)\r\n          }\r\n        }\r\n\r\n  if (o.os.name == 'os') o.os.name = 'osx'\r\n  if (o.name == 'chrome mobile') o.name = 'chrome'\r\n  if (o.name == 'microsoft edge') o.name = 'ie'\r\n\r\n  const uid = o.name\r\n      + '-' + o.version\r\n      + '-' + o.os.name\r\n      + '-' + o.os.version\r\n\r\n  o.uid = uid\r\n\r\n  return o\r\n}\r\n\r\nconst major = (v, f) => \r\n    v                     ? v.split('.').shift() \r\n  : includes('xp')(lo(f)) ? 'xp'\r\n                          : '?'\r\n\r\nconst limit = next => (req, socket) => {\r\n  return socket.handshake.url == '/dashboard' ? next(req, socket) : false\r\n}\r\n\r\nconst boot = farm => url => opts => {\r\n  const { _name = '?', _version = '?', _os = '?' } = opts\r\n      , { connect, parse = identity } = farms[farm]\r\n      , id = `${_name.cyan} ${_version.cyan} on ${_os}`\r\n      , vm = opts.vm = connect(wd)\r\n\r\n  if (!vm) err('failed to connect to ' + farm), process.exit(1)\r\n\r\n  log(`booting up ${id}`)\r\n  \r\n  vm.init(parse(opts), e => {\r\n    if (e) return err(e, id)\r\n    log('initialised', id)\r\n    vm.get(url, e => {\r\n      if (e) return err(e, id)\r\n      log('opened to test page', id.cyan)\r\n      heartbeat(vm)\r\n    })\r\n  })\r\n}"]},"metadata":{},"sourceType":"script"}