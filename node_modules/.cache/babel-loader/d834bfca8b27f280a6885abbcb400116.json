{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\"use strict\";\n\nvar acorn = require(\"acorn\");\n\nvar tt = acorn.tokTypes;\nvar isIdentifierStart = acorn.isIdentifierStart;\n\nmodule.exports = function (Parser) {\n  return (\n    /*@__PURE__*/\n    function (Parser) {\n      function anonymous() {\n        Parser.apply(this, arguments);\n      }\n\n      if (Parser) anonymous.__proto__ = Parser;\n      anonymous.prototype = Object.create(Parser && Parser.prototype);\n      anonymous.prototype.constructor = anonymous;\n\n      anonymous.prototype.parseLiteral = function parseLiteral(value) {\n        var node = Parser.prototype.parseLiteral.call(this, value);\n\n        if (node.raw.charCodeAt(node.raw.length - 1) == 110) {\n          node.bigint = this.getNumberInput(node.start, node.end);\n        }\n\n        return node;\n      };\n\n      anonymous.prototype.readRadixNumber = function readRadixNumber(radix) {\n        var start = this.pos;\n        this.pos += 2; // 0x\n\n        var val = this.readInt(radix);\n\n        if (val === null) {\n          this.raise(this.start + 2, \"Expected number in radix \" + radix);\n        }\n\n        if (this.input.charCodeAt(this.pos) == 110) {\n          var str = this.getNumberInput(start, this.pos);\n          val = typeof BigInt !== \"undefined\" ? BigInt(str) : null;\n          ++this.pos;\n        } else if (isIdentifierStart(this.fullCharCodeAtPos())) {\n          this.raise(this.pos, \"Identifier directly after number\");\n        }\n\n        return this.finishToken(tt.num, val);\n      };\n\n      anonymous.prototype.readNumber = function readNumber(startsWithDot) {\n        var start = this.pos; // Not an int\n\n        if (startsWithDot) {\n          return Parser.prototype.readNumber.call(this, startsWithDot);\n        } // Legacy octal\n\n\n        if (this.input.charCodeAt(start) === 48 && this.input.charCodeAt(start + 1) !== 110) {\n          return Parser.prototype.readNumber.call(this, startsWithDot);\n        }\n\n        if (this.readInt(10) === null) {\n          this.raise(start, \"Invalid number\");\n        } // Not a BigInt, reset and parse again\n\n\n        if (this.input.charCodeAt(this.pos) != 110) {\n          this.pos = start;\n          return Parser.prototype.readNumber.call(this, startsWithDot);\n        }\n\n        var str = this.getNumberInput(start, this.pos);\n        var val = typeof BigInt !== \"undefined\" ? BigInt(str) : null;\n        ++this.pos;\n        return this.finishToken(tt.num, val);\n      }; // This is basically a hook for acorn-numeric-separator\n\n\n      anonymous.prototype.getNumberInput = function getNumberInput(start, end) {\n        if (Parser.prototype.getNumberInput) {\n          return Parser.prototype.getNumberInput.call(this, start, end);\n        }\n\n        return this.input.slice(start, end);\n      };\n\n      return anonymous;\n    }(Parser)\n  );\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/acorn-node/lib/bigint/index.js"],"names":["acorn","require","tt","tokTypes","isIdentifierStart","module","exports","Parser","anonymous","apply","arguments","__proto__","prototype","Object","create","constructor","parseLiteral","value","node","call","raw","charCodeAt","length","bigint","getNumberInput","start","end","readRadixNumber","radix","pos","val","readInt","raise","input","str","BigInt","fullCharCodeAtPos","finishToken","num","readNumber","startsWithDot","slice"],"mappings":"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","sourcesContent":["/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nvar acorn = require(\"acorn\")\nvar tt = acorn.tokTypes\nvar isIdentifierStart = acorn.isIdentifierStart\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.parseLiteral = function parseLiteral (value) {\n      var node = Parser.prototype.parseLiteral.call(this, value)\n      if (node.raw.charCodeAt(node.raw.length - 1) == 110) { node.bigint = this.getNumberInput(node.start, node.end) }\n      return node\n    };\n\n    anonymous.prototype.readRadixNumber = function readRadixNumber (radix) {\n      var start = this.pos\n      this.pos += 2 // 0x\n      var val = this.readInt(radix)\n      if (val === null) { this.raise(this.start + 2, (\"Expected number in radix \" + radix)) }\n      if (this.input.charCodeAt(this.pos) == 110) {\n        var str = this.getNumberInput(start, this.pos)\n        val = typeof BigInt !== \"undefined\" ? BigInt(str) : null\n        ++this.pos\n      } else if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\") }\n      return this.finishToken(tt.num, val)\n    };\n\n    anonymous.prototype.readNumber = function readNumber (startsWithDot) {\n      var start = this.pos\n\n      // Not an int\n      if (startsWithDot) { return Parser.prototype.readNumber.call(this, startsWithDot) }\n\n      // Legacy octal\n      if (this.input.charCodeAt(start) === 48 && this.input.charCodeAt(start + 1) !== 110) {\n        return Parser.prototype.readNumber.call(this, startsWithDot)\n      }\n\n      if (this.readInt(10) === null) { this.raise(start, \"Invalid number\") }\n\n      // Not a BigInt, reset and parse again\n      if (this.input.charCodeAt(this.pos) != 110) {\n        this.pos = start\n        return Parser.prototype.readNumber.call(this, startsWithDot)\n      }\n\n      var str = this.getNumberInput(start, this.pos)\n      var val = typeof BigInt !== \"undefined\" ? BigInt(str) : null\n      ++this.pos\n      return this.finishToken(tt.num, val)\n    };\n\n    // This is basically a hook for acorn-numeric-separator\n    anonymous.prototype.getNumberInput = function getNumberInput (start, end) {\n      if (Parser.prototype.getNumberInput) { return Parser.prototype.getNumberInput.call(this, start, end) }\n      return this.input.slice(start, end)\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"]},"metadata":{},"sourceType":"script"}