{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory((global.acorn = global.acorn || {}, global.acorn.walk = {}));\n})(this, function (exports) {\n  'use strict'; // AST walker module for Mozilla Parser API compatible trees\n  // A simple walk is one where you simply specify callbacks to be\n  // called on specific nodes. The last two arguments are optional. A\n  // simple use would be\n  //\n  //     walk.simple(myTree, {\n  //         Expression: function(node) { ... }\n  //     });\n  //\n  // to do something with all expressions. All Parser API node types\n  // can be used to identify node types, as well as Expression,\n  // Statement, and ScopeBody, which denote categories of nodes.\n  //\n  // The base argument can be used to pass a custom (recursive)\n  // walker, and state can be used to give this walked an initial\n  // state.\n\n  function simple(node, visitors, baseVisitor, state, override) {\n    if (!baseVisitor) {\n      baseVisitor = base;\n    }\n\n    (function c(node, st, override) {\n      var type = override || node.type,\n          found = visitors[type];\n      baseVisitor[type](node, st, c);\n\n      if (found) {\n        found(node, st);\n      }\n    })(node, state, override);\n  } // An ancestor walk keeps an array of ancestor nodes (including the\n  // current node) and passes them to the callback as third parameter\n  // (and also as state parameter when no other state is present).\n\n\n  function ancestor(node, visitors, baseVisitor, state) {\n    var ancestors = [];\n\n    if (!baseVisitor) {\n      baseVisitor = base;\n    }\n\n    (function c(node, st, override) {\n      var type = override || node.type,\n          found = visitors[type];\n      var isNew = node !== ancestors[ancestors.length - 1];\n\n      if (isNew) {\n        ancestors.push(node);\n      }\n\n      baseVisitor[type](node, st, c);\n\n      if (found) {\n        found(node, st || ancestors, ancestors);\n      }\n\n      if (isNew) {\n        ancestors.pop();\n      }\n    })(node, state);\n  } // A recursive walk is one where your functions override the default\n  // walkers. They can modify and replace the state parameter that's\n  // threaded through the walk, and can opt how and whether to walk\n  // their child nodes (by calling their third argument on these\n  // nodes).\n\n\n  function recursive(node, state, funcs, baseVisitor, override) {\n    var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor;\n\n    (function c(node, st, override) {\n      visitor[override || node.type](node, st, c);\n    })(node, state, override);\n  }\n\n  function makeTest(test) {\n    if (typeof test === \"string\") {\n      return function (type) {\n        return type === test;\n      };\n    } else if (!test) {\n      return function () {\n        return true;\n      };\n    } else {\n      return test;\n    }\n  }\n\n  var Found = function Found(node, state) {\n    this.node = node;\n    this.state = state;\n  }; // A full walk triggers the callback on each node\n\n\n  function full(node, callback, baseVisitor, state, override) {\n    if (!baseVisitor) {\n      baseVisitor = base;\n    }\n\n    (function c(node, st, override) {\n      var type = override || node.type;\n      baseVisitor[type](node, st, c);\n\n      if (!override) {\n        callback(node, st, type);\n      }\n    })(node, state, override);\n  } // An fullAncestor walk is like an ancestor walk, but triggers\n  // the callback on each node\n\n\n  function fullAncestor(node, callback, baseVisitor, state) {\n    if (!baseVisitor) {\n      baseVisitor = base;\n    }\n\n    var ancestors = [];\n\n    (function c(node, st, override) {\n      var type = override || node.type;\n      var isNew = node !== ancestors[ancestors.length - 1];\n\n      if (isNew) {\n        ancestors.push(node);\n      }\n\n      baseVisitor[type](node, st, c);\n\n      if (!override) {\n        callback(node, st || ancestors, ancestors, type);\n      }\n\n      if (isNew) {\n        ancestors.pop();\n      }\n    })(node, state);\n  } // Find a node with a given start, end, and type (all are optional,\n  // null can be used as wildcard). Returns a {node, state} object, or\n  // undefined when it doesn't find a matching node.\n\n\n  function findNodeAt(node, start, end, test, baseVisitor, state) {\n    if (!baseVisitor) {\n      baseVisitor = base;\n    }\n\n    test = makeTest(test);\n\n    try {\n      (function c(node, st, override) {\n        var type = override || node.type;\n\n        if ((start == null || node.start <= start) && (end == null || node.end >= end)) {\n          baseVisitor[type](node, st, c);\n        }\n\n        if ((start == null || node.start === start) && (end == null || node.end === end) && test(type, node)) {\n          throw new Found(node, st);\n        }\n      })(node, state);\n    } catch (e) {\n      if (e instanceof Found) {\n        return e;\n      }\n\n      throw e;\n    }\n  } // Find the innermost node of a given type that contains the given\n  // position. Interface similar to findNodeAt.\n\n\n  function findNodeAround(node, pos, test, baseVisitor, state) {\n    test = makeTest(test);\n\n    if (!baseVisitor) {\n      baseVisitor = base;\n    }\n\n    try {\n      (function c(node, st, override) {\n        var type = override || node.type;\n\n        if (node.start > pos || node.end < pos) {\n          return;\n        }\n\n        baseVisitor[type](node, st, c);\n\n        if (test(type, node)) {\n          throw new Found(node, st);\n        }\n      })(node, state);\n    } catch (e) {\n      if (e instanceof Found) {\n        return e;\n      }\n\n      throw e;\n    }\n  } // Find the outermost matching node after a given position.\n\n\n  function findNodeAfter(node, pos, test, baseVisitor, state) {\n    test = makeTest(test);\n\n    if (!baseVisitor) {\n      baseVisitor = base;\n    }\n\n    try {\n      (function c(node, st, override) {\n        if (node.end < pos) {\n          return;\n        }\n\n        var type = override || node.type;\n\n        if (node.start >= pos && test(type, node)) {\n          throw new Found(node, st);\n        }\n\n        baseVisitor[type](node, st, c);\n      })(node, state);\n    } catch (e) {\n      if (e instanceof Found) {\n        return e;\n      }\n\n      throw e;\n    }\n  } // Find the outermost matching node before a given position.\n\n\n  function findNodeBefore(node, pos, test, baseVisitor, state) {\n    test = makeTest(test);\n\n    if (!baseVisitor) {\n      baseVisitor = base;\n    }\n\n    var max;\n\n    (function c(node, st, override) {\n      if (node.start > pos) {\n        return;\n      }\n\n      var type = override || node.type;\n\n      if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) {\n        max = new Found(node, st);\n      }\n\n      baseVisitor[type](node, st, c);\n    })(node, state);\n\n    return max;\n  } // Fallback to an Object.create polyfill for older environments.\n\n\n  var create = Object.create || function (proto) {\n    function Ctor() {}\n\n    Ctor.prototype = proto;\n    return new Ctor();\n  }; // Used to create a custom walker. Will fill in all missing node\n  // type properties with the defaults.\n\n\n  function make(funcs, baseVisitor) {\n    var visitor = create(baseVisitor || base);\n\n    for (var type in funcs) {\n      visitor[type] = funcs[type];\n    }\n\n    return visitor;\n  }\n\n  function skipThrough(node, st, c) {\n    c(node, st);\n  }\n\n  function ignore(_node, _st, _c) {} // Node walkers.\n\n\n  var base = {};\n\n  base.Program = base.BlockStatement = function (node, st, c) {\n    for (var i = 0, list = node.body; i < list.length; i += 1) {\n      var stmt = list[i];\n      c(stmt, st, \"Statement\");\n    }\n  };\n\n  base.Statement = skipThrough;\n  base.EmptyStatement = ignore;\n\n  base.ExpressionStatement = base.ParenthesizedExpression = function (node, st, c) {\n    return c(node.expression, st, \"Expression\");\n  };\n\n  base.IfStatement = function (node, st, c) {\n    c(node.test, st, \"Expression\");\n    c(node.consequent, st, \"Statement\");\n\n    if (node.alternate) {\n      c(node.alternate, st, \"Statement\");\n    }\n  };\n\n  base.LabeledStatement = function (node, st, c) {\n    return c(node.body, st, \"Statement\");\n  };\n\n  base.BreakStatement = base.ContinueStatement = ignore;\n\n  base.WithStatement = function (node, st, c) {\n    c(node.object, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n\n  base.SwitchStatement = function (node, st, c) {\n    c(node.discriminant, st, \"Expression\");\n\n    for (var i = 0, list = node.cases; i < list.length; i += 1) {\n      var cs = list[i];\n\n      if (cs.test) {\n        c(cs.test, st, \"Expression\");\n      }\n\n      for (var i$1 = 0, list$1 = cs.consequent; i$1 < list$1.length; i$1 += 1) {\n        var cons = list$1[i$1];\n        c(cons, st, \"Statement\");\n      }\n    }\n  };\n\n  base.SwitchCase = function (node, st, c) {\n    if (node.test) {\n      c(node.test, st, \"Expression\");\n    }\n\n    for (var i = 0, list = node.consequent; i < list.length; i += 1) {\n      var cons = list[i];\n      c(cons, st, \"Statement\");\n    }\n  };\n\n  base.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {\n    if (node.argument) {\n      c(node.argument, st, \"Expression\");\n    }\n  };\n\n  base.ThrowStatement = base.SpreadElement = function (node, st, c) {\n    return c(node.argument, st, \"Expression\");\n  };\n\n  base.TryStatement = function (node, st, c) {\n    c(node.block, st, \"Statement\");\n\n    if (node.handler) {\n      c(node.handler, st);\n    }\n\n    if (node.finalizer) {\n      c(node.finalizer, st, \"Statement\");\n    }\n  };\n\n  base.CatchClause = function (node, st, c) {\n    if (node.param) {\n      c(node.param, st, \"Pattern\");\n    }\n\n    c(node.body, st, \"ScopeBody\");\n  };\n\n  base.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n    c(node.test, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n\n  base.ForStatement = function (node, st, c) {\n    if (node.init) {\n      c(node.init, st, \"ForInit\");\n    }\n\n    if (node.test) {\n      c(node.test, st, \"Expression\");\n    }\n\n    if (node.update) {\n      c(node.update, st, \"Expression\");\n    }\n\n    c(node.body, st, \"Statement\");\n  };\n\n  base.ForInStatement = base.ForOfStatement = function (node, st, c) {\n    c(node.left, st, \"ForInit\");\n    c(node.right, st, \"Expression\");\n    c(node.body, st, \"Statement\");\n  };\n\n  base.ForInit = function (node, st, c) {\n    if (node.type === \"VariableDeclaration\") {\n      c(node, st);\n    } else {\n      c(node, st, \"Expression\");\n    }\n  };\n\n  base.DebuggerStatement = ignore;\n\n  base.FunctionDeclaration = function (node, st, c) {\n    return c(node, st, \"Function\");\n  };\n\n  base.VariableDeclaration = function (node, st, c) {\n    for (var i = 0, list = node.declarations; i < list.length; i += 1) {\n      var decl = list[i];\n      c(decl, st);\n    }\n  };\n\n  base.VariableDeclarator = function (node, st, c) {\n    c(node.id, st, \"Pattern\");\n\n    if (node.init) {\n      c(node.init, st, \"Expression\");\n    }\n  };\n\n  base.Function = function (node, st, c) {\n    if (node.id) {\n      c(node.id, st, \"Pattern\");\n    }\n\n    for (var i = 0, list = node.params; i < list.length; i += 1) {\n      var param = list[i];\n      c(param, st, \"Pattern\");\n    }\n\n    c(node.body, st, node.expression ? \"ScopeExpression\" : \"ScopeBody\");\n  }; // FIXME drop these node types in next major version\n  // (They are awkward, and in ES6 every block can be a scope.)\n\n\n  base.ScopeBody = function (node, st, c) {\n    return c(node, st, \"Statement\");\n  };\n\n  base.ScopeExpression = function (node, st, c) {\n    return c(node, st, \"Expression\");\n  };\n\n  base.Pattern = function (node, st, c) {\n    if (node.type === \"Identifier\") {\n      c(node, st, \"VariablePattern\");\n    } else if (node.type === \"MemberExpression\") {\n      c(node, st, \"MemberPattern\");\n    } else {\n      c(node, st);\n    }\n  };\n\n  base.VariablePattern = ignore;\n  base.MemberPattern = skipThrough;\n\n  base.RestElement = function (node, st, c) {\n    return c(node.argument, st, \"Pattern\");\n  };\n\n  base.ArrayPattern = function (node, st, c) {\n    for (var i = 0, list = node.elements; i < list.length; i += 1) {\n      var elt = list[i];\n\n      if (elt) {\n        c(elt, st, \"Pattern\");\n      }\n    }\n  };\n\n  base.ObjectPattern = function (node, st, c) {\n    for (var i = 0, list = node.properties; i < list.length; i += 1) {\n      var prop = list[i];\n\n      if (prop.type === \"Property\") {\n        if (prop.computed) {\n          c(prop.key, st, \"Expression\");\n        }\n\n        c(prop.value, st, \"Pattern\");\n      } else if (prop.type === \"RestElement\") {\n        c(prop.argument, st, \"Pattern\");\n      }\n    }\n  };\n\n  base.Expression = skipThrough;\n  base.ThisExpression = base.Super = base.MetaProperty = ignore;\n\n  base.ArrayExpression = function (node, st, c) {\n    for (var i = 0, list = node.elements; i < list.length; i += 1) {\n      var elt = list[i];\n\n      if (elt) {\n        c(elt, st, \"Expression\");\n      }\n    }\n  };\n\n  base.ObjectExpression = function (node, st, c) {\n    for (var i = 0, list = node.properties; i < list.length; i += 1) {\n      var prop = list[i];\n      c(prop, st);\n    }\n  };\n\n  base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\n\n  base.SequenceExpression = base.TemplateLiteral = function (node, st, c) {\n    for (var i = 0, list = node.expressions; i < list.length; i += 1) {\n      var expr = list[i];\n      c(expr, st, \"Expression\");\n    }\n  };\n\n  base.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n    c(node.argument, st, \"Expression\");\n  };\n\n  base.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n    c(node.left, st, \"Expression\");\n    c(node.right, st, \"Expression\");\n  };\n\n  base.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n    c(node.left, st, \"Pattern\");\n    c(node.right, st, \"Expression\");\n  };\n\n  base.ConditionalExpression = function (node, st, c) {\n    c(node.test, st, \"Expression\");\n    c(node.consequent, st, \"Expression\");\n    c(node.alternate, st, \"Expression\");\n  };\n\n  base.NewExpression = base.CallExpression = function (node, st, c) {\n    c(node.callee, st, \"Expression\");\n\n    if (node.arguments) {\n      for (var i = 0, list = node.arguments; i < list.length; i += 1) {\n        var arg = list[i];\n        c(arg, st, \"Expression\");\n      }\n    }\n  };\n\n  base.MemberExpression = function (node, st, c) {\n    c(node.object, st, \"Expression\");\n\n    if (node.computed) {\n      c(node.property, st, \"Expression\");\n    }\n  };\n\n  base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n    if (node.declaration) {\n      c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\");\n    }\n\n    if (node.source) {\n      c(node.source, st, \"Expression\");\n    }\n  };\n\n  base.ExportAllDeclaration = function (node, st, c) {\n    c(node.source, st, \"Expression\");\n  };\n\n  base.ImportDeclaration = function (node, st, c) {\n    for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n      var spec = list[i];\n      c(spec, st);\n    }\n\n    c(node.source, st, \"Expression\");\n  };\n\n  base.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;\n\n  base.TaggedTemplateExpression = function (node, st, c) {\n    c(node.tag, st, \"Expression\");\n    c(node.quasi, st, \"Expression\");\n  };\n\n  base.ClassDeclaration = base.ClassExpression = function (node, st, c) {\n    return c(node, st, \"Class\");\n  };\n\n  base.Class = function (node, st, c) {\n    if (node.id) {\n      c(node.id, st, \"Pattern\");\n    }\n\n    if (node.superClass) {\n      c(node.superClass, st, \"Expression\");\n    }\n\n    c(node.body, st);\n  };\n\n  base.ClassBody = function (node, st, c) {\n    for (var i = 0, list = node.body; i < list.length; i += 1) {\n      var elt = list[i];\n      c(elt, st);\n    }\n  };\n\n  base.MethodDefinition = base.Property = function (node, st, c) {\n    if (node.computed) {\n      c(node.key, st, \"Expression\");\n    }\n\n    c(node.value, st, \"Expression\");\n  };\n\n  exports.simple = simple;\n  exports.ancestor = ancestor;\n  exports.recursive = recursive;\n  exports.full = full;\n  exports.fullAncestor = fullAncestor;\n  exports.findNodeAt = findNodeAt;\n  exports.findNodeAround = findNodeAround;\n  exports.findNodeAfter = findNodeAfter;\n  exports.findNodeBefore = findNodeBefore;\n  exports.make = make;\n  exports.base = base;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/detective/node_modules/acorn/dist/walk.js"],"names":["global","factory","exports","module","define","amd","acorn","walk","simple","node","visitors","baseVisitor","state","override","base","c","st","type","found","ancestor","ancestors","isNew","length","push","pop","recursive","funcs","visitor","make","undefined","makeTest","test","Found","full","callback","fullAncestor","findNodeAt","start","end","e","findNodeAround","pos","findNodeAfter","findNodeBefore","max","create","Object","proto","Ctor","prototype","skipThrough","ignore","_node","_st","_c","Program","BlockStatement","i","list","body","stmt","Statement","EmptyStatement","ExpressionStatement","ParenthesizedExpression","expression","IfStatement","consequent","alternate","LabeledStatement","BreakStatement","ContinueStatement","WithStatement","object","SwitchStatement","discriminant","cases","cs","i$1","list$1","cons","SwitchCase","ReturnStatement","YieldExpression","AwaitExpression","argument","ThrowStatement","SpreadElement","TryStatement","block","handler","finalizer","CatchClause","param","WhileStatement","DoWhileStatement","ForStatement","init","update","ForInStatement","ForOfStatement","left","right","ForInit","DebuggerStatement","FunctionDeclaration","VariableDeclaration","declarations","decl","VariableDeclarator","id","Function","params","ScopeBody","ScopeExpression","Pattern","VariablePattern","MemberPattern","RestElement","ArrayPattern","elements","elt","ObjectPattern","properties","prop","computed","key","value","Expression","ThisExpression","Super","MetaProperty","ArrayExpression","ObjectExpression","FunctionExpression","ArrowFunctionExpression","SequenceExpression","TemplateLiteral","expressions","expr","UnaryExpression","UpdateExpression","BinaryExpression","LogicalExpression","AssignmentExpression","AssignmentPattern","ConditionalExpression","NewExpression","CallExpression","callee","arguments","arg","MemberExpression","property","ExportNamedDeclaration","ExportDefaultDeclaration","declaration","source","ExportAllDeclaration","ImportDeclaration","specifiers","spec","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","Identifier","Literal","TaggedTemplateExpression","tag","quasi","ClassDeclaration","ClassExpression","Class","superClass","ClassBody","MethodDefinition","Property","defineProperty"],"mappings":"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","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.acorn = global.acorn || {}, global.acorn.walk = {})));\n}(this, (function (exports) { 'use strict';\n\n// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression,\n// Statement, and ScopeBody, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nfunction simple(node, visitors, baseVisitor, state, override) {\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type, found = visitors[type];\n    baseVisitor[type](node, st, c);\n    if (found) { found(node, st); }\n  })(node, state, override);\n}\n\n// An ancestor walk keeps an array of ancestor nodes (including the\n// current node) and passes them to the callback as third parameter\n// (and also as state parameter when no other state is present).\nfunction ancestor(node, visitors, baseVisitor, state) {\n  var ancestors = [];\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type, found = visitors[type];\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) { ancestors.push(node); }\n    baseVisitor[type](node, st, c);\n    if (found) { found(node, st || ancestors, ancestors); }\n    if (isNew) { ancestors.pop(); }\n  })(node, state);\n}\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nfunction recursive(node, state, funcs, baseVisitor, override) {\n  var visitor = funcs ? make(funcs, baseVisitor || undefined) : baseVisitor;(function c(node, st, override) {\n    visitor[override || node.type](node, st, c);\n  })(node, state, override);\n}\n\nfunction makeTest(test) {\n  if (typeof test === \"string\")\n    { return function (type) { return type === test; } }\n  else if (!test)\n    { return function () { return true; } }\n  else\n    { return test }\n}\n\nvar Found = function Found(node, state) { this.node = node; this.state = state; };\n\n// A full walk triggers the callback on each node\nfunction full(node, callback, baseVisitor, state, override) {\n  if (!baseVisitor) { baseVisitor = base\n  ; }(function c(node, st, override) {\n    var type = override || node.type;\n    baseVisitor[type](node, st, c);\n    if (!override) { callback(node, st, type); }\n  })(node, state, override);\n}\n\n// An fullAncestor walk is like an ancestor walk, but triggers\n// the callback on each node\nfunction fullAncestor(node, callback, baseVisitor, state) {\n  if (!baseVisitor) { baseVisitor = base; }\n  var ancestors = [];(function c(node, st, override) {\n    var type = override || node.type;\n    var isNew = node !== ancestors[ancestors.length - 1];\n    if (isNew) { ancestors.push(node); }\n    baseVisitor[type](node, st, c);\n    if (!override) { callback(node, st || ancestors, ancestors, type); }\n    if (isNew) { ancestors.pop(); }\n  })(node, state);\n}\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nfunction findNodeAt(node, start, end, test, baseVisitor, state) {\n  if (!baseVisitor) { baseVisitor = base; }\n  test = makeTest(test);\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if ((start == null || node.start <= start) &&\n          (end == null || node.end >= end))\n        { baseVisitor[type](node, st, c); }\n      if ((start == null || node.start === start) &&\n          (end == null || node.end === end) &&\n          test(type, node))\n        { throw new Found(node, st) }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nfunction findNodeAround(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  try {\n    (function c(node, st, override) {\n      var type = override || node.type;\n      if (node.start > pos || node.end < pos) { return }\n      baseVisitor[type](node, st, c);\n      if (test(type, node)) { throw new Found(node, st) }\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the outermost matching node after a given position.\nfunction findNodeAfter(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  try {\n    (function c(node, st, override) {\n      if (node.end < pos) { return }\n      var type = override || node.type;\n      if (node.start >= pos && test(type, node)) { throw new Found(node, st) }\n      baseVisitor[type](node, st, c);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) { return e }\n    throw e\n  }\n}\n\n// Find the outermost matching node before a given position.\nfunction findNodeBefore(node, pos, test, baseVisitor, state) {\n  test = makeTest(test);\n  if (!baseVisitor) { baseVisitor = base; }\n  var max;(function c(node, st, override) {\n    if (node.start > pos) { return }\n    var type = override || node.type;\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node))\n      { max = new Found(node, st); }\n    baseVisitor[type](node, st, c);\n  })(node, state);\n  return max\n}\n\n// Fallback to an Object.create polyfill for older environments.\nvar create = Object.create || function(proto) {\n  function Ctor() {}\n  Ctor.prototype = proto;\n  return new Ctor\n};\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nfunction make(funcs, baseVisitor) {\n  var visitor = create(baseVisitor || base);\n  for (var type in funcs) { visitor[type] = funcs[type]; }\n  return visitor\n}\n\nfunction skipThrough(node, st, c) { c(node, st); }\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nvar base = {};\n\nbase.Program = base.BlockStatement = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1)\n    {\n    var stmt = list[i];\n\n    c(stmt, st, \"Statement\");\n  }\n};\nbase.Statement = skipThrough;\nbase.EmptyStatement = ignore;\nbase.ExpressionStatement = base.ParenthesizedExpression =\n  function (node, st, c) { return c(node.expression, st, \"Expression\"); };\nbase.IfStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Statement\");\n  if (node.alternate) { c(node.alternate, st, \"Statement\"); }\n};\nbase.LabeledStatement = function (node, st, c) { return c(node.body, st, \"Statement\"); };\nbase.BreakStatement = base.ContinueStatement = ignore;\nbase.WithStatement = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.SwitchStatement = function (node, st, c) {\n  c(node.discriminant, st, \"Expression\");\n  for (var i = 0, list = node.cases; i < list.length; i += 1) {\n    var cs = list[i];\n\n    if (cs.test) { c(cs.test, st, \"Expression\"); }\n    for (var i$1 = 0, list$1 = cs.consequent; i$1 < list$1.length; i$1 += 1)\n      {\n      var cons = list$1[i$1];\n\n      c(cons, st, \"Statement\");\n    }\n  }\n};\nbase.SwitchCase = function (node, st, c) {\n  if (node.test) { c(node.test, st, \"Expression\"); }\n  for (var i = 0, list = node.consequent; i < list.length; i += 1)\n    {\n    var cons = list[i];\n\n    c(cons, st, \"Statement\");\n  }\n};\nbase.ReturnStatement = base.YieldExpression = base.AwaitExpression = function (node, st, c) {\n  if (node.argument) { c(node.argument, st, \"Expression\"); }\n};\nbase.ThrowStatement = base.SpreadElement =\n  function (node, st, c) { return c(node.argument, st, \"Expression\"); };\nbase.TryStatement = function (node, st, c) {\n  c(node.block, st, \"Statement\");\n  if (node.handler) { c(node.handler, st); }\n  if (node.finalizer) { c(node.finalizer, st, \"Statement\"); }\n};\nbase.CatchClause = function (node, st, c) {\n  if (node.param) { c(node.param, st, \"Pattern\"); }\n  c(node.body, st, \"ScopeBody\");\n};\nbase.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForStatement = function (node, st, c) {\n  if (node.init) { c(node.init, st, \"ForInit\"); }\n  if (node.test) { c(node.test, st, \"Expression\"); }\n  if (node.update) { c(node.update, st, \"Expression\"); }\n  c(node.body, st, \"Statement\");\n};\nbase.ForInStatement = base.ForOfStatement = function (node, st, c) {\n  c(node.left, st, \"ForInit\");\n  c(node.right, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForInit = function (node, st, c) {\n  if (node.type === \"VariableDeclaration\") { c(node, st); }\n  else { c(node, st, \"Expression\"); }\n};\nbase.DebuggerStatement = ignore;\n\nbase.FunctionDeclaration = function (node, st, c) { return c(node, st, \"Function\"); };\nbase.VariableDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.declarations; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    c(decl, st);\n  }\n};\nbase.VariableDeclarator = function (node, st, c) {\n  c(node.id, st, \"Pattern\");\n  if (node.init) { c(node.init, st, \"Expression\"); }\n};\n\nbase.Function = function (node, st, c) {\n  if (node.id) { c(node.id, st, \"Pattern\"); }\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    c(param, st, \"Pattern\");\n  }\n  c(node.body, st, node.expression ? \"ScopeExpression\" : \"ScopeBody\");\n};\n// FIXME drop these node types in next major version\n// (They are awkward, and in ES6 every block can be a scope.)\nbase.ScopeBody = function (node, st, c) { return c(node, st, \"Statement\"); };\nbase.ScopeExpression = function (node, st, c) { return c(node, st, \"Expression\"); };\n\nbase.Pattern = function (node, st, c) {\n  if (node.type === \"Identifier\")\n    { c(node, st, \"VariablePattern\"); }\n  else if (node.type === \"MemberExpression\")\n    { c(node, st, \"MemberPattern\"); }\n  else\n    { c(node, st); }\n};\nbase.VariablePattern = ignore;\nbase.MemberPattern = skipThrough;\nbase.RestElement = function (node, st, c) { return c(node.argument, st, \"Pattern\"); };\nbase.ArrayPattern = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt, st, \"Pattern\"); }\n  }\n};\nbase.ObjectPattern = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1) {\n    var prop = list[i];\n\n    if (prop.type === \"Property\") {\n      if (prop.computed) { c(prop.key, st, \"Expression\"); }\n      c(prop.value, st, \"Pattern\");\n    } else if (prop.type === \"RestElement\") {\n      c(prop.argument, st, \"Pattern\");\n    }\n  }\n};\n\nbase.Expression = skipThrough;\nbase.ThisExpression = base.Super = base.MetaProperty = ignore;\nbase.ArrayExpression = function (node, st, c) {\n  for (var i = 0, list = node.elements; i < list.length; i += 1) {\n    var elt = list[i];\n\n    if (elt) { c(elt, st, \"Expression\"); }\n  }\n};\nbase.ObjectExpression = function (node, st, c) {\n  for (var i = 0, list = node.properties; i < list.length; i += 1)\n    {\n    var prop = list[i];\n\n    c(prop, st);\n  }\n};\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\nbase.SequenceExpression = base.TemplateLiteral = function (node, st, c) {\n  for (var i = 0, list = node.expressions; i < list.length; i += 1)\n    {\n    var expr = list[i];\n\n    c(expr, st, \"Expression\");\n  }\n};\nbase.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n  c(node.argument, st, \"Expression\");\n};\nbase.BinaryExpression = base.LogicalExpression = function (node, st, c) {\n  c(node.left, st, \"Expression\");\n  c(node.right, st, \"Expression\");\n};\nbase.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {\n  c(node.left, st, \"Pattern\");\n  c(node.right, st, \"Expression\");\n};\nbase.ConditionalExpression = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Expression\");\n  c(node.alternate, st, \"Expression\");\n};\nbase.NewExpression = base.CallExpression = function (node, st, c) {\n  c(node.callee, st, \"Expression\");\n  if (node.arguments)\n    { for (var i = 0, list = node.arguments; i < list.length; i += 1)\n      {\n        var arg = list[i];\n\n        c(arg, st, \"Expression\");\n      } }\n};\nbase.MemberExpression = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  if (node.computed) { c(node.property, st, \"Expression\"); }\n};\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n  if (node.declaration)\n    { c(node.declaration, st, node.type === \"ExportNamedDeclaration\" || node.declaration.id ? \"Statement\" : \"Expression\"); }\n  if (node.source) { c(node.source, st, \"Expression\"); }\n};\nbase.ExportAllDeclaration = function (node, st, c) {\n  c(node.source, st, \"Expression\");\n};\nbase.ImportDeclaration = function (node, st, c) {\n  for (var i = 0, list = node.specifiers; i < list.length; i += 1)\n    {\n    var spec = list[i];\n\n    c(spec, st);\n  }\n  c(node.source, st, \"Expression\");\n};\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;\n\nbase.TaggedTemplateExpression = function (node, st, c) {\n  c(node.tag, st, \"Expression\");\n  c(node.quasi, st, \"Expression\");\n};\nbase.ClassDeclaration = base.ClassExpression = function (node, st, c) { return c(node, st, \"Class\"); };\nbase.Class = function (node, st, c) {\n  if (node.id) { c(node.id, st, \"Pattern\"); }\n  if (node.superClass) { c(node.superClass, st, \"Expression\"); }\n  c(node.body, st);\n};\nbase.ClassBody = function (node, st, c) {\n  for (var i = 0, list = node.body; i < list.length; i += 1)\n    {\n    var elt = list[i];\n\n    c(elt, st);\n  }\n};\nbase.MethodDefinition = base.Property = function (node, st, c) {\n  if (node.computed) { c(node.key, st, \"Expression\"); }\n  c(node.value, st, \"Expression\");\n};\n\nexports.simple = simple;\nexports.ancestor = ancestor;\nexports.recursive = recursive;\nexports.full = full;\nexports.fullAncestor = fullAncestor;\nexports.findNodeAt = findNodeAt;\nexports.findNodeAround = findNodeAround;\nexports.findNodeAfter = findNodeAfter;\nexports.findNodeBefore = findNodeBefore;\nexports.make = make;\nexports.base = base;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n"]},"metadata":{},"sourceType":"script"}