{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar inspect = require('util').inspect;\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\n  }\n}\n\nfunction posix(path) {\n  assertPath(path);\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47\n  /*/*/\n  ;\n  var end = -1;\n  var matchedSlash = true;\n\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n\n    if (code === 47\n    /*/*/\n    ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) return '//';\n  return path.slice(0, end);\n}\n\nfunction win32(path) {\n  assertPath(path);\n  var len = path.length;\n  if (len === 0) return '.';\n  var rootEnd = -1;\n  var end = -1;\n  var matchedSlash = true;\n  var offset = 0;\n  var code = path.charCodeAt(0); // Try to match a root\n\n  if (len > 1) {\n    if (code === 47\n    /*/*/\n    || code === 92\n    /*\\*/\n    ) {\n        // Possible UNC root\n        rootEnd = offset = 1;\n        code = path.charCodeAt(1);\n\n        if (code === 47\n        /*/*/\n        || code === 92\n        /*\\*/\n        ) {\n            // Matched double path separator at beginning\n            var j = 2;\n            var last = j; // Match 1 or more non-path separators\n\n            for (; j < len; ++j) {\n              code = path.charCodeAt(j);\n              if (code === 47\n              /*/*/\n              || code === 92\n              /*\\*/\n              ) break;\n            }\n\n            if (j < len && j !== last) {\n              // Matched!\n              last = j; // Match 1 or more path separators\n\n              for (; j < len; ++j) {\n                code = path.charCodeAt(j);\n                if (code !== 47\n                /*/*/\n                && code !== 92\n                /*\\*/\n                ) break;\n              }\n\n              if (j < len && j !== last) {\n                // Matched!\n                last = j; // Match 1 or more non-path separators\n\n                for (; j < len; ++j) {\n                  code = path.charCodeAt(j);\n                  if (code === 47\n                  /*/*/\n                  || code === 92\n                  /*\\*/\n                  ) break;\n                }\n\n                if (j === len) {\n                  // We matched a UNC root only\n                  return path;\n                }\n\n                if (j !== last) {\n                  // We matched a UNC root with leftovers\n                  // Offset by 1 to include the separator after the UNC root to\n                  // treat it as a \"normal root\" on top of a (UNC) root\n                  rootEnd = offset = j + 1;\n                }\n              }\n            }\n          }\n      } else if (code >= 65\n    /*A*/\n    && code <= 90\n    /*Z*/\n    || code >= 97\n    /*a*/\n    && code <= 122\n    /*z*/\n    ) {\n      // Possible device root\n      code = path.charCodeAt(1);\n\n      if (path.charCodeAt(1) === 58\n      /*:*/\n      ) {\n          rootEnd = offset = 2;\n\n          if (len > 2) {\n            code = path.charCodeAt(2);\n            if (code === 47\n            /*/*/\n            || code === 92\n            /*\\*/\n            ) rootEnd = offset = 3;\n          }\n        }\n    }\n  } else if (code === 47\n  /*/*/\n  || code === 92\n  /*\\*/\n  ) {\n      return path[0];\n    }\n\n  for (var i = len - 1; i >= offset; --i) {\n    code = path.charCodeAt(i);\n\n    if (code === 47\n    /*/*/\n    || code === 92\n    /*\\*/\n    ) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) {\n    if (rootEnd === -1) return '.';else end = rootEnd;\n  }\n\n  return path.slice(0, end);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/path-dirname/index.js"],"names":["path","require","inspect","assertPath","TypeError","posix","length","code","charCodeAt","hasRoot","end","matchedSlash","i","slice","win32","len","rootEnd","offset","j","last","module","exports","process","platform"],"mappings":"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","sourcesContent":["'use strict';\n\nvar path = require('path');\nvar inspect = require('util').inspect;\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + inspect(path));\n  }\n}\n\nfunction posix(path) {\n  assertPath(path);\n  if (path.length === 0)\n    return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = (code === 47/*/*/);\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47/*/*/) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1)\n    return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1)\n    return '//';\n  return path.slice(0, end);\n}\n\nfunction win32(path) {\n  assertPath(path);\n  var len = path.length;\n  if (len === 0)\n    return '.';\n  var rootEnd = -1;\n  var end = -1;\n  var matchedSlash = true;\n  var offset = 0;\n  var code = path.charCodeAt(0);\n\n  // Try to match a root\n  if (len > 1) {\n    if (code === 47/*/*/ || code === 92/*\\*/) {\n      // Possible UNC root\n\n      rootEnd = offset = 1;\n\n      code = path.charCodeAt(1);\n      if (code === 47/*/*/ || code === 92/*\\*/) {\n        // Matched double path separator at beginning\n        var j = 2;\n        var last = j;\n        // Match 1 or more non-path separators\n        for (; j < len; ++j) {\n          code = path.charCodeAt(j);\n          if (code === 47/*/*/ || code === 92/*\\*/)\n            break;\n        }\n        if (j < len && j !== last) {\n          // Matched!\n          last = j;\n          // Match 1 or more path separators\n          for (; j < len; ++j) {\n            code = path.charCodeAt(j);\n            if (code !== 47/*/*/ && code !== 92/*\\*/)\n              break;\n          }\n          if (j < len && j !== last) {\n            // Matched!\n            last = j;\n            // Match 1 or more non-path separators\n            for (; j < len; ++j) {\n              code = path.charCodeAt(j);\n              if (code === 47/*/*/ || code === 92/*\\*/)\n                break;\n            }\n            if (j === len) {\n              // We matched a UNC root only\n              return path;\n            }\n            if (j !== last) {\n              // We matched a UNC root with leftovers\n\n              // Offset by 1 to include the separator after the UNC root to\n              // treat it as a \"normal root\" on top of a (UNC) root\n              rootEnd = offset = j + 1;\n            }\n          }\n        }\n      }\n    } else if ((code >= 65/*A*/ && code <= 90/*Z*/) ||\n               (code >= 97/*a*/ && code <= 122/*z*/)) {\n      // Possible device root\n\n      code = path.charCodeAt(1);\n      if (path.charCodeAt(1) === 58/*:*/) {\n        rootEnd = offset = 2;\n        if (len > 2) {\n          code = path.charCodeAt(2);\n          if (code === 47/*/*/ || code === 92/*\\*/)\n            rootEnd = offset = 3;\n        }\n      }\n    }\n  } else if (code === 47/*/*/ || code === 92/*\\*/) {\n    return path[0];\n  }\n\n  for (var i = len - 1; i >= offset; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47/*/*/ || code === 92/*\\*/) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) {\n    if (rootEnd === -1)\n      return '.';\n    else\n      end = rootEnd;\n  }\n  return path.slice(0, end);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;\n"]},"metadata":{},"sourceType":"script"}