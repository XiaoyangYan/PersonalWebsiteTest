{"ast":null,"code":"'use strict';\n\nvar win32 = process && process.platform === 'win32';\n\nvar path = require('path');\n\nvar fileRe = require('filename-regex');\n\nvar utils = module.exports;\n/**\n * Module dependencies\n */\n\nutils.diff = require('arr-diff');\nutils.unique = require('array-unique');\nutils.braces = require('braces');\nutils.brackets = require('expand-brackets');\nutils.extglob = require('extglob');\nutils.isExtglob = require('is-extglob');\nutils.isGlob = require('is-glob');\nutils.typeOf = require('kind-of');\nutils.normalize = require('normalize-path');\nutils.omit = require('object.omit');\nutils.parseGlob = require('parse-glob');\nutils.cache = require('regex-cache');\n/**\n * Get the filename of a filepath\n *\n * @param {String} `string`\n * @return {String}\n */\n\nutils.filename = function filename(fp) {\n  var seg = fp.match(fileRe());\n  return seg && seg[0];\n};\n/**\n * Returns a function that returns true if the given\n * pattern is the same as a given `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\n\nutils.isPath = function isPath(pattern, opts) {\n  opts = opts || {};\n  return function (fp) {\n    var unixified = utils.unixify(fp, opts);\n\n    if (opts.nocase) {\n      return pattern.toLowerCase() === unixified.toLowerCase();\n    }\n\n    return pattern === unixified;\n  };\n};\n/**\n * Returns a function that returns true if the given\n * pattern contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\n\nutils.hasPath = function hasPath(pattern, opts) {\n  return function (fp) {\n    return utils.unixify(pattern, opts).indexOf(fp) !== -1;\n  };\n};\n/**\n * Returns a function that returns true if the given\n * pattern matches or contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\n\nutils.matchPath = function matchPath(pattern, opts) {\n  var fn = opts && opts.contains ? utils.hasPath(pattern, opts) : utils.isPath(pattern, opts);\n  return fn;\n};\n/**\n * Returns a function that returns true if the given\n * regex matches the `filename` of a file path.\n *\n * @param {RegExp} `re`\n * @return {Boolean}\n */\n\n\nutils.hasFilename = function hasFilename(re) {\n  return function (fp) {\n    var name = utils.filename(fp);\n    return name && re.test(name);\n  };\n};\n/**\n * Coerce `val` to an array\n *\n * @param  {*} val\n * @return {Array}\n */\n\n\nutils.arrayify = function arrayify(val) {\n  return !Array.isArray(val) ? [val] : val;\n};\n/**\n * Normalize all slashes in a file path or glob pattern to\n * forward slashes.\n */\n\n\nutils.unixify = function unixify(fp, opts) {\n  if (opts && opts.unixify === false) return fp;\n\n  if (opts && opts.unixify === true || win32 || path.sep === '\\\\') {\n    return utils.normalize(fp, false);\n  }\n\n  if (opts && opts.unescape === true) {\n    return fp ? fp.toString().replace(/\\\\(\\w)/g, '$1') : '';\n  }\n\n  return fp;\n};\n/**\n * Escape/unescape utils\n */\n\n\nutils.escapePath = function escapePath(fp) {\n  return fp.replace(/[\\\\.]/g, '\\\\$&');\n};\n\nutils.unescapeGlob = function unescapeGlob(fp) {\n  return fp.replace(/[\\\\\"']/g, '');\n};\n\nutils.escapeRe = function escapeRe(str) {\n  return str.replace(/[-[\\\\$*+?.#^\\s{}(|)\\]]/g, '\\\\$&');\n};\n/**\n * Expose `utils`\n */\n\n\nmodule.exports = utils;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/rijs.resdir/node_modules/micromatch/lib/utils.js"],"names":["win32","process","platform","path","require","fileRe","utils","module","exports","diff","unique","braces","brackets","extglob","isExtglob","isGlob","typeOf","normalize","omit","parseGlob","cache","filename","fp","seg","match","isPath","pattern","opts","unixified","unixify","nocase","toLowerCase","hasPath","indexOf","matchPath","fn","contains","hasFilename","re","name","test","arrayify","val","Array","isArray","sep","unescape","toString","replace","escapePath","unescapeGlob","escapeRe","str"],"mappings":"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","sourcesContent":["'use strict';\n\nvar win32 = process && process.platform === 'win32';\nvar path = require('path');\nvar fileRe = require('filename-regex');\nvar utils = module.exports;\n\n/**\n * Module dependencies\n */\n\nutils.diff = require('arr-diff');\nutils.unique = require('array-unique');\nutils.braces = require('braces');\nutils.brackets = require('expand-brackets');\nutils.extglob = require('extglob');\nutils.isExtglob = require('is-extglob');\nutils.isGlob = require('is-glob');\nutils.typeOf = require('kind-of');\nutils.normalize = require('normalize-path');\nutils.omit = require('object.omit');\nutils.parseGlob = require('parse-glob');\nutils.cache = require('regex-cache');\n\n/**\n * Get the filename of a filepath\n *\n * @param {String} `string`\n * @return {String}\n */\n\nutils.filename = function filename(fp) {\n  var seg = fp.match(fileRe());\n  return seg && seg[0];\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern is the same as a given `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.isPath = function isPath(pattern, opts) {\n  opts = opts || {};\n  return function(fp) {\n    var unixified = utils.unixify(fp, opts);\n    if(opts.nocase){\n      return pattern.toLowerCase() === unixified.toLowerCase();\n    }\n    return pattern === unixified;\n  };\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.hasPath = function hasPath(pattern, opts) {\n  return function(fp) {\n    return utils.unixify(pattern, opts).indexOf(fp) !== -1;\n  };\n};\n\n/**\n * Returns a function that returns true if the given\n * pattern matches or contains a `filepath`\n *\n * @param {String} `pattern`\n * @return {Function}\n */\n\nutils.matchPath = function matchPath(pattern, opts) {\n  var fn = (opts && opts.contains)\n    ? utils.hasPath(pattern, opts)\n    : utils.isPath(pattern, opts);\n  return fn;\n};\n\n/**\n * Returns a function that returns true if the given\n * regex matches the `filename` of a file path.\n *\n * @param {RegExp} `re`\n * @return {Boolean}\n */\n\nutils.hasFilename = function hasFilename(re) {\n  return function(fp) {\n    var name = utils.filename(fp);\n    return name && re.test(name);\n  };\n};\n\n/**\n * Coerce `val` to an array\n *\n * @param  {*} val\n * @return {Array}\n */\n\nutils.arrayify = function arrayify(val) {\n  return !Array.isArray(val)\n    ? [val]\n    : val;\n};\n\n/**\n * Normalize all slashes in a file path or glob pattern to\n * forward slashes.\n */\n\nutils.unixify = function unixify(fp, opts) {\n  if (opts && opts.unixify === false) return fp;\n  if (opts && opts.unixify === true || win32 || path.sep === '\\\\') {\n    return utils.normalize(fp, false);\n  }\n  if (opts && opts.unescape === true) {\n    return fp ? fp.toString().replace(/\\\\(\\w)/g, '$1') : '';\n  }\n  return fp;\n};\n\n/**\n * Escape/unescape utils\n */\n\nutils.escapePath = function escapePath(fp) {\n  return fp.replace(/[\\\\.]/g, '\\\\$&');\n};\n\nutils.unescapeGlob = function unescapeGlob(fp) {\n  return fp.replace(/[\\\\\"']/g, '');\n};\n\nutils.escapeRe = function escapeRe(str) {\n  return str.replace(/[-[\\\\$*+?.#^\\s{}(|)\\]]/g, '\\\\$&');\n};\n\n/**\n * Expose `utils`\n */\n\nmodule.exports = utils;\n"]},"metadata":{},"sourceType":"script"}