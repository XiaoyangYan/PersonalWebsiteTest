{"ast":null,"code":"'use strict';\n\nvar chars = require('./chars');\n\nvar utils = require('./utils');\n/**\n * Expose `Glob`\n */\n\n\nvar Glob = module.exports = function Glob(pattern, options) {\n  if (!(this instanceof Glob)) {\n    return new Glob(pattern, options);\n  }\n\n  this.options = options || {};\n  this.pattern = pattern;\n  this.history = [];\n  this.tokens = {};\n  this.init(pattern);\n};\n/**\n * Initialize defaults\n */\n\n\nGlob.prototype.init = function (pattern) {\n  this.orig = pattern;\n  this.negated = this.isNegated();\n  this.options.track = this.options.track || false;\n  this.options.makeRe = true;\n};\n/**\n * Push a change into `glob.history`. Useful\n * for debugging.\n */\n\n\nGlob.prototype.track = function (msg) {\n  if (this.options.track) {\n    this.history.push({\n      msg: msg,\n      pattern: this.pattern\n    });\n  }\n};\n/**\n * Return true if `glob.pattern` was negated\n * with `!`, also remove the `!` from the pattern.\n *\n * @return {Boolean}\n */\n\n\nGlob.prototype.isNegated = function () {\n  if (this.pattern.charCodeAt(0) === 33\n  /* '!' */\n  ) {\n      this.pattern = this.pattern.slice(1);\n      return true;\n    }\n\n  return false;\n};\n/**\n * Expand braces in the given glob pattern.\n *\n * We only need to use the [braces] lib when\n * patterns are nested.\n */\n\n\nGlob.prototype.braces = function () {\n  if (this.options.nobraces !== true && this.options.nobrace !== true) {\n    // naive/fast check for imbalanced characters\n    var a = this.pattern.match(/[\\{\\(\\[]/g);\n    var b = this.pattern.match(/[\\}\\)\\]]/g); // if imbalanced, don't optimize the pattern\n\n    if (a && b && a.length !== b.length) {\n      this.options.makeRe = false;\n    } // expand brace patterns and join the resulting array\n\n\n    var expanded = utils.braces(this.pattern, this.options);\n    this.pattern = expanded.join('|');\n  }\n};\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\n\nGlob.prototype.brackets = function () {\n  if (this.options.nobrackets !== true) {\n    this.pattern = utils.brackets(this.pattern);\n  }\n};\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\n\nGlob.prototype.extglob = function () {\n  if (this.options.noextglob === true) return;\n\n  if (utils.isExtglob(this.pattern)) {\n    this.pattern = utils.extglob(this.pattern, {\n      escape: true\n    });\n  }\n};\n/**\n * Parse the given pattern\n */\n\n\nGlob.prototype.parse = function (pattern) {\n  this.tokens = utils.parseGlob(pattern || this.pattern, true);\n  return this.tokens;\n};\n/**\n * Replace `a` with `b`. Also tracks the change before and\n * after each replacement. This is disabled by default, but\n * can be enabled by setting `options.track` to true.\n *\n * Also, when the pattern is a string, `.split()` is used,\n * because it's much faster than replace.\n *\n * @param  {RegExp|String} `a`\n * @param  {String} `b`\n * @param  {Boolean} `escape` When `true`, escapes `*` and `?` in the replacement.\n * @return {String}\n */\n\n\nGlob.prototype._replace = function (a, b, escape) {\n  this.track('before (find): \"' + a + '\" (replace with): \"' + b + '\"');\n  if (escape) b = esc(b);\n\n  if (a && b && typeof a === 'string') {\n    this.pattern = this.pattern.split(a).join(b);\n  } else {\n    this.pattern = this.pattern.replace(a, b);\n  }\n\n  this.track('after');\n};\n/**\n * Escape special characters in the given string.\n *\n * @param  {String} `str` Glob pattern\n * @return {String}\n */\n\n\nGlob.prototype.escape = function (str) {\n  this.track('before escape: ');\n  var re = /[\"\\\\](['\"]?[^\"'\\\\]['\"]?)/g;\n  this.pattern = str.replace(re, function ($0, $1) {\n    var o = chars.ESC;\n    var ch = o && o[$1];\n\n    if (ch) {\n      return ch;\n    }\n\n    if (/[a-z]/i.test($0)) {\n      return $0.split('\\\\').join('');\n    }\n\n    return $0;\n  });\n  this.track('after escape: ');\n};\n/**\n * Unescape special characters in the given string.\n *\n * @param  {String} `str`\n * @return {String}\n */\n\n\nGlob.prototype.unescape = function (str) {\n  var re = /__([A-Z]+)_([A-Z]+)__/g;\n  this.pattern = str.replace(re, function ($0, $1) {\n    return chars[$1][$0];\n  });\n  this.pattern = unesc(this.pattern);\n};\n/**\n * Escape/unescape utils\n */\n\n\nfunction esc(str) {\n  str = str.split('?').join('%~');\n  str = str.split('*').join('%%');\n  return str;\n}\n\nfunction unesc(str) {\n  str = str.split('%~').join('?');\n  str = str.split('%%').join('*');\n  return str;\n}","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/rijs.resdir/node_modules/micromatch/lib/glob.js"],"names":["chars","require","utils","Glob","module","exports","pattern","options","history","tokens","init","prototype","orig","negated","isNegated","track","makeRe","msg","push","charCodeAt","slice","braces","nobraces","nobrace","a","match","b","length","expanded","join","brackets","nobrackets","extglob","noextglob","isExtglob","escape","parse","parseGlob","_replace","esc","split","replace","str","re","$0","$1","o","ESC","ch","test","unescape","unesc"],"mappings":"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","sourcesContent":["'use strict';\n\nvar chars = require('./chars');\nvar utils = require('./utils');\n\n/**\n * Expose `Glob`\n */\n\nvar Glob = module.exports = function Glob(pattern, options) {\n  if (!(this instanceof Glob)) {\n    return new Glob(pattern, options);\n  }\n  this.options = options || {};\n  this.pattern = pattern;\n  this.history = [];\n  this.tokens = {};\n  this.init(pattern);\n};\n\n/**\n * Initialize defaults\n */\n\nGlob.prototype.init = function(pattern) {\n  this.orig = pattern;\n  this.negated = this.isNegated();\n  this.options.track = this.options.track || false;\n  this.options.makeRe = true;\n};\n\n/**\n * Push a change into `glob.history`. Useful\n * for debugging.\n */\n\nGlob.prototype.track = function(msg) {\n  if (this.options.track) {\n    this.history.push({msg: msg, pattern: this.pattern});\n  }\n};\n\n/**\n * Return true if `glob.pattern` was negated\n * with `!`, also remove the `!` from the pattern.\n *\n * @return {Boolean}\n */\n\nGlob.prototype.isNegated = function() {\n  if (this.pattern.charCodeAt(0) === 33 /* '!' */) {\n    this.pattern = this.pattern.slice(1);\n    return true;\n  }\n  return false;\n};\n\n/**\n * Expand braces in the given glob pattern.\n *\n * We only need to use the [braces] lib when\n * patterns are nested.\n */\n\nGlob.prototype.braces = function() {\n  if (this.options.nobraces !== true && this.options.nobrace !== true) {\n    // naive/fast check for imbalanced characters\n    var a = this.pattern.match(/[\\{\\(\\[]/g);\n    var b = this.pattern.match(/[\\}\\)\\]]/g);\n\n    // if imbalanced, don't optimize the pattern\n    if (a && b && (a.length !== b.length)) {\n      this.options.makeRe = false;\n    }\n\n    // expand brace patterns and join the resulting array\n    var expanded = utils.braces(this.pattern, this.options);\n    this.pattern = expanded.join('|');\n  }\n};\n\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\nGlob.prototype.brackets = function() {\n  if (this.options.nobrackets !== true) {\n    this.pattern = utils.brackets(this.pattern);\n  }\n};\n\n/**\n * Expand bracket expressions in `glob.pattern`\n */\n\nGlob.prototype.extglob = function() {\n  if (this.options.noextglob === true) return;\n\n  if (utils.isExtglob(this.pattern)) {\n    this.pattern = utils.extglob(this.pattern, {escape: true});\n  }\n};\n\n/**\n * Parse the given pattern\n */\n\nGlob.prototype.parse = function(pattern) {\n  this.tokens = utils.parseGlob(pattern || this.pattern, true);\n  return this.tokens;\n};\n\n/**\n * Replace `a` with `b`. Also tracks the change before and\n * after each replacement. This is disabled by default, but\n * can be enabled by setting `options.track` to true.\n *\n * Also, when the pattern is a string, `.split()` is used,\n * because it's much faster than replace.\n *\n * @param  {RegExp|String} `a`\n * @param  {String} `b`\n * @param  {Boolean} `escape` When `true`, escapes `*` and `?` in the replacement.\n * @return {String}\n */\n\nGlob.prototype._replace = function(a, b, escape) {\n  this.track('before (find): \"' + a + '\" (replace with): \"' + b + '\"');\n  if (escape) b = esc(b);\n  if (a && b && typeof a === 'string') {\n    this.pattern = this.pattern.split(a).join(b);\n  } else {\n    this.pattern = this.pattern.replace(a, b);\n  }\n  this.track('after');\n};\n\n/**\n * Escape special characters in the given string.\n *\n * @param  {String} `str` Glob pattern\n * @return {String}\n */\n\nGlob.prototype.escape = function(str) {\n  this.track('before escape: ');\n  var re = /[\"\\\\](['\"]?[^\"'\\\\]['\"]?)/g;\n\n  this.pattern = str.replace(re, function($0, $1) {\n    var o = chars.ESC;\n    var ch = o && o[$1];\n    if (ch) {\n      return ch;\n    }\n    if (/[a-z]/i.test($0)) {\n      return $0.split('\\\\').join('');\n    }\n    return $0;\n  });\n\n  this.track('after escape: ');\n};\n\n/**\n * Unescape special characters in the given string.\n *\n * @param  {String} `str`\n * @return {String}\n */\n\nGlob.prototype.unescape = function(str) {\n  var re = /__([A-Z]+)_([A-Z]+)__/g;\n  this.pattern = str.replace(re, function($0, $1) {\n    return chars[$1][$0];\n  });\n  this.pattern = unesc(this.pattern);\n};\n\n/**\n * Escape/unescape utils\n */\n\nfunction esc(str) {\n  str = str.split('?').join('%~');\n  str = str.split('*').join('%%');\n  return str;\n}\n\nfunction unesc(str) {\n  str = str.split('%~').join('?');\n  str = str.split('%%').join('*');\n  return str;\n}\n"]},"metadata":{},"sourceType":"script"}