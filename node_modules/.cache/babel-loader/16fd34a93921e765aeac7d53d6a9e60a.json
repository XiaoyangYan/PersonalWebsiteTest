{"ast":null,"code":"/**\r\n * JSON Format Plugin\r\n *\r\n * @module plugins/json\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\nvar inherits = require('util').inherits;\n\nvar Transform = require('readable-stream').Transform;\n\nvar crc32 = require('buffer-crc32');\n\nvar util = require('archiver-utils');\n/**\r\n * @constructor\r\n * @param {(JsonOptions|TransformOptions)} options\r\n */\n\n\nvar Json = function (options) {\n  if (!(this instanceof Json)) {\n    return new Json(options);\n  }\n\n  options = this.options = util.defaults(options, {});\n  Transform.call(this, options);\n  this.supports = {\n    directory: true,\n    symlink: true\n  };\n  this.files = [];\n};\n\ninherits(Json, Transform);\n/**\r\n * [_transform description]\r\n *\r\n * @private\r\n * @param  {Buffer}   chunk\r\n * @param  {String}   encoding\r\n * @param  {Function} callback\r\n * @return void\r\n */\n\nJson.prototype._transform = function (chunk, encoding, callback) {\n  callback(null, chunk);\n};\n/**\r\n * [_writeStringified description]\r\n *\r\n * @private\r\n * @return void\r\n */\n\n\nJson.prototype._writeStringified = function () {\n  var fileString = JSON.stringify(this.files);\n  this.write(fileString);\n};\n/**\r\n * [append description]\r\n *\r\n * @param  {(Buffer|Stream)}   source\r\n * @param  {EntryData}   data\r\n * @param  {Function} callback\r\n * @return void\r\n */\n\n\nJson.prototype.append = function (source, data, callback) {\n  var self = this;\n  data.crc32 = 0;\n\n  function onend(err, sourceBuffer) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    data.size = sourceBuffer.length || 0;\n    data.crc32 = crc32.unsigned(sourceBuffer);\n    self.files.push(data);\n    callback(null, data);\n  }\n\n  if (data.sourceType === 'buffer') {\n    onend(null, source);\n  } else if (data.sourceType === 'stream') {\n    util.collectStream(source, onend);\n  }\n};\n/**\r\n * [finalize description]\r\n *\r\n * @return void\r\n */\n\n\nJson.prototype.finalize = function () {\n  this._writeStringified();\n\n  this.end();\n};\n\nmodule.exports = Json;\n/**\r\n * @typedef {Object} JsonOptions\r\n * @global\r\n */","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/archiver/lib/plugins/json.js"],"names":["inherits","require","Transform","crc32","util","Json","options","defaults","call","supports","directory","symlink","files","prototype","_transform","chunk","encoding","callback","_writeStringified","fileString","JSON","stringify","write","append","source","data","self","onend","err","sourceBuffer","size","length","unsigned","push","sourceType","collectStream","finalize","end","module","exports"],"mappings":"AAAA;;;;;;;AAOA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,MAAD,CAAP,CAAgBD,QAA/B;;AACA,IAAIE,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAP,CAA2BC,SAA3C;;AAEA,IAAIC,KAAK,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,gBAAD,CAAlB;AAEA;;;;;;AAIA,IAAII,IAAI,GAAG,UAASC,OAAT,EAAkB;AAC3B,MAAI,EAAE,gBAAgBD,IAAlB,CAAJ,EAA6B;AAC3B,WAAO,IAAIA,IAAJ,CAASC,OAAT,CAAP;AACD;;AAEDA,EAAAA,OAAO,GAAG,KAAKA,OAAL,GAAeF,IAAI,CAACG,QAAL,CAAcD,OAAd,EAAuB,EAAvB,CAAzB;AAEAJ,EAAAA,SAAS,CAACM,IAAV,CAAe,IAAf,EAAqBF,OAArB;AAEA,OAAKG,QAAL,GAAgB;AACdC,IAAAA,SAAS,EAAE,IADG;AAEdC,IAAAA,OAAO,EAAE;AAFK,GAAhB;AAKA,OAAKC,KAAL,GAAa,EAAb;AACD,CAfD;;AAiBAZ,QAAQ,CAACK,IAAD,EAAOH,SAAP,CAAR;AAEA;;;;;;;;;;AASAG,IAAI,CAACQ,SAAL,CAAeC,UAAf,GAA4B,UAASC,KAAT,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AAC9DA,EAAAA,QAAQ,CAAC,IAAD,EAAOF,KAAP,CAAR;AACD,CAFD;AAIA;;;;;;;;AAMAV,IAAI,CAACQ,SAAL,CAAeK,iBAAf,GAAmC,YAAW;AAC5C,MAAIC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAe,KAAKT,KAApB,CAAjB;AACA,OAAKU,KAAL,CAAWH,UAAX;AACD,CAHD;AAKA;;;;;;;;;;AAQAd,IAAI,CAACQ,SAAL,CAAeU,MAAf,GAAwB,UAASC,MAAT,EAAiBC,IAAjB,EAAuBR,QAAvB,EAAiC;AACvD,MAAIS,IAAI,GAAG,IAAX;AAEAD,EAAAA,IAAI,CAACtB,KAAL,GAAa,CAAb;;AAEA,WAASwB,KAAT,CAAeC,GAAf,EAAoBC,YAApB,EAAkC;AAChC,QAAID,GAAJ,EAAS;AACPX,MAAAA,QAAQ,CAACW,GAAD,CAAR;AACA;AACD;;AAEDH,IAAAA,IAAI,CAACK,IAAL,GAAYD,YAAY,CAACE,MAAb,IAAuB,CAAnC;AACAN,IAAAA,IAAI,CAACtB,KAAL,GAAaA,KAAK,CAAC6B,QAAN,CAAeH,YAAf,CAAb;AAEAH,IAAAA,IAAI,CAACd,KAAL,CAAWqB,IAAX,CAAgBR,IAAhB;AAEAR,IAAAA,QAAQ,CAAC,IAAD,EAAOQ,IAAP,CAAR;AACD;;AAED,MAAIA,IAAI,CAACS,UAAL,KAAoB,QAAxB,EAAkC;AAChCP,IAAAA,KAAK,CAAC,IAAD,EAAOH,MAAP,CAAL;AACD,GAFD,MAEO,IAAIC,IAAI,CAACS,UAAL,KAAoB,QAAxB,EAAkC;AACvC9B,IAAAA,IAAI,CAAC+B,aAAL,CAAmBX,MAAnB,EAA2BG,KAA3B;AACD;AACF,CAxBD;AA0BA;;;;;;;AAKAtB,IAAI,CAACQ,SAAL,CAAeuB,QAAf,GAA0B,YAAW;AACnC,OAAKlB,iBAAL;;AACA,OAAKmB,GAAL;AACD,CAHD;;AAKAC,MAAM,CAACC,OAAP,GAAiBlC,IAAjB;AAEA","sourcesContent":["/**\r\n * JSON Format Plugin\r\n *\r\n * @module plugins/json\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\r\nvar inherits = require('util').inherits;\r\nvar Transform = require('readable-stream').Transform;\r\n\r\nvar crc32 = require('buffer-crc32');\r\nvar util = require('archiver-utils');\r\n\r\n/**\r\n * @constructor\r\n * @param {(JsonOptions|TransformOptions)} options\r\n */\r\nvar Json = function(options) {\r\n  if (!(this instanceof Json)) {\r\n    return new Json(options);\r\n  }\r\n\r\n  options = this.options = util.defaults(options, {});\r\n\r\n  Transform.call(this, options);\r\n\r\n  this.supports = {\r\n    directory: true,\r\n    symlink: true\r\n  };\r\n\r\n  this.files = [];\r\n};\r\n\r\ninherits(Json, Transform);\r\n\r\n/**\r\n * [_transform description]\r\n *\r\n * @private\r\n * @param  {Buffer}   chunk\r\n * @param  {String}   encoding\r\n * @param  {Function} callback\r\n * @return void\r\n */\r\nJson.prototype._transform = function(chunk, encoding, callback) {\r\n  callback(null, chunk);\r\n};\r\n\r\n/**\r\n * [_writeStringified description]\r\n *\r\n * @private\r\n * @return void\r\n */\r\nJson.prototype._writeStringified = function() {\r\n  var fileString = JSON.stringify(this.files);\r\n  this.write(fileString);\r\n};\r\n\r\n/**\r\n * [append description]\r\n *\r\n * @param  {(Buffer|Stream)}   source\r\n * @param  {EntryData}   data\r\n * @param  {Function} callback\r\n * @return void\r\n */\r\nJson.prototype.append = function(source, data, callback) {\r\n  var self = this;\r\n\r\n  data.crc32 = 0;\r\n\r\n  function onend(err, sourceBuffer) {\r\n    if (err) {\r\n      callback(err);\r\n      return;\r\n    }\r\n\r\n    data.size = sourceBuffer.length || 0;\r\n    data.crc32 = crc32.unsigned(sourceBuffer);\r\n\r\n    self.files.push(data);\r\n\r\n    callback(null, data);\r\n  }\r\n\r\n  if (data.sourceType === 'buffer') {\r\n    onend(null, source);\r\n  } else if (data.sourceType === 'stream') {\r\n    util.collectStream(source, onend);\r\n  }\r\n};\r\n\r\n/**\r\n * [finalize description]\r\n *\r\n * @return void\r\n */\r\nJson.prototype.finalize = function() {\r\n  this._writeStringified();\r\n  this.end();\r\n};\r\n\r\nmodule.exports = Json;\r\n\r\n/**\r\n * @typedef {Object} JsonOptions\r\n * @global\r\n */\r\n"]},"metadata":{},"sourceType":"script"}