{"ast":null,"code":"/**\n * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/** Used for native method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Creates a cache object to store key/value pairs.\n *\n * @private\n * @static\n * @name Cache\n * @memberOf _.memoize\n */\n\nfunction MapCache() {\n  this.__data__ = {};\n}\n/**\n * Removes `key` and its value from the cache.\n *\n * @private\n * @name delete\n * @memberOf _.memoize.Cache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.\n */\n\n\nfunction mapDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n/**\n * Gets the cached value for `key`.\n *\n * @private\n * @name get\n * @memberOf _.memoize.Cache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the cached value.\n */\n\n\nfunction mapGet(key) {\n  return key == '__proto__' ? undefined : this.__data__[key];\n}\n/**\n * Checks if a cached value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf _.memoize.Cache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\n\nfunction mapHas(key) {\n  return key != '__proto__' && hasOwnProperty.call(this.__data__, key);\n}\n/**\n * Sets `value` to `key` of the cache.\n *\n * @private\n * @name set\n * @memberOf _.memoize.Cache\n * @param {string} key The key of the value to cache.\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache object.\n */\n\n\nfunction mapSet(key, value) {\n  if (key != '__proto__') {\n    this.__data__[key] = value;\n  }\n\n  return this;\n}\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is coerced to a string and used as the\n * cache key. The `func` is invoked with the `this` binding of the memoized\n * function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the [`Map`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)\n * method interface of `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoizing function.\n * @example\n *\n * var upperCase = _.memoize(function(string) {\n *   return string.toUpperCase();\n * });\n *\n * upperCase('fred');\n * // => 'FRED'\n *\n * // modifying the result cache\n * upperCase.cache.set('fred', 'BARNEY');\n * upperCase('fred');\n * // => 'BARNEY'\n *\n * // replacing `_.memoize.Cache`\n * var object = { 'user': 'fred' };\n * var other = { 'user': 'barney' };\n * var identity = _.memoize(_.identity);\n *\n * identity(object);\n * // => { 'user': 'fred' }\n * identity(other);\n * // => { 'user': 'fred' }\n *\n * _.memoize.Cache = WeakMap;\n * var identity = _.memoize(_.identity);\n *\n * identity(object);\n * // => { 'user': 'fred' }\n * identity(other);\n * // => { 'user': 'barney' }\n */\n\n\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || resolver && typeof resolver != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  var memoized = function () {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n\n  memoized.cache = new memoize.Cache();\n  return memoized;\n} // Add functions to the `Map` cache.\n\n\nMapCache.prototype['delete'] = mapDelete;\nMapCache.prototype.get = mapGet;\nMapCache.prototype.has = mapHas;\nMapCache.prototype.set = mapSet; // Assign cache to `_.memoize`.\n\nmemoize.Cache = MapCache;\nmodule.exports = memoize;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/combine-source-map/node_modules/lodash.memoize/index.js"],"names":["FUNC_ERROR_TEXT","objectProto","Object","prototype","hasOwnProperty","MapCache","__data__","mapDelete","key","has","mapGet","undefined","mapHas","call","mapSet","value","memoize","func","resolver","TypeError","memoized","args","arguments","apply","cache","get","result","set","Cache","module","exports"],"mappings":"AAAA;;;;;;;;;AASA;AACA,IAAIA,eAAe,GAAG,qBAAtB;AAEA;;AACA,IAAIC,WAAW,GAAGC,MAAM,CAACC,SAAzB;AAEA;;AACA,IAAIC,cAAc,GAAGH,WAAW,CAACG,cAAjC;AAEA;;;;;;;;;AAQA,SAASC,QAAT,GAAoB;AAClB,OAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;;;;;;;;;;;AASA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,SAAO,KAAKC,GAAL,CAASD,GAAT,KAAiB,OAAO,KAAKF,QAAL,CAAcE,GAAd,CAA/B;AACD;AAED;;;;;;;;;;;AASA,SAASE,MAAT,CAAgBF,GAAhB,EAAqB;AACnB,SAAOA,GAAG,IAAI,WAAP,GAAqBG,SAArB,GAAiC,KAAKL,QAAL,CAAcE,GAAd,CAAxC;AACD;AAED;;;;;;;;;;;AASA,SAASI,MAAT,CAAgBJ,GAAhB,EAAqB;AACnB,SAAOA,GAAG,IAAI,WAAP,IAAsBJ,cAAc,CAACS,IAAf,CAAoB,KAAKP,QAAzB,EAAmCE,GAAnC,CAA7B;AACD;AAED;;;;;;;;;;;;AAUA,SAASM,MAAT,CAAgBN,GAAhB,EAAqBO,KAArB,EAA4B;AAC1B,MAAIP,GAAG,IAAI,WAAX,EAAwB;AACtB,SAAKF,QAAL,CAAcE,GAAd,IAAqBO,KAArB;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;AAC/B,MAAI,OAAOD,IAAP,IAAe,UAAf,IAA8BC,QAAQ,IAAI,OAAOA,QAAP,IAAmB,UAAjE,EAA8E;AAC5E,UAAM,IAAIC,SAAJ,CAAcnB,eAAd,CAAN;AACD;;AACD,MAAIoB,QAAQ,GAAG,YAAW;AACxB,QAAIC,IAAI,GAAGC,SAAX;AAAA,QACId,GAAG,GAAGU,QAAQ,GAAGA,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBF,IAArB,CAAH,GAAgCA,IAAI,CAAC,CAAD,CADtD;AAAA,QAEIG,KAAK,GAAGJ,QAAQ,CAACI,KAFrB;;AAIA,QAAIA,KAAK,CAACf,GAAN,CAAUD,GAAV,CAAJ,EAAoB;AAClB,aAAOgB,KAAK,CAACC,GAAN,CAAUjB,GAAV,CAAP;AACD;;AACD,QAAIkB,MAAM,GAAGT,IAAI,CAACM,KAAL,CAAW,IAAX,EAAiBF,IAAjB,CAAb;AACAD,IAAAA,QAAQ,CAACI,KAAT,GAAiBA,KAAK,CAACG,GAAN,CAAUnB,GAAV,EAAekB,MAAf,CAAjB;AACA,WAAOA,MAAP;AACD,GAXD;;AAYAN,EAAAA,QAAQ,CAACI,KAAT,GAAiB,IAAIR,OAAO,CAACY,KAAZ,EAAjB;AACA,SAAOR,QAAP;AACD,C,CAED;;;AACAf,QAAQ,CAACF,SAAT,CAAmB,QAAnB,IAA+BI,SAA/B;AACAF,QAAQ,CAACF,SAAT,CAAmBsB,GAAnB,GAAyBf,MAAzB;AACAL,QAAQ,CAACF,SAAT,CAAmBM,GAAnB,GAAyBG,MAAzB;AACAP,QAAQ,CAACF,SAAT,CAAmBwB,GAAnB,GAAyBb,MAAzB,C,CAEA;;AACAE,OAAO,CAACY,KAAR,GAAgBvB,QAAhB;AAEAwB,MAAM,CAACC,OAAP,GAAiBd,OAAjB","sourcesContent":["/**\n * lodash 3.0.4 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates a cache object to store key/value pairs.\n *\n * @private\n * @static\n * @name Cache\n * @memberOf _.memoize\n */\nfunction MapCache() {\n  this.__data__ = {};\n}\n\n/**\n * Removes `key` and its value from the cache.\n *\n * @private\n * @name delete\n * @memberOf _.memoize.Cache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.\n */\nfunction mapDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the cached value for `key`.\n *\n * @private\n * @name get\n * @memberOf _.memoize.Cache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the cached value.\n */\nfunction mapGet(key) {\n  return key == '__proto__' ? undefined : this.__data__[key];\n}\n\n/**\n * Checks if a cached value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf _.memoize.Cache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapHas(key) {\n  return key != '__proto__' && hasOwnProperty.call(this.__data__, key);\n}\n\n/**\n * Sets `value` to `key` of the cache.\n *\n * @private\n * @name set\n * @memberOf _.memoize.Cache\n * @param {string} key The key of the value to cache.\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache object.\n */\nfunction mapSet(key, value) {\n  if (key != '__proto__') {\n    this.__data__[key] = value;\n  }\n  return this;\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is coerced to a string and used as the\n * cache key. The `func` is invoked with the `this` binding of the memoized\n * function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the [`Map`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)\n * method interface of `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoizing function.\n * @example\n *\n * var upperCase = _.memoize(function(string) {\n *   return string.toUpperCase();\n * });\n *\n * upperCase('fred');\n * // => 'FRED'\n *\n * // modifying the result cache\n * upperCase.cache.set('fred', 'BARNEY');\n * upperCase('fred');\n * // => 'BARNEY'\n *\n * // replacing `_.memoize.Cache`\n * var object = { 'user': 'fred' };\n * var other = { 'user': 'barney' };\n * var identity = _.memoize(_.identity);\n *\n * identity(object);\n * // => { 'user': 'fred' }\n * identity(other);\n * // => { 'user': 'fred' }\n *\n * _.memoize.Cache = WeakMap;\n * var identity = _.memoize(_.identity);\n *\n * identity(object);\n * // => { 'user': 'fred' }\n * identity(other);\n * // => { 'user': 'barney' }\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new memoize.Cache;\n  return memoized;\n}\n\n// Add functions to the `Map` cache.\nMapCache.prototype['delete'] = mapDelete;\nMapCache.prototype.get = mapGet;\nMapCache.prototype.has = mapHas;\nMapCache.prototype.set = mapSet;\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n"]},"metadata":{},"sourceType":"script"}