{"ast":null,"code":"/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\nvar inherits = require('util').inherits;\n\nvar normalizePath = require('normalize-path');\n\nvar ArchiveEntry = require('../archive-entry');\n\nvar GeneralPurposeBit = require('./general-purpose-bit');\n\nvar UnixStat = require('./unix-stat');\n\nvar constants = require('./constants');\n\nvar zipUtil = require('./util');\n\nvar ZipArchiveEntry = module.exports = function (name) {\n  if (!(this instanceof ZipArchiveEntry)) {\n    return new ZipArchiveEntry(name);\n  }\n\n  ArchiveEntry.call(this);\n  this.platform = constants.PLATFORM_FAT;\n  this.method = -1;\n  this.name = null;\n  this.size = 0;\n  this.csize = 0;\n  this.gpb = new GeneralPurposeBit();\n  this.crc = 0;\n  this.time = -1;\n  this.minver = constants.MIN_VERSION_INITIAL;\n  this.mode = -1;\n  this.extra = null;\n  this.exattr = 0;\n  this.inattr = 0;\n  this.comment = null;\n\n  if (name) {\n    this.setName(name);\n  }\n};\n\ninherits(ZipArchiveEntry, ArchiveEntry);\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\n\nZipArchiveEntry.prototype.getCentralDirectoryExtra = function () {\n  return this.getExtra();\n};\n/**\r\n * Returns the comment set for the entry.\r\n *\r\n * @returns {string}\r\n */\n\n\nZipArchiveEntry.prototype.getComment = function () {\n  return this.comment !== null ? this.comment : '';\n};\n/**\r\n * Returns the compressed size of the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getCompressedSize = function () {\n  return this.csize;\n};\n/**\r\n * Returns the CRC32 digest for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getCrc = function () {\n  return this.crc;\n};\n/**\r\n * Returns the external file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getExternalAttributes = function () {\n  return this.exattr;\n};\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\n\n\nZipArchiveEntry.prototype.getExtra = function () {\n  return this.extra !== null ? this.extra : constants.EMPTY;\n};\n/**\r\n * Returns the general purpose bits related to the entry.\r\n *\r\n * @returns {GeneralPurposeBit}\r\n */\n\n\nZipArchiveEntry.prototype.getGeneralPurposeBit = function () {\n  return this.gpb;\n};\n/**\r\n * Returns the internal file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getInternalAttributes = function () {\n  return this.inattr;\n};\n/**\r\n * Returns the last modified date of the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getLastModifiedDate = function () {\n  return this.getTime();\n};\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\n\n\nZipArchiveEntry.prototype.getLocalFileDataExtra = function () {\n  return this.getExtra();\n};\n/**\r\n * Returns the compression method used on the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getMethod = function () {\n  return this.method;\n};\n/**\r\n * Returns the filename of the entry.\r\n *\r\n * @returns {string}\r\n */\n\n\nZipArchiveEntry.prototype.getName = function () {\n  return this.name;\n};\n/**\r\n * Returns the platform on which the entry was made.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getPlatform = function () {\n  return this.platform;\n};\n/**\r\n * Returns the size of the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getSize = function () {\n  return this.size;\n};\n/**\r\n * Returns a date object representing the last modified date of the entry.\r\n *\r\n * @returns {number|Date}\r\n */\n\n\nZipArchiveEntry.prototype.getTime = function () {\n  return this.time !== -1 ? zipUtil.dosToDate(this.time) : -1;\n};\n/**\r\n * Returns the DOS timestamp for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getTimeDos = function () {\n  return this.time !== -1 ? this.time : 0;\n};\n/**\r\n * Returns the UNIX file permissions for the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getUnixMode = function () {\n  return this.platform !== constants.PLATFORM_UNIX ? 0 : this.getExternalAttributes() >> constants.SHORT_SHIFT & constants.SHORT_MASK;\n};\n/**\r\n * Returns the version of ZIP needed to extract the entry.\r\n *\r\n * @returns {number}\r\n */\n\n\nZipArchiveEntry.prototype.getVersionNeededToExtract = function () {\n  return this.minver;\n};\n/**\r\n * Sets the comment of the entry.\r\n *\r\n * @param comment\r\n */\n\n\nZipArchiveEntry.prototype.setComment = function (comment) {\n  if (Buffer.byteLength(comment) !== comment.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n\n  this.comment = comment;\n};\n/**\r\n * Sets the compressed size of the entry.\r\n *\r\n * @param size\r\n */\n\n\nZipArchiveEntry.prototype.setCompressedSize = function (size) {\n  if (size < 0) {\n    throw new Error('invalid entry compressed size');\n  }\n\n  this.csize = size;\n};\n/**\r\n * Sets the checksum of the entry.\r\n *\r\n * @param crc\r\n */\n\n\nZipArchiveEntry.prototype.setCrc = function (crc) {\n  if (crc < 0) {\n    throw new Error('invalid entry crc32');\n  }\n\n  this.crc = crc;\n};\n/**\r\n * Sets the external file attributes of the entry.\r\n *\r\n * @param attr\r\n */\n\n\nZipArchiveEntry.prototype.setExternalAttributes = function (attr) {\n  this.exattr = attr >>> 0;\n};\n/**\r\n * Sets the extra fields related to the entry.\r\n *\r\n * @param extra\r\n */\n\n\nZipArchiveEntry.prototype.setExtra = function (extra) {\n  this.extra = extra;\n};\n/**\r\n * Sets the general purpose bits related to the entry.\r\n *\r\n * @param gpb\r\n */\n\n\nZipArchiveEntry.prototype.setGeneralPurposeBit = function (gpb) {\n  if (!(gpb instanceof GeneralPurposeBit)) {\n    throw new Error('invalid entry GeneralPurposeBit');\n  }\n\n  this.gpb = gpb;\n};\n/**\r\n * Sets the internal file attributes of the entry.\r\n *\r\n * @param attr\r\n */\n\n\nZipArchiveEntry.prototype.setInternalAttributes = function (attr) {\n  this.inattr = attr;\n};\n/**\r\n * Sets the compression method of the entry.\r\n *\r\n * @param method\r\n */\n\n\nZipArchiveEntry.prototype.setMethod = function (method) {\n  if (method < 0) {\n    throw new Error('invalid entry compression method');\n  }\n\n  this.method = method;\n};\n/**\r\n * Sets the name of the entry.\r\n *\r\n * @param name\r\n */\n\n\nZipArchiveEntry.prototype.setName = function (name) {\n  name = normalizePath(name, false).replace(/^\\w+:/, '').replace(/^(\\.\\.\\/|\\/)+/, '');\n\n  if (Buffer.byteLength(name) !== name.length) {\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\n  }\n\n  this.name = name;\n};\n/**\r\n * Sets the platform on which the entry was made.\r\n *\r\n * @param platform\r\n */\n\n\nZipArchiveEntry.prototype.setPlatform = function (platform) {\n  this.platform = platform;\n};\n/**\r\n * Sets the size of the entry.\r\n *\r\n * @param size\r\n */\n\n\nZipArchiveEntry.prototype.setSize = function (size) {\n  if (size < 0) {\n    throw new Error('invalid entry size');\n  }\n\n  this.size = size;\n};\n/**\r\n * Sets the time of the entry.\r\n *\r\n * @param time\r\n * @param forceLocalTime\r\n */\n\n\nZipArchiveEntry.prototype.setTime = function (time, forceLocalTime) {\n  if (!(time instanceof Date)) {\n    throw new Error('invalid entry time');\n  }\n\n  this.time = zipUtil.dateToDos(time, forceLocalTime);\n};\n/**\r\n * Sets the UNIX file permissions for the entry.\r\n *\r\n * @param mode\r\n */\n\n\nZipArchiveEntry.prototype.setUnixMode = function (mode) {\n  mode |= this.isDirectory() ? constants.S_IFDIR : constants.S_IFREG;\n  var extattr = 0;\n  extattr |= mode << constants.SHORT_SHIFT | (this.isDirectory() ? constants.S_DOS_D : constants.S_DOS_A);\n  this.setExternalAttributes(extattr);\n  this.mode = mode & constants.MODE_MASK;\n  this.platform = constants.PLATFORM_UNIX;\n};\n/**\r\n * Sets the version of ZIP needed to extract this entry.\r\n *\r\n * @param minver\r\n */\n\n\nZipArchiveEntry.prototype.setVersionNeededToExtract = function (minver) {\n  this.minver = minver;\n};\n/**\r\n * Returns true if this entry represents a directory.\r\n *\r\n * @returns {boolean}\r\n */\n\n\nZipArchiveEntry.prototype.isDirectory = function () {\n  return this.getName().slice(-1) === '/';\n};\n/**\r\n * Returns true if this entry represents a unix symlink,\r\n * in which case the entry's content contains the target path\r\n * for the symlink.\r\n *\r\n * @returns {boolean}\r\n */\n\n\nZipArchiveEntry.prototype.isUnixSymlink = function () {\n  return (this.getUnixMode() & UnixStat.FILE_TYPE_FLAG) === UnixStat.LINK_FLAG;\n};\n/**\r\n * Returns true if this entry is using the ZIP64 extension of ZIP.\r\n *\r\n * @returns {boolean}\r\n */\n\n\nZipArchiveEntry.prototype.isZip64 = function () {\n  return this.csize > constants.ZIP64_MAGIC || this.size > constants.ZIP64_MAGIC;\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/compress-commons/lib/archivers/zip/zip-archive-entry.js"],"names":["inherits","require","normalizePath","ArchiveEntry","GeneralPurposeBit","UnixStat","constants","zipUtil","ZipArchiveEntry","module","exports","name","call","platform","PLATFORM_FAT","method","size","csize","gpb","crc","time","minver","MIN_VERSION_INITIAL","mode","extra","exattr","inattr","comment","setName","prototype","getCentralDirectoryExtra","getExtra","getComment","getCompressedSize","getCrc","getExternalAttributes","EMPTY","getGeneralPurposeBit","getInternalAttributes","getLastModifiedDate","getTime","getLocalFileDataExtra","getMethod","getName","getPlatform","getSize","dosToDate","getTimeDos","getUnixMode","PLATFORM_UNIX","SHORT_SHIFT","SHORT_MASK","getVersionNeededToExtract","setComment","Buffer","byteLength","length","useUTF8ForNames","setCompressedSize","Error","setCrc","setExternalAttributes","attr","setExtra","setGeneralPurposeBit","setInternalAttributes","setMethod","replace","setPlatform","setSize","setTime","forceLocalTime","Date","dateToDos","setUnixMode","isDirectory","S_IFDIR","S_IFREG","extattr","S_DOS_D","S_DOS_A","MODE_MASK","setVersionNeededToExtract","slice","isUnixSymlink","FILE_TYPE_FLAG","LINK_FLAG","isZip64","ZIP64_MAGIC"],"mappings":"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","sourcesContent":["/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\r\nvar inherits = require('util').inherits;\r\nvar normalizePath = require('normalize-path');\r\n\r\nvar ArchiveEntry = require('../archive-entry');\r\nvar GeneralPurposeBit = require('./general-purpose-bit');\r\nvar UnixStat = require('./unix-stat');\r\n\r\nvar constants = require('./constants');\r\nvar zipUtil = require('./util');\r\n\r\nvar ZipArchiveEntry = module.exports = function(name) {\r\n  if (!(this instanceof ZipArchiveEntry)) {\r\n    return new ZipArchiveEntry(name);\r\n  }\r\n\r\n  ArchiveEntry.call(this);\r\n\r\n  this.platform = constants.PLATFORM_FAT;\r\n  this.method = -1;\r\n\r\n  this.name = null;\r\n  this.size = 0;\r\n  this.csize = 0;\r\n  this.gpb = new GeneralPurposeBit();\r\n  this.crc = 0;\r\n  this.time = -1;\r\n\r\n  this.minver = constants.MIN_VERSION_INITIAL;\r\n  this.mode = -1;\r\n  this.extra = null;\r\n  this.exattr = 0;\r\n  this.inattr = 0;\r\n  this.comment = null;\r\n\r\n  if (name) {\r\n    this.setName(name);\r\n  }\r\n};\r\n\r\ninherits(ZipArchiveEntry, ArchiveEntry);\r\n\r\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\r\nZipArchiveEntry.prototype.getCentralDirectoryExtra = function() {\r\n  return this.getExtra();\r\n};\r\n\r\n/**\r\n * Returns the comment set for the entry.\r\n *\r\n * @returns {string}\r\n */\r\nZipArchiveEntry.prototype.getComment = function() {\r\n  return this.comment !== null ? this.comment : '';\r\n};\r\n\r\n/**\r\n * Returns the compressed size of the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getCompressedSize = function() {\r\n  return this.csize;\r\n};\r\n\r\n/**\r\n * Returns the CRC32 digest for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getCrc = function() {\r\n  return this.crc;\r\n};\r\n\r\n/**\r\n * Returns the external file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getExternalAttributes = function() {\r\n  return this.exattr;\r\n};\r\n\r\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\r\nZipArchiveEntry.prototype.getExtra = function() {\r\n  return this.extra !== null ? this.extra : constants.EMPTY;\r\n};\r\n\r\n/**\r\n * Returns the general purpose bits related to the entry.\r\n *\r\n * @returns {GeneralPurposeBit}\r\n */\r\nZipArchiveEntry.prototype.getGeneralPurposeBit = function() {\r\n  return this.gpb;\r\n};\r\n\r\n/**\r\n * Returns the internal file attributes for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getInternalAttributes = function() {\r\n  return this.inattr;\r\n};\r\n\r\n/**\r\n * Returns the last modified date of the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getLastModifiedDate = function() {\r\n  return this.getTime();\r\n};\r\n\r\n/**\r\n * Returns the extra fields related to the entry.\r\n *\r\n * @returns {Buffer}\r\n */\r\nZipArchiveEntry.prototype.getLocalFileDataExtra = function() {\r\n  return this.getExtra();\r\n};\r\n\r\n/**\r\n * Returns the compression method used on the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getMethod = function() {\r\n  return this.method;\r\n};\r\n\r\n/**\r\n * Returns the filename of the entry.\r\n *\r\n * @returns {string}\r\n */\r\nZipArchiveEntry.prototype.getName = function() {\r\n  return this.name;\r\n};\r\n\r\n/**\r\n * Returns the platform on which the entry was made.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getPlatform = function() {\r\n  return this.platform;\r\n};\r\n\r\n/**\r\n * Returns the size of the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getSize = function() {\r\n  return this.size;\r\n};\r\n\r\n/**\r\n * Returns a date object representing the last modified date of the entry.\r\n *\r\n * @returns {number|Date}\r\n */\r\nZipArchiveEntry.prototype.getTime = function() {\r\n  return this.time !== -1 ? zipUtil.dosToDate(this.time) : -1;\r\n};\r\n\r\n/**\r\n * Returns the DOS timestamp for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getTimeDos = function() {\r\n  return this.time !== -1 ? this.time : 0;\r\n};\r\n\r\n/**\r\n * Returns the UNIX file permissions for the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getUnixMode = function() {\r\n  return this.platform !== constants.PLATFORM_UNIX ? 0 : ((this.getExternalAttributes() >> constants.SHORT_SHIFT) & constants.SHORT_MASK);\r\n};\r\n\r\n/**\r\n * Returns the version of ZIP needed to extract the entry.\r\n *\r\n * @returns {number}\r\n */\r\nZipArchiveEntry.prototype.getVersionNeededToExtract = function() {\r\n  return this.minver;\r\n};\r\n\r\n/**\r\n * Sets the comment of the entry.\r\n *\r\n * @param comment\r\n */\r\nZipArchiveEntry.prototype.setComment = function(comment) {\r\n  if (Buffer.byteLength(comment) !== comment.length) {\r\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\r\n  }\r\n\r\n  this.comment = comment;\r\n};\r\n\r\n/**\r\n * Sets the compressed size of the entry.\r\n *\r\n * @param size\r\n */\r\nZipArchiveEntry.prototype.setCompressedSize = function(size) {\r\n  if (size < 0) {\r\n    throw new Error('invalid entry compressed size');\r\n  }\r\n\r\n  this.csize = size;\r\n};\r\n\r\n/**\r\n * Sets the checksum of the entry.\r\n *\r\n * @param crc\r\n */\r\nZipArchiveEntry.prototype.setCrc = function(crc) {\r\n  if (crc < 0) {\r\n    throw new Error('invalid entry crc32');\r\n  }\r\n\r\n  this.crc = crc;\r\n};\r\n\r\n/**\r\n * Sets the external file attributes of the entry.\r\n *\r\n * @param attr\r\n */\r\nZipArchiveEntry.prototype.setExternalAttributes = function(attr) {\r\n  this.exattr = attr >>> 0;\r\n};\r\n\r\n/**\r\n * Sets the extra fields related to the entry.\r\n *\r\n * @param extra\r\n */\r\nZipArchiveEntry.prototype.setExtra = function(extra) {\r\n  this.extra = extra;\r\n};\r\n\r\n/**\r\n * Sets the general purpose bits related to the entry.\r\n *\r\n * @param gpb\r\n */\r\nZipArchiveEntry.prototype.setGeneralPurposeBit = function(gpb) {\r\n  if (!(gpb instanceof GeneralPurposeBit)) {\r\n    throw new Error('invalid entry GeneralPurposeBit');\r\n  }\r\n\r\n  this.gpb = gpb;\r\n};\r\n\r\n/**\r\n * Sets the internal file attributes of the entry.\r\n *\r\n * @param attr\r\n */\r\nZipArchiveEntry.prototype.setInternalAttributes = function(attr) {\r\n  this.inattr = attr;\r\n};\r\n\r\n/**\r\n * Sets the compression method of the entry.\r\n *\r\n * @param method\r\n */\r\nZipArchiveEntry.prototype.setMethod = function(method) {\r\n  if (method < 0) {\r\n    throw new Error('invalid entry compression method');\r\n  }\r\n\r\n  this.method = method;\r\n};\r\n\r\n/**\r\n * Sets the name of the entry.\r\n *\r\n * @param name\r\n */\r\nZipArchiveEntry.prototype.setName = function(name) {\r\n  name = normalizePath(name, false).replace(/^\\w+:/, '').replace(/^(\\.\\.\\/|\\/)+/, '');\r\n\r\n  if (Buffer.byteLength(name) !== name.length) {\r\n    this.getGeneralPurposeBit().useUTF8ForNames(true);\r\n  }\r\n\r\n  this.name = name;\r\n};\r\n\r\n/**\r\n * Sets the platform on which the entry was made.\r\n *\r\n * @param platform\r\n */\r\nZipArchiveEntry.prototype.setPlatform = function(platform) {\r\n  this.platform = platform;\r\n};\r\n\r\n/**\r\n * Sets the size of the entry.\r\n *\r\n * @param size\r\n */\r\nZipArchiveEntry.prototype.setSize = function(size) {\r\n  if (size < 0) {\r\n    throw new Error('invalid entry size');\r\n  }\r\n\r\n  this.size = size;\r\n};\r\n\r\n/**\r\n * Sets the time of the entry.\r\n *\r\n * @param time\r\n * @param forceLocalTime\r\n */\r\nZipArchiveEntry.prototype.setTime = function(time, forceLocalTime) {\r\n  if (!(time instanceof Date)) {\r\n    throw new Error('invalid entry time');\r\n  }\r\n\r\n  this.time = zipUtil.dateToDos(time, forceLocalTime);\r\n};\r\n\r\n/**\r\n * Sets the UNIX file permissions for the entry.\r\n *\r\n * @param mode\r\n */\r\nZipArchiveEntry.prototype.setUnixMode = function(mode) {\r\n  mode |= this.isDirectory() ? constants.S_IFDIR : constants.S_IFREG;\r\n\r\n  var extattr = 0;\r\n  extattr |= (mode << constants.SHORT_SHIFT) | (this.isDirectory() ? constants.S_DOS_D : constants.S_DOS_A);\r\n\r\n  this.setExternalAttributes(extattr);\r\n  this.mode = mode & constants.MODE_MASK;\r\n  this.platform = constants.PLATFORM_UNIX;\r\n};\r\n\r\n/**\r\n * Sets the version of ZIP needed to extract this entry.\r\n *\r\n * @param minver\r\n */\r\nZipArchiveEntry.prototype.setVersionNeededToExtract = function(minver) {\r\n  this.minver = minver;\r\n};\r\n\r\n/**\r\n * Returns true if this entry represents a directory.\r\n *\r\n * @returns {boolean}\r\n */\r\nZipArchiveEntry.prototype.isDirectory = function() {\r\n  return this.getName().slice(-1) === '/';\r\n};\r\n\r\n/**\r\n * Returns true if this entry represents a unix symlink,\r\n * in which case the entry's content contains the target path\r\n * for the symlink.\r\n *\r\n * @returns {boolean}\r\n */\r\nZipArchiveEntry.prototype.isUnixSymlink = function() {\r\n  return (this.getUnixMode() & UnixStat.FILE_TYPE_FLAG) === UnixStat.LINK_FLAG;\r\n};\r\n\r\n/**\r\n * Returns true if this entry is using the ZIP64 extension of ZIP.\r\n *\r\n * @returns {boolean}\r\n */\r\nZipArchiveEntry.prototype.isZip64 = function() {\r\n  return this.csize > constants.ZIP64_MAGIC || this.size > constants.ZIP64_MAGIC;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}