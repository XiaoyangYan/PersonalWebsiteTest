{"ast":null,"code":"// inspired by https://github.com/raszi/node-tmp, but only\n// provides tmp paths.\nvar fs = require('fs'),\n    path = require('path'),\n    os = require('os'),\n    utils = require('./utils');\n\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\nfunction _parseArguments() {\n  var fargs = utils.varargs(arguments);\n  var callback = fargs.callback;\n  var options = fargs.all[0];\n  return [options, callback];\n}\n/**\n * Gets the temp directory.\n *\n * @return {String}\n * @api private\n */\n\n\nfunction _getTMPDir() {\n  var tmpNames = ['TMPDIR', 'TMP', 'TEMP'];\n\n  for (var i = 0, length = tmpNames.length; i < length; i++) {\n    if (_isUndefined(process.env[tmpNames[i]])) {\n      continue;\n    }\n\n    return process.env[tmpNames[i]];\n  } // fallback to the default\n\n\n  return '/tmp';\n}\n\nvar exists = fs.exists || path.exists,\n    tmpDir = os.tmpdir || os.tmpDir || _getTMPDir,\n    _TMP = tmpDir(),\n    randomChars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\",\n    randomCharsLength = randomChars.length;\n/**\n * Gets a temporary file name.\n *\n * @param {Object} opts\n * @param {Function} cb\n * @api private\n */\n\n\nfunction _getTmpName(options, callback) {\n  var args = _parseArguments(options, callback),\n      opts = args[0],\n      cb = args[1],\n      template = opts.template,\n      templateDefined = !_isUndefined(template),\n      tries = opts.tries || 3;\n\n  if (isNaN(tries) || tries < 0) {\n    return cb(new Error('Invalid tries'));\n  }\n\n  if (templateDefined && !template.match(/XXXXXX/)) {\n    return cb(new Error('Invalid template provided'));\n  }\n\n  function _getName() {\n    // prefix and postfix\n    if (!templateDefined) {\n      var name = [_isUndefined(opts.prefix) ? 'tmp-' : opts.prefix, process.pid, (Math.random() * 0x1000000000).toString(36), opts.postfix].join('');\n      return path.join(opts.dir || _TMP, name);\n    } // mkstemps like template\n\n\n    var chars = [];\n\n    for (var i = 0; i < 6; i++) {\n      chars.push(randomChars.substr(Math.floor(Math.random() * randomCharsLength), 1));\n    }\n\n    return template.replace(/XXXXXX/, chars.join(''));\n  }\n\n  (function _getUniqueName() {\n    var name = _getName(); // check whether the path exists then retry if needed\n\n\n    exists(name, function _pathExists(pathExists) {\n      if (pathExists) {\n        if (tries-- > 0) {\n          return _getUniqueName();\n        }\n\n        return cb(new Error('Could not get a unique tmp filename, max tries reached'));\n      }\n\n      cb(null, name);\n    });\n  })();\n} // exporting all the needed methods\n\n\nmodule.exports.tmpdir = _TMP;\nmodule.exports.tmpName = _getTmpName;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/wd/lib/tmp.js"],"names":["fs","require","path","os","utils","_isUndefined","obj","_parseArguments","fargs","varargs","arguments","callback","options","all","_getTMPDir","tmpNames","i","length","process","env","exists","tmpDir","tmpdir","_TMP","randomChars","randomCharsLength","_getTmpName","args","opts","cb","template","templateDefined","tries","isNaN","Error","match","_getName","name","prefix","pid","Math","random","toString","postfix","join","dir","chars","push","substr","floor","replace","_getUniqueName","_pathExists","pathExists","module","exports","tmpName"],"mappings":"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","sourcesContent":["// inspired by https://github.com/raszi/node-tmp, but only\n// provides tmp paths.\n\nvar\n  fs     = require('fs'),\n  path   = require('path'),\n  os     = require('os'),\n  utils     = require('./utils');\n\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\nfunction _parseArguments() {\n  var fargs = utils.varargs(arguments);\n  var callback = fargs.callback;\n  var options = fargs.all[0];\n  return [ options, callback ];\n}\n\n/**\n * Gets the temp directory.\n *\n * @return {String}\n * @api private\n */\nfunction _getTMPDir() {\n  var tmpNames = [ 'TMPDIR', 'TMP', 'TEMP' ];\n\n  for (var i = 0, length = tmpNames.length; i < length; i++) {\n    if (_isUndefined(process.env[tmpNames[i]])) { continue; }\n\n    return process.env[tmpNames[i]];\n  }\n\n  // fallback to the default\n  return '/tmp';\n}\n\nvar\n  exists = fs.exists || path.exists,\n  tmpDir = os.tmpdir || os.tmpDir || _getTMPDir,\n  _TMP = tmpDir(),\n  randomChars = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\",\n  randomCharsLength = randomChars.length;\n\n/**\n * Gets a temporary file name.\n *\n * @param {Object} opts\n * @param {Function} cb\n * @api private\n */\nfunction _getTmpName(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1],\n    template = opts.template,\n    templateDefined = !_isUndefined(template),\n    tries = opts.tries || 3;\n\n  if (isNaN(tries) || tries < 0)\n    { return cb(new Error('Invalid tries')); }\n\n  if (templateDefined && !template.match(/XXXXXX/))\n    { return cb(new Error('Invalid template provided')); }\n\n  function _getName() {\n\n    // prefix and postfix\n    if (!templateDefined) {\n      var name = [\n        (_isUndefined(opts.prefix)) ? 'tmp-' : opts.prefix,\n        process.pid,\n        (Math.random() * 0x1000000000).toString(36),\n        opts.postfix\n      ].join('');\n\n      return path.join(opts.dir || _TMP, name);\n    }\n\n    // mkstemps like template\n    var chars = [];\n\n    for (var i = 0; i < 6; i++) {\n      chars.push(randomChars.substr(Math.floor(Math.random() * randomCharsLength), 1));\n    }\n\n    return template.replace(/XXXXXX/, chars.join(''));\n  }\n\n  (function _getUniqueName() {\n    var name = _getName();\n\n    // check whether the path exists then retry if needed\n    exists(name, function _pathExists(pathExists) {\n      if (pathExists) {\n        if (tries-- > 0) { return _getUniqueName(); }\n\n        return cb(new Error('Could not get a unique tmp filename, max tries reached'));\n      }\n\n      cb(null, name);\n    });\n  }());\n}\n\n// exporting all the needed methods\nmodule.exports.tmpdir = _TMP;\nmodule.exports.tmpName = _getTmpName;\n"]},"metadata":{},"sourceType":"script"}