{"ast":null,"code":"/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\n'use strict';\n\nconst _require = require('zlib'),\n      DeflateRaw = _require.DeflateRaw;\n\nconst _require2 = require('crc'),\n      crc32 = _require2.crc32;\n\nclass DeflateCRC32Stream extends DeflateRaw {\n  constructor(options) {\n    super(options);\n    this.checksum = Buffer.allocUnsafe(4);\n    this.checksum.writeInt32BE(0, 0);\n    this.rawSize = 0;\n    this.compressedSize = 0;\n  }\n\n  push(chunk, encoding) {\n    if (chunk) {\n      this.compressedSize += chunk.length;\n    }\n\n    return super.push(chunk, encoding);\n  }\n\n  write(chunk, enc, cb) {\n    if (chunk) {\n      this.checksum = crc32(chunk, this.checksum);\n      this.rawSize += chunk.length;\n    }\n\n    return super.write(chunk, enc, cb);\n  }\n\n  digest(encoding) {\n    const checksum = Buffer.allocUnsafe(4);\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\n    return encoding ? checksum.toString(encoding) : checksum;\n  }\n\n  hex() {\n    return this.digest('hex').toUpperCase();\n  }\n\n  size(compressed = false) {\n    if (compressed) {\n      return this.compressedSize;\n    } else {\n      return this.rawSize;\n    }\n  }\n\n}\n\nmodule.exports = DeflateCRC32Stream;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/crc32-stream/lib/deflate-crc32-stream.js"],"names":["require","DeflateRaw","crc32","DeflateCRC32Stream","constructor","options","checksum","Buffer","allocUnsafe","writeInt32BE","rawSize","compressedSize","push","chunk","encoding","length","write","enc","cb","digest","writeUInt32BE","toString","hex","toUpperCase","size","compressed","module","exports"],"mappings":"AAAA;;;;;;;AAQA;;iBAEqBA,OAAO,CAAC,MAAD,C;MAArBC,U,YAAAA,U;;kBAESD,OAAO,CAAC,KAAD,C;MAAhBE,K,aAAAA,K;;AAEP,MAAMC,kBAAN,SAAiCF,UAAjC,CAA4C;AAC1CG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AAEA,SAAKC,QAAL,GAAgBC,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAhB;AACA,SAAKF,QAAL,CAAcG,YAAd,CAA2B,CAA3B,EAA8B,CAA9B;AAEA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,cAAL,GAAsB,CAAtB;AACD;;AAEDC,EAAAA,IAAI,CAACC,KAAD,EAAQC,QAAR,EAAkB;AACpB,QAAID,KAAJ,EAAW;AACT,WAAKF,cAAL,IAAuBE,KAAK,CAACE,MAA7B;AACD;;AAED,WAAO,MAAMH,IAAN,CAAWC,KAAX,EAAkBC,QAAlB,CAAP;AACD;;AAEDE,EAAAA,KAAK,CAACH,KAAD,EAAQI,GAAR,EAAaC,EAAb,EAAiB;AACpB,QAAIL,KAAJ,EAAW;AACT,WAAKP,QAAL,GAAgBJ,KAAK,CAACW,KAAD,EAAQ,KAAKP,QAAb,CAArB;AACA,WAAKI,OAAL,IAAgBG,KAAK,CAACE,MAAtB;AACD;;AAED,WAAO,MAAMC,KAAN,CAAYH,KAAZ,EAAmBI,GAAnB,EAAwBC,EAAxB,CAAP;AACD;;AAEDC,EAAAA,MAAM,CAACL,QAAD,EAAW;AACf,UAAMR,QAAQ,GAAGC,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAjB;AACAF,IAAAA,QAAQ,CAACc,aAAT,CAAuB,KAAKd,QAAL,KAAkB,CAAzC,EAA4C,CAA5C;AACA,WAAOQ,QAAQ,GAAGR,QAAQ,CAACe,QAAT,CAAkBP,QAAlB,CAAH,GAAiCR,QAAhD;AACD;;AAEDgB,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKH,MAAL,CAAY,KAAZ,EAAmBI,WAAnB,EAAP;AACD;;AAEDC,EAAAA,IAAI,CAACC,UAAU,GAAG,KAAd,EAAqB;AACvB,QAAIA,UAAJ,EAAgB;AACd,aAAO,KAAKd,cAAZ;AACD,KAFD,MAEO;AACL,aAAO,KAAKD,OAAZ;AACD;AACF;;AA5CyC;;AA+C5CgB,MAAM,CAACC,OAAP,GAAiBxB,kBAAjB","sourcesContent":["/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\r\n\r\n'use strict';\r\n\r\nconst {DeflateRaw} = require('zlib');\r\n\r\nconst {crc32} = require('crc');\r\n\r\nclass DeflateCRC32Stream extends DeflateRaw {\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    this.checksum = Buffer.allocUnsafe(4);\r\n    this.checksum.writeInt32BE(0, 0);\r\n\r\n    this.rawSize = 0;\r\n    this.compressedSize = 0;\r\n  }\r\n\r\n  push(chunk, encoding) {\r\n    if (chunk) {\r\n      this.compressedSize += chunk.length;\r\n    }\r\n\r\n    return super.push(chunk, encoding);\r\n  }\r\n\r\n  write(chunk, enc, cb) {\r\n    if (chunk) {\r\n      this.checksum = crc32(chunk, this.checksum);\r\n      this.rawSize += chunk.length;\r\n    }\r\n\r\n    return super.write(chunk, enc, cb);\r\n  }\r\n\r\n  digest(encoding) {\r\n    const checksum = Buffer.allocUnsafe(4);\r\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\r\n    return encoding ? checksum.toString(encoding) : checksum;\r\n  }\r\n\r\n  hex() {\r\n    return this.digest('hex').toUpperCase();\r\n  }\r\n\r\n  size(compressed = false) {\r\n    if (compressed) {\r\n      return this.compressedSize;\r\n    } else {\r\n      return this.rawSize;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = DeflateCRC32Stream;\r\n"]},"metadata":{},"sourceType":"script"}