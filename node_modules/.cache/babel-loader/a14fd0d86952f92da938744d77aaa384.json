{"ast":null,"code":"/*!\n * compression\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar bytes = require('bytes');\n\nvar compressible = require('compressible');\n\nvar debug = require('debug')('compression');\n\nvar onHeaders = require('on-headers');\n\nvar vary = require('vary');\n\nvar zlib = require('zlib');\n/**\n * Module exports.\n */\n\n\nmodule.exports = compression;\nmodule.exports.filter = shouldCompress;\n/**\n * Module variables.\n * @private\n */\n\nvar cacheControlNoTransformRegExp = /(?:^|,)\\s*?no-transform\\s*?(?:,|$)/;\n/**\n * Compress response data with gzip / deflate.\n *\n * @param {Object} [options]\n * @return {Function} middleware\n * @public\n */\n\nfunction compression(options) {\n  var opts = options || {}; // options\n\n  var filter = opts.filter || shouldCompress;\n  var threshold = bytes.parse(opts.threshold);\n\n  if (threshold == null) {\n    threshold = 1024;\n  }\n\n  return function compression(req, res, next) {\n    var ended = false;\n    var length;\n    var listeners = [];\n    var stream;\n    var _end = res.end;\n    var _on = res.on;\n    var _write = res.write; // flush\n\n    res.flush = function flush() {\n      if (stream) {\n        stream.flush();\n      }\n    }; // proxy\n\n\n    res.write = function write(chunk, encoding) {\n      if (ended) {\n        return false;\n      }\n\n      if (!this._header) {\n        this._implicitHeader();\n      }\n\n      return stream ? stream.write(toBuffer(chunk, encoding)) : _write.call(this, chunk, encoding);\n    };\n\n    res.end = function end(chunk, encoding) {\n      if (ended) {\n        return false;\n      }\n\n      if (!this._header) {\n        // estimate the length\n        if (!this.getHeader('Content-Length')) {\n          length = chunkLength(chunk, encoding);\n        }\n\n        this._implicitHeader();\n      }\n\n      if (!stream) {\n        return _end.call(this, chunk, encoding);\n      } // mark ended\n\n\n      ended = true; // write Buffer for Node.js 0.8\n\n      return chunk ? stream.end(toBuffer(chunk, encoding)) : stream.end();\n    };\n\n    res.on = function on(type, listener) {\n      if (!listeners || type !== 'drain') {\n        return _on.call(this, type, listener);\n      }\n\n      if (stream) {\n        return stream.on(type, listener);\n      } // buffer listeners for future stream\n\n\n      listeners.push([type, listener]);\n      return this;\n    };\n\n    function nocompress(msg) {\n      debug('no compression: %s', msg);\n      addListeners(res, _on, listeners);\n      listeners = null;\n    }\n\n    onHeaders(res, function onResponseHeaders() {\n      // determine if request is filtered\n      if (!filter(req, res)) {\n        nocompress('filtered');\n        return;\n      } // determine if the entity should be transformed\n\n\n      if (!shouldTransform(req, res)) {\n        nocompress('no transform');\n        return;\n      } // vary\n\n\n      vary(res, 'Accept-Encoding'); // content-length below threshold\n\n      if (Number(res.getHeader('Content-Length')) < threshold || length < threshold) {\n        nocompress('size below threshold');\n        return;\n      }\n\n      var encoding = res.getHeader('Content-Encoding') || 'identity'; // already encoded\n\n      if (encoding !== 'identity') {\n        nocompress('already encoded');\n        return;\n      } // head\n\n\n      if (req.method === 'HEAD') {\n        nocompress('HEAD request');\n        return;\n      } // compression method\n\n\n      var accept = accepts(req);\n      var method = accept.encoding(['gzip', 'deflate', 'identity']); // we really don't prefer deflate\n\n      if (method === 'deflate' && accept.encoding(['gzip'])) {\n        method = accept.encoding(['gzip', 'identity']);\n      } // negotiation failed\n\n\n      if (!method || method === 'identity') {\n        nocompress('not acceptable');\n        return;\n      } // compression stream\n\n\n      debug('%s compression', method);\n      stream = method === 'gzip' ? zlib.createGzip(opts) : zlib.createDeflate(opts); // add buffered listeners to stream\n\n      addListeners(stream, stream.on, listeners); // header fields\n\n      res.setHeader('Content-Encoding', method);\n      res.removeHeader('Content-Length'); // compression\n\n      stream.on('data', function onStreamData(chunk) {\n        if (_write.call(res, chunk) === false) {\n          stream.pause();\n        }\n      });\n      stream.on('end', function onStreamEnd() {\n        _end.call(res);\n      });\n\n      _on.call(res, 'drain', function onResponseDrain() {\n        stream.resume();\n      });\n    });\n    next();\n  };\n}\n/**\n * Add bufferred listeners to stream\n * @private\n */\n\n\nfunction addListeners(stream, on, listeners) {\n  for (var i = 0; i < listeners.length; i++) {\n    on.apply(stream, listeners[i]);\n  }\n}\n/**\n * Get the length of a given chunk\n */\n\n\nfunction chunkLength(chunk, encoding) {\n  if (!chunk) {\n    return 0;\n  }\n\n  return !Buffer.isBuffer(chunk) ? Buffer.byteLength(chunk, encoding) : chunk.length;\n}\n/**\n * Default filter function.\n * @private\n */\n\n\nfunction shouldCompress(req, res) {\n  var type = res.getHeader('Content-Type');\n\n  if (type === undefined || !compressible(type)) {\n    debug('%s not compressible', type);\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determine if the entity should be transformed.\n * @private\n */\n\n\nfunction shouldTransform(req, res) {\n  var cacheControl = res.getHeader('Cache-Control'); // Don't compress for Cache-Control: no-transform\n  // https://tools.ietf.org/html/rfc7234#section-5.2.2.4\n\n  return !cacheControl || !cacheControlNoTransformRegExp.test(cacheControl);\n}\n/**\n * Coerce arguments to Buffer\n * @private\n */\n\n\nfunction toBuffer(chunk, encoding) {\n  return !Buffer.isBuffer(chunk) ? Buffer.from(chunk, encoding) : chunk;\n}","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/compression/index.js"],"names":["accepts","require","Buffer","bytes","compressible","debug","onHeaders","vary","zlib","module","exports","compression","filter","shouldCompress","cacheControlNoTransformRegExp","options","opts","threshold","parse","req","res","next","ended","length","listeners","stream","_end","end","_on","on","_write","write","flush","chunk","encoding","_header","_implicitHeader","toBuffer","call","getHeader","chunkLength","type","listener","push","nocompress","msg","addListeners","onResponseHeaders","shouldTransform","Number","method","accept","createGzip","createDeflate","setHeader","removeHeader","onStreamData","pause","onStreamEnd","onResponseDrain","resume","i","apply","isBuffer","byteLength","undefined","cacheControl","test","from"],"mappings":"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","sourcesContent":["/*!\n * compression\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts')\nvar Buffer = require('safe-buffer').Buffer\nvar bytes = require('bytes')\nvar compressible = require('compressible')\nvar debug = require('debug')('compression')\nvar onHeaders = require('on-headers')\nvar vary = require('vary')\nvar zlib = require('zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = compression\nmodule.exports.filter = shouldCompress\n\n/**\n * Module variables.\n * @private\n */\n\nvar cacheControlNoTransformRegExp = /(?:^|,)\\s*?no-transform\\s*?(?:,|$)/\n\n/**\n * Compress response data with gzip / deflate.\n *\n * @param {Object} [options]\n * @return {Function} middleware\n * @public\n */\n\nfunction compression (options) {\n  var opts = options || {}\n\n  // options\n  var filter = opts.filter || shouldCompress\n  var threshold = bytes.parse(opts.threshold)\n\n  if (threshold == null) {\n    threshold = 1024\n  }\n\n  return function compression (req, res, next) {\n    var ended = false\n    var length\n    var listeners = []\n    var stream\n\n    var _end = res.end\n    var _on = res.on\n    var _write = res.write\n\n    // flush\n    res.flush = function flush () {\n      if (stream) {\n        stream.flush()\n      }\n    }\n\n    // proxy\n\n    res.write = function write (chunk, encoding) {\n      if (ended) {\n        return false\n      }\n\n      if (!this._header) {\n        this._implicitHeader()\n      }\n\n      return stream\n        ? stream.write(toBuffer(chunk, encoding))\n        : _write.call(this, chunk, encoding)\n    }\n\n    res.end = function end (chunk, encoding) {\n      if (ended) {\n        return false\n      }\n\n      if (!this._header) {\n        // estimate the length\n        if (!this.getHeader('Content-Length')) {\n          length = chunkLength(chunk, encoding)\n        }\n\n        this._implicitHeader()\n      }\n\n      if (!stream) {\n        return _end.call(this, chunk, encoding)\n      }\n\n      // mark ended\n      ended = true\n\n      // write Buffer for Node.js 0.8\n      return chunk\n        ? stream.end(toBuffer(chunk, encoding))\n        : stream.end()\n    }\n\n    res.on = function on (type, listener) {\n      if (!listeners || type !== 'drain') {\n        return _on.call(this, type, listener)\n      }\n\n      if (stream) {\n        return stream.on(type, listener)\n      }\n\n      // buffer listeners for future stream\n      listeners.push([type, listener])\n\n      return this\n    }\n\n    function nocompress (msg) {\n      debug('no compression: %s', msg)\n      addListeners(res, _on, listeners)\n      listeners = null\n    }\n\n    onHeaders(res, function onResponseHeaders () {\n      // determine if request is filtered\n      if (!filter(req, res)) {\n        nocompress('filtered')\n        return\n      }\n\n      // determine if the entity should be transformed\n      if (!shouldTransform(req, res)) {\n        nocompress('no transform')\n        return\n      }\n\n      // vary\n      vary(res, 'Accept-Encoding')\n\n      // content-length below threshold\n      if (Number(res.getHeader('Content-Length')) < threshold || length < threshold) {\n        nocompress('size below threshold')\n        return\n      }\n\n      var encoding = res.getHeader('Content-Encoding') || 'identity'\n\n      // already encoded\n      if (encoding !== 'identity') {\n        nocompress('already encoded')\n        return\n      }\n\n      // head\n      if (req.method === 'HEAD') {\n        nocompress('HEAD request')\n        return\n      }\n\n      // compression method\n      var accept = accepts(req)\n      var method = accept.encoding(['gzip', 'deflate', 'identity'])\n\n      // we really don't prefer deflate\n      if (method === 'deflate' && accept.encoding(['gzip'])) {\n        method = accept.encoding(['gzip', 'identity'])\n      }\n\n      // negotiation failed\n      if (!method || method === 'identity') {\n        nocompress('not acceptable')\n        return\n      }\n\n      // compression stream\n      debug('%s compression', method)\n      stream = method === 'gzip'\n        ? zlib.createGzip(opts)\n        : zlib.createDeflate(opts)\n\n      // add buffered listeners to stream\n      addListeners(stream, stream.on, listeners)\n\n      // header fields\n      res.setHeader('Content-Encoding', method)\n      res.removeHeader('Content-Length')\n\n      // compression\n      stream.on('data', function onStreamData (chunk) {\n        if (_write.call(res, chunk) === false) {\n          stream.pause()\n        }\n      })\n\n      stream.on('end', function onStreamEnd () {\n        _end.call(res)\n      })\n\n      _on.call(res, 'drain', function onResponseDrain () {\n        stream.resume()\n      })\n    })\n\n    next()\n  }\n}\n\n/**\n * Add bufferred listeners to stream\n * @private\n */\n\nfunction addListeners (stream, on, listeners) {\n  for (var i = 0; i < listeners.length; i++) {\n    on.apply(stream, listeners[i])\n  }\n}\n\n/**\n * Get the length of a given chunk\n */\n\nfunction chunkLength (chunk, encoding) {\n  if (!chunk) {\n    return 0\n  }\n\n  return !Buffer.isBuffer(chunk)\n    ? Buffer.byteLength(chunk, encoding)\n    : chunk.length\n}\n\n/**\n * Default filter function.\n * @private\n */\n\nfunction shouldCompress (req, res) {\n  var type = res.getHeader('Content-Type')\n\n  if (type === undefined || !compressible(type)) {\n    debug('%s not compressible', type)\n    return false\n  }\n\n  return true\n}\n\n/**\n * Determine if the entity should be transformed.\n * @private\n */\n\nfunction shouldTransform (req, res) {\n  var cacheControl = res.getHeader('Cache-Control')\n\n  // Don't compress for Cache-Control: no-transform\n  // https://tools.ietf.org/html/rfc7234#section-5.2.2.4\n  return !cacheControl ||\n    !cacheControlNoTransformRegExp.test(cacheControl)\n}\n\n/**\n * Coerce arguments to Buffer\n * @private\n */\n\nfunction toBuffer (chunk, encoding) {\n  return !Buffer.isBuffer(chunk)\n    ? Buffer.from(chunk, encoding)\n    : chunk\n}\n"]},"metadata":{},"sourceType":"script"}