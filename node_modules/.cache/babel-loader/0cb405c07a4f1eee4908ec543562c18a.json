{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\"use strict\";\n\nmodule.exports = function (Parser) {\n  return (\n    /*@__PURE__*/\n    function (Parser) {\n      function anonymous() {\n        Parser.apply(this, arguments);\n      }\n\n      if (Parser) anonymous.__proto__ = Parser;\n      anonymous.prototype = Object.create(Parser && Parser.prototype);\n      anonymous.prototype.constructor = anonymous;\n\n      anonymous.prototype.readInt = function readInt(radix, len) {\n        // Hack: len is only != null for unicode escape sequences,\n        // where numeric separators are not allowed\n        if (len != null) {\n          return Parser.prototype.readInt.call(this, radix, len);\n        }\n\n        var start = this.pos,\n            total = 0,\n            acceptUnderscore = false;\n\n        for (;;) {\n          var code = this.input.charCodeAt(this.pos),\n              val = void 0;\n\n          if (code >= 97) {\n            val = code - 97 + 10;\n          } // a\n          else if (code == 95) {\n              if (!acceptUnderscore) {\n                this.raise(this.pos, \"Invalid numeric separator\");\n              }\n\n              ++this.pos;\n              acceptUnderscore = false;\n              continue;\n            } else if (code >= 65) {\n              val = code - 65 + 10;\n            } // A\n            else if (code >= 48 && code <= 57) {\n                val = code - 48;\n              } // 0-9\n              else {\n                  val = Infinity;\n                }\n\n          if (val >= radix) {\n            break;\n          }\n\n          ++this.pos;\n          total = total * radix + val;\n          acceptUnderscore = true;\n        }\n\n        if (this.pos === start) {\n          return null;\n        }\n\n        if (!acceptUnderscore) {\n          this.raise(this.pos - 1, \"Invalid numeric separator\");\n        }\n\n        return total;\n      };\n\n      anonymous.prototype.readNumber = function readNumber(startsWithDot) {\n        var token = Parser.prototype.readNumber.call(this, startsWithDot);\n        var octal = this.end - this.start >= 2 && this.input.charCodeAt(this.start) === 48;\n        var stripped = this.getNumberInput(this.start, this.end);\n\n        if (stripped.length < this.end - this.start) {\n          if (octal) {\n            this.raise(this.start, \"Invalid number\");\n          }\n\n          this.value = parseFloat(stripped);\n        }\n\n        return token;\n      }; // This is used by acorn-bigint\n\n\n      anonymous.prototype.getNumberInput = function getNumberInput(start, end) {\n        return this.input.slice(start, end).replace(/_/g, \"\");\n      };\n\n      return anonymous;\n    }(Parser)\n  );\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/acorn-node/lib/numeric-separator/index.js"],"names":["module","exports","Parser","anonymous","apply","arguments","__proto__","prototype","Object","create","constructor","readInt","radix","len","call","start","pos","total","acceptUnderscore","code","input","charCodeAt","val","raise","Infinity","readNumber","startsWithDot","token","octal","end","stripped","getNumberInput","length","value","parseFloat","slice","replace"],"mappings":"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","sourcesContent":["/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.readInt = function readInt (radix, len) {\n      // Hack: len is only != null for unicode escape sequences,\n      // where numeric separators are not allowed\n      if (len != null) { return Parser.prototype.readInt.call(this, radix, len) }\n\n      var start = this.pos, total = 0, acceptUnderscore = false\n      for (;;) {\n        var code = this.input.charCodeAt(this.pos), val = (void 0)\n        if (code >= 97) { val = code - 97 + 10 } // a\n        else if (code == 95) {\n          if (!acceptUnderscore) { this.raise(this.pos, \"Invalid numeric separator\") }\n          ++this.pos\n          acceptUnderscore = false\n          continue\n        } else if (code >= 65) { val = code - 65 + 10 } // A\n        else if (code >= 48 && code <= 57) { val = code - 48 } // 0-9\n        else { val = Infinity }\n        if (val >= radix) { break }\n        ++this.pos\n        total = total * radix + val\n        acceptUnderscore = true\n      }\n      if (this.pos === start) { return null }\n      if (!acceptUnderscore) { this.raise(this.pos - 1, \"Invalid numeric separator\") }\n\n      return total\n    };\n\n    anonymous.prototype.readNumber = function readNumber (startsWithDot) {\n      var token = Parser.prototype.readNumber.call(this, startsWithDot)\n      var octal = this.end - this.start >= 2 && this.input.charCodeAt(this.start) === 48\n      var stripped = this.getNumberInput(this.start, this.end)\n      if (stripped.length < this.end - this.start) {\n        if (octal) { this.raise(this.start, \"Invalid number\") }\n        this.value = parseFloat(stripped)\n      }\n      return token\n    };\n\n    // This is used by acorn-bigint\n    anonymous.prototype.getNumberInput = function getNumberInput (start, end) {\n      return this.input.slice(start, end).replace(/_/g, \"\")\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"]},"metadata":{},"sourceType":"script"}