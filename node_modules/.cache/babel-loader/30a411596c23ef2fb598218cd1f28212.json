{"ast":null,"code":"var assert = require('assert');\n\nmodule.exports = dashAst;\n/**\n * Call `cb` on each node in `ast`. If `cb` is an object, `cb.enter` is called before processing a Node's children,\n * and `cb.leave` is called after processing a Node's children.\n */\n\nfunction dashAst(ast, cb) {\n  assert(ast && typeof ast === 'object' && typeof ast.type === 'string', 'dash-ast: ast must be an AST node');\n\n  if (typeof cb === 'object') {\n    assert(typeof cb.enter === 'function' || typeof cb.leave === 'function', 'dash-ast: visitor must be an object with enter/leave functions');\n    walk(ast, null, cb.enter || undefined, cb.leave || undefined);\n  } else {\n    assert(cb && typeof cb === 'function', 'dash-ast: callback must be a function');\n    walk(ast, null, cb, undefined);\n  }\n}\n/**\n * Call `cb` on each node in `ast`. Each node will have a `.parent` property.\n */\n\n\ndashAst.withParent = function dashAstParent(ast, cb) {\n  assert(ast && typeof ast === 'object' && typeof ast.type === 'string', 'dash-ast.withParent: ast must be an AST node');\n\n  if (typeof cb === 'object') {\n    assert(typeof cb.enter === 'function' || typeof cb.leave === 'function', 'dash-ast.withParent: visitor must be an object with enter/leave functions');\n    var enter = cb.enter;\n    var leave = cb.leave;\n    walk(ast, null, function (node, parent) {\n      node.parent = parent;\n      if (enter !== undefined) return enter(node);\n    }, leave ? function (node) {\n      leave(node);\n    } : undefined);\n  } else {\n    assert(cb && typeof cb === 'function', 'dash-ast.withParent: callback must be a function');\n    walk(ast, null, function (node, parent) {\n      node.parent = parent;\n      return cb(node);\n    }, undefined);\n  }\n};\n\nfunction walk(node, parent, enter, leave) {\n  var cont = enter !== undefined ? enter(node, parent) : undefined;\n  if (cont === false) return;\n\n  for (var k in node) {\n    if (has(node, k)) {\n      if (k === 'parent') continue;\n\n      if (isNode(node[k])) {\n        walk(node[k], node, enter, leave);\n      } else if (Array.isArray(node[k])) {\n        walkArray(node[k], node, enter, leave);\n      }\n    }\n  }\n\n  if (leave !== undefined) leave(node, parent);\n}\n\nfunction walkArray(nodes, parent, enter, leave) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (isNode(nodes[i])) walk(nodes[i], parent, enter, leave);\n  }\n}\n\nfunction isNode(node) {\n  return typeof node === 'object' && node && typeof node.type === 'string';\n}\n\nfunction has(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/dash-ast/index.js"],"names":["assert","require","module","exports","dashAst","ast","cb","type","enter","leave","walk","undefined","withParent","dashAstParent","node","parent","cont","k","has","isNode","Array","isArray","walkArray","nodes","i","length","obj","prop","Object","prototype","hasOwnProperty","call"],"mappings":"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","sourcesContent":["var assert = require('assert')\n\nmodule.exports = dashAst\n\n/**\n * Call `cb` on each node in `ast`. If `cb` is an object, `cb.enter` is called before processing a Node's children,\n * and `cb.leave` is called after processing a Node's children.\n */\nfunction dashAst (ast, cb) {\n  assert(ast && typeof ast === 'object' && typeof ast.type === 'string',\n    'dash-ast: ast must be an AST node')\n\n  if (typeof cb === 'object') {\n    assert(typeof cb.enter === 'function' || typeof cb.leave === 'function',\n      'dash-ast: visitor must be an object with enter/leave functions')\n\n    walk(ast, null, cb.enter || undefined, cb.leave || undefined)\n  } else {\n    assert(cb && typeof cb === 'function',\n      'dash-ast: callback must be a function')\n\n    walk(ast, null, cb, undefined)\n  }\n}\n\n/**\n * Call `cb` on each node in `ast`. Each node will have a `.parent` property.\n */\ndashAst.withParent = function dashAstParent (ast, cb) {\n  assert(ast && typeof ast === 'object' && typeof ast.type === 'string',\n    'dash-ast.withParent: ast must be an AST node')\n\n  if (typeof cb === 'object') {\n    assert(typeof cb.enter === 'function' || typeof cb.leave === 'function',\n      'dash-ast.withParent: visitor must be an object with enter/leave functions')\n\n    var enter = cb.enter\n    var leave = cb.leave\n    walk(ast, null, function (node, parent) {\n      node.parent = parent\n      if (enter !== undefined) return enter(node)\n    }, leave ? function (node) { leave(node) } : undefined)\n  } else {\n    assert(cb && typeof cb === 'function',\n      'dash-ast.withParent: callback must be a function')\n\n    walk(ast, null, function (node, parent) {\n      node.parent = parent\n      return cb(node)\n    }, undefined)\n  }\n}\n\nfunction walk (node, parent, enter, leave) {\n  var cont = enter !== undefined ? enter(node, parent) : undefined\n  if (cont === false) return\n\n  for (var k in node) {\n    if (has(node, k)) {\n      if (k === 'parent') continue\n      if (isNode(node[k])) {\n        walk(node[k], node, enter, leave)\n      } else if (Array.isArray(node[k])) {\n        walkArray(node[k], node, enter, leave)\n      }\n    }\n  }\n\n  if (leave !== undefined) leave(node, parent)\n}\n\nfunction walkArray (nodes, parent, enter, leave) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (isNode(nodes[i])) walk(nodes[i], parent, enter, leave)\n  }\n}\n\nfunction isNode (node) {\n  return typeof node === 'object' && node && typeof node.type === 'string'\n}\n\nfunction has (obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop)\n}\n"]},"metadata":{},"sourceType":"script"}