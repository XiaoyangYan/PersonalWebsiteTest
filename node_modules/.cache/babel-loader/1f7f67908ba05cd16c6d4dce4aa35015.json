{"ast":null,"code":"/*!\n * randomatic <https://github.com/jonschlinkert/randomatic>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nvar isNumber = require('is-number');\n\nvar typeOf = require('kind-of');\n\nvar mathRandom = require('math-random');\n/**\n * Expose `randomatic`\n */\n\n\nmodule.exports = randomatic;\nmodule.exports.isCrypto = !!mathRandom.cryptographic;\n/**\n * Available mask characters\n */\n\nvar type = {\n  lower: 'abcdefghijklmnopqrstuvwxyz',\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  number: '0123456789',\n  special: '~!@#$%^&()_+-={}[];\\',.'\n};\ntype.all = type.lower + type.upper + type.number + type.special;\n/**\n * Generate random character sequences of a specified `length`,\n * based on the given `pattern`.\n *\n * @param {String} `pattern` The pattern to use for generating the random string.\n * @param {String} `length` The length of the string to generate.\n * @param {String} `options`\n * @return {String}\n * @api public\n */\n\nfunction randomatic(pattern, length, options) {\n  if (typeof pattern === 'undefined') {\n    throw new Error('randomatic expects a string or number.');\n  }\n\n  var custom = false;\n\n  if (arguments.length === 1) {\n    if (typeof pattern === 'string') {\n      length = pattern.length;\n    } else if (isNumber(pattern)) {\n      options = {};\n      length = pattern;\n      pattern = '*';\n    }\n  }\n\n  if (typeOf(length) === 'object' && length.hasOwnProperty('chars')) {\n    options = length;\n    pattern = options.chars;\n    length = pattern.length;\n    custom = true;\n  }\n\n  var opts = options || {};\n  var mask = '';\n  var res = ''; // Characters to be used\n\n  if (pattern.indexOf('?') !== -1) mask += opts.chars;\n  if (pattern.indexOf('a') !== -1) mask += type.lower;\n  if (pattern.indexOf('A') !== -1) mask += type.upper;\n  if (pattern.indexOf('0') !== -1) mask += type.number;\n  if (pattern.indexOf('!') !== -1) mask += type.special;\n  if (pattern.indexOf('*') !== -1) mask += type.all;\n  if (custom) mask += pattern; // Characters to exclude\n\n  if (opts.exclude) {\n    var exclude = typeOf(opts.exclude) === 'string' ? opts.exclude : opts.exclude.join('');\n    exclude = exclude.replace(new RegExp('[\\\\]]+', 'g'), '');\n    mask = mask.replace(new RegExp('[' + exclude + ']+', 'g'), '');\n    if (opts.exclude.indexOf(']') !== -1) mask = mask.replace(new RegExp('[\\\\]]+', 'g'), '');\n  }\n\n  while (length--) {\n    res += mask.charAt(parseInt(mathRandom() * mask.length, 10));\n  }\n\n  return res;\n}\n\n;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/randomatic/index.js"],"names":["isNumber","require","typeOf","mathRandom","module","exports","randomatic","isCrypto","cryptographic","type","lower","upper","number","special","all","pattern","length","options","Error","custom","arguments","hasOwnProperty","chars","opts","mask","res","indexOf","exclude","join","replace","RegExp","charAt","parseInt"],"mappings":"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","sourcesContent":["/*!\n * randomatic <https://github.com/jonschlinkert/randomatic>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar isNumber = require('is-number');\nvar typeOf = require('kind-of');\nvar mathRandom = require('math-random');\n\n/**\n * Expose `randomatic`\n */\n\nmodule.exports = randomatic;\nmodule.exports.isCrypto = !!mathRandom.cryptographic;\n\n/**\n * Available mask characters\n */\n\nvar type = {\n  lower: 'abcdefghijklmnopqrstuvwxyz',\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  number: '0123456789',\n  special: '~!@#$%^&()_+-={}[];\\',.'\n};\n\ntype.all = type.lower + type.upper + type.number + type.special;\n\n/**\n * Generate random character sequences of a specified `length`,\n * based on the given `pattern`.\n *\n * @param {String} `pattern` The pattern to use for generating the random string.\n * @param {String} `length` The length of the string to generate.\n * @param {String} `options`\n * @return {String}\n * @api public\n */\n\nfunction randomatic(pattern, length, options) {\n  if (typeof pattern === 'undefined') {\n    throw new Error('randomatic expects a string or number.');\n  }\n\n  var custom = false;\n  if (arguments.length === 1) {\n    if (typeof pattern === 'string') {\n      length = pattern.length;\n\n    } else if (isNumber(pattern)) {\n      options = {};\n      length = pattern;\n      pattern = '*';\n    }\n  }\n\n  if (typeOf(length) === 'object' && length.hasOwnProperty('chars')) {\n    options = length;\n    pattern = options.chars;\n    length = pattern.length;\n    custom = true;\n  }\n\n  var opts = options || {};\n  var mask = '';\n  var res = '';\n\n  // Characters to be used\n  if (pattern.indexOf('?') !== -1) mask += opts.chars;\n  if (pattern.indexOf('a') !== -1) mask += type.lower;\n  if (pattern.indexOf('A') !== -1) mask += type.upper;\n  if (pattern.indexOf('0') !== -1) mask += type.number;\n  if (pattern.indexOf('!') !== -1) mask += type.special;\n  if (pattern.indexOf('*') !== -1) mask += type.all;\n  if (custom) mask += pattern;\n\n  // Characters to exclude\n  if (opts.exclude) {\n    var exclude = typeOf(opts.exclude) === 'string' ? opts.exclude : opts.exclude.join('');\n    exclude = exclude.replace(new RegExp('[\\\\]]+', 'g'), '');\n    mask = mask.replace(new RegExp('[' + exclude + ']+', 'g'), '');\n    \n    if(opts.exclude.indexOf(']') !== -1) mask = mask.replace(new RegExp('[\\\\]]+', 'g'), '');\n  }\n\n  while (length--) {\n    res += mask.charAt(parseInt(mathRandom() * mask.length, 10));\n  }\n  return res;\n};\n"]},"metadata":{},"sourceType":"script"}