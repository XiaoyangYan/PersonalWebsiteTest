{"ast":null,"code":"'use strict';\n\nvar path = require('path');\n\nvar convert = require('convert-source-map');\n\nvar memoize = require('lodash.memoize');\n\nvar createGenerator = require('inline-source-map');\n\nvar pathIsAbsolute = require('./lib/path-is-absolute');\n\nvar mappingsFromMap = require('./lib/mappings-from-map');\n\nvar protocolRx = /^[a-z]+:\\/\\//;\n/**\n * Rebases a relative path in 'sourceFile' to be relative\n * to the path where 'sourceFile' is located.\n *\n * This is necessary before adding relative paths to the\n * new combined map to ensure all paths are relative to their\n * original source.\n *\n * The 'sourceRoot' from the original source map is joined\n * as well to ensure the complete path.\n *\n * Resulting paths that are absolute are passed along directly.\n *\n * @param sourceFile {String} path to the original source file that references a map\n * @param relativeRoot {String} sourceRoot in sourceFile's map to combine with relativePath\n * @param relativePath {String} source path from sourceFile's map\n */\n\nvar rebaseRelativePath = memoize(function (sourceFile, relativeRoot, relativePath) {\n  if (!relativePath) {\n    return relativePath;\n  } // join relative path to root (e.g. 'src/' + 'file.js')\n\n\n  var relativeRootedPath = relativeRoot ? path.join(relativeRoot, relativePath) : relativePath;\n  relativeRootedPath = relativeRootedPath.replace(/\\\\/g, '/');\n  sourceFile = sourceFile.replace(/\\\\/g, '/');\n\n  if (sourceFile === relativeRootedPath || // same path,\n  pathIsAbsolute(relativeRootedPath) || // absolute path, nor\n  protocolRx.test(relativeRootedPath)) {\n    // absolute protocol need rebasing\n    return relativeRootedPath;\n  } // make relative to source file\n\n\n  return path.join(path.dirname(sourceFile), relativeRootedPath).replace(/\\\\/g, '/');\n}, function (a, b, c) {\n  return a + '::' + b + '::' + c;\n});\n\nfunction resolveMap(source) {\n  var gen = convert.fromSource(source);\n  return gen ? gen.toObject() : null;\n}\n\nfunction hasInlinedSource(existingMap) {\n  return existingMap.sourcesContent && !!existingMap.sourcesContent[0];\n}\n\nfunction Combiner(file, sourceRoot) {\n  // since we include the original code in the map sourceRoot actually not needed\n  this.generator = createGenerator({\n    file: file || 'generated.js',\n    sourceRoot: sourceRoot\n  });\n}\n\nCombiner.prototype._addGeneratedMap = function (sourceFile, source, offset) {\n  this.generator.addGeneratedMappings(sourceFile, source, offset);\n  this.generator.addSourceContent(sourceFile, source);\n  return this;\n};\n\nCombiner.prototype._addExistingMap = function (sourceFile, source, existingMap, offset) {\n  var mappings = mappingsFromMap(existingMap); // add all of the sources from the map\n\n  for (var i = 0, len = existingMap.sources.length; i < len; i++) {\n    if (!existingMap.sourcesContent) continue;\n    this.generator.addSourceContent(rebaseRelativePath(sourceFile, existingMap.sourceRoot, existingMap.sources[i]), existingMap.sourcesContent[i]);\n  } // add the mappings, preserving the original mapping 'source'\n\n\n  mappings.forEach(function (mapping) {\n    // Add the mappings one at a time because 'inline-source-map' doesn't handle\n    // mapping source filenames. The mapping.source already takes sourceRoot into account\n    // per the SMConsumer.eachMapping function, so pass null for the root here.\n    this.generator.addMappings(rebaseRelativePath(sourceFile, null, mapping.source), [mapping], offset);\n  }, this);\n  return this;\n};\n/**\n * Adds map to underlying source map.\n * If source contains a source map comment that has the source of the original file inlined it will offset these\n * mappings and include them.\n * If no source map comment is found or it has no source inlined, mappings for the file will be generated and included\n *\n * @name addMap\n * @function\n * @param opts {Object} { sourceFile: {String}, source: {String} }\n * @param offset {Object} { line: {Number}, column: {Number} }\n */\n\n\nCombiner.prototype.addFile = function (opts, offset) {\n  offset = offset || {};\n  if (!offset.hasOwnProperty('line')) offset.line = 0;\n  if (!offset.hasOwnProperty('column')) offset.column = 0;\n  var existingMap = resolveMap(opts.source);\n  return existingMap && hasInlinedSource(existingMap) ? this._addExistingMap(opts.sourceFile, opts.source, existingMap, offset) : this._addGeneratedMap(opts.sourceFile, opts.source, offset);\n};\n/**\n* @name base64\n* @function\n* @return {String} base64 encoded combined source map\n*/\n\n\nCombiner.prototype.base64 = function () {\n  return this.generator.base64Encode();\n};\n/**\n * @name comment\n * @function\n * @return {String} base64 encoded sourceMappingUrl comment of the combined source map\n */\n\n\nCombiner.prototype.comment = function () {\n  return this.generator.inlineMappingUrl();\n};\n/**\n * @name create\n * @function\n * @param file {String} optional name of the generated file\n * @param sourceRoot {String} optional sourceRoot of the map to be generated\n * @return {Object} Combiner instance to which source maps can be added and later combined\n */\n\n\nexports.create = function (file, sourceRoot) {\n  return new Combiner(file, sourceRoot);\n};\n/**\n * @name removeComments\n * @function\n * @param src\n * @return {String} src with all sourceMappingUrl comments removed\n */\n\n\nexports.removeComments = function (src) {\n  if (!src.replace) return src;\n  return src.replace(convert.commentRegex, '').replace(convert.mapFileCommentRegex, '');\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/combine-source-map/index.js"],"names":["path","require","convert","memoize","createGenerator","pathIsAbsolute","mappingsFromMap","protocolRx","rebaseRelativePath","sourceFile","relativeRoot","relativePath","relativeRootedPath","join","replace","test","dirname","a","b","c","resolveMap","source","gen","fromSource","toObject","hasInlinedSource","existingMap","sourcesContent","Combiner","file","sourceRoot","generator","prototype","_addGeneratedMap","offset","addGeneratedMappings","addSourceContent","_addExistingMap","mappings","i","len","sources","length","forEach","mapping","addMappings","addFile","opts","hasOwnProperty","line","column","base64","base64Encode","comment","inlineMappingUrl","exports","create","removeComments","src","commentRegex","mapFileCommentRegex"],"mappings":"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","sourcesContent":["'use strict';\n\nvar path            =  require('path');\nvar convert         =  require('convert-source-map');\nvar memoize         =  require('lodash.memoize');\nvar createGenerator =  require('inline-source-map');\nvar pathIsAbsolute  =  require('./lib/path-is-absolute');\nvar mappingsFromMap =  require('./lib/mappings-from-map');\n\nvar protocolRx = /^[a-z]+:\\/\\//;\n\n/**\n * Rebases a relative path in 'sourceFile' to be relative\n * to the path where 'sourceFile' is located.\n *\n * This is necessary before adding relative paths to the\n * new combined map to ensure all paths are relative to their\n * original source.\n *\n * The 'sourceRoot' from the original source map is joined\n * as well to ensure the complete path.\n *\n * Resulting paths that are absolute are passed along directly.\n *\n * @param sourceFile {String} path to the original source file that references a map\n * @param relativeRoot {String} sourceRoot in sourceFile's map to combine with relativePath\n * @param relativePath {String} source path from sourceFile's map\n */\nvar rebaseRelativePath = memoize(function(sourceFile, relativeRoot, relativePath) {\n  if (!relativePath) {\n    return relativePath;\n  }\n\n  // join relative path to root (e.g. 'src/' + 'file.js')\n  var relativeRootedPath = relativeRoot ? path.join(relativeRoot, relativePath) : relativePath;\n  relativeRootedPath = relativeRootedPath.replace(/\\\\/g, '/');\n  sourceFile = sourceFile.replace(/\\\\/g, '/');\n\n  if (sourceFile === relativeRootedPath ||    // same path,\n      pathIsAbsolute(relativeRootedPath) ||   // absolute path, nor\n      protocolRx.test(relativeRootedPath)) {  // absolute protocol need rebasing\n    return relativeRootedPath;\n  }\n\n  // make relative to source file\n  return path.join(path.dirname(sourceFile), relativeRootedPath).replace(/\\\\/g, '/');\n}, function(a, b, c) {\n  return a + '::' + b + '::' + c;\n});\n\nfunction resolveMap(source) {\n  var gen = convert.fromSource(source);\n  return gen ? gen.toObject() : null;\n}\n\nfunction hasInlinedSource(existingMap) {\n  return existingMap.sourcesContent && !!existingMap.sourcesContent[0];\n}\n\nfunction Combiner(file, sourceRoot) {\n  // since we include the original code in the map sourceRoot actually not needed\n  this.generator = createGenerator({ file: file || 'generated.js', sourceRoot: sourceRoot });\n}\n\nCombiner.prototype._addGeneratedMap = function (sourceFile, source, offset) {\n  this.generator.addGeneratedMappings(sourceFile, source, offset);\n  this.generator.addSourceContent(sourceFile, source);\n  return this;\n};\n\nCombiner.prototype._addExistingMap = function (sourceFile, source, existingMap, offset) {\n  var mappings = mappingsFromMap(existingMap);\n\n  // add all of the sources from the map\n  for (var i = 0, len = existingMap.sources.length; i < len; i++) {\n    if (!existingMap.sourcesContent) continue;\n\n    this.generator.addSourceContent(\n      rebaseRelativePath(sourceFile, existingMap.sourceRoot, existingMap.sources[i]),\n      existingMap.sourcesContent[i]);\n  }\n\n  // add the mappings, preserving the original mapping 'source'\n  mappings.forEach(function(mapping) {\n    // Add the mappings one at a time because 'inline-source-map' doesn't handle\n    // mapping source filenames. The mapping.source already takes sourceRoot into account\n    // per the SMConsumer.eachMapping function, so pass null for the root here.\n    this.generator.addMappings(\n      rebaseRelativePath(sourceFile, null, mapping.source), [mapping], offset);\n  }, this);\n\n  return this;\n};\n\n/**\n * Adds map to underlying source map.\n * If source contains a source map comment that has the source of the original file inlined it will offset these\n * mappings and include them.\n * If no source map comment is found or it has no source inlined, mappings for the file will be generated and included\n *\n * @name addMap\n * @function\n * @param opts {Object} { sourceFile: {String}, source: {String} }\n * @param offset {Object} { line: {Number}, column: {Number} }\n */\nCombiner.prototype.addFile = function (opts, offset) {\n\n  offset = offset || {};\n  if (!offset.hasOwnProperty('line'))  offset.line    =  0;\n  if (!offset.hasOwnProperty('column')) offset.column =  0;\n\n  var existingMap = resolveMap(opts.source);\n\n  return existingMap && hasInlinedSource(existingMap)\n    ? this._addExistingMap(opts.sourceFile, opts.source, existingMap, offset)\n    : this._addGeneratedMap(opts.sourceFile, opts.source, offset);\n};\n\n/**\n* @name base64\n* @function\n* @return {String} base64 encoded combined source map\n*/\nCombiner.prototype.base64 = function () {\n  return this.generator.base64Encode();\n};\n\n/**\n * @name comment\n * @function\n * @return {String} base64 encoded sourceMappingUrl comment of the combined source map\n */\nCombiner.prototype.comment = function () {\n  return this.generator.inlineMappingUrl();\n};\n\n/**\n * @name create\n * @function\n * @param file {String} optional name of the generated file\n * @param sourceRoot {String} optional sourceRoot of the map to be generated\n * @return {Object} Combiner instance to which source maps can be added and later combined\n */\nexports.create = function (file, sourceRoot) { return new Combiner(file, sourceRoot); };\n\n/**\n * @name removeComments\n * @function\n * @param src\n * @return {String} src with all sourceMappingUrl comments removed\n */\nexports.removeComments = function (src) {\n  if (!src.replace) return src;\n  return src.replace(convert.commentRegex, '').replace(convert.mapFileCommentRegex, '');\n};\n"]},"metadata":{},"sourceType":"script"}