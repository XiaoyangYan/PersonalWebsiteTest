{"ast":null,"code":"/*!\n * regex-cache <https://github.com/jonschlinkert/regex-cache>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n'use strict';\n\nvar equal = require('is-equal-shallow');\n\nvar basic = {};\nvar cache = {};\n/**\n * Expose `regexCache`\n */\n\nmodule.exports = regexCache;\n/**\n * Memoize the results of a call to the new RegExp constructor.\n *\n * @param  {Function} fn [description]\n * @param  {String} str [description]\n * @param  {Options} options [description]\n * @param  {Boolean} nocompare [description]\n * @return {RegExp}\n */\n\nfunction regexCache(fn, str, opts) {\n  var key = '_default_',\n      regex,\n      cached;\n\n  if (!str && !opts) {\n    if (typeof fn !== 'function') {\n      return fn;\n    }\n\n    return basic[key] || (basic[key] = fn(str));\n  }\n\n  var isString = typeof str === 'string';\n\n  if (isString) {\n    if (!opts) {\n      return basic[str] || (basic[str] = fn(str));\n    }\n\n    key = str;\n  } else {\n    opts = str;\n  }\n\n  cached = cache[key];\n\n  if (cached && equal(cached.opts, opts)) {\n    return cached.regex;\n  }\n\n  memo(key, opts, regex = fn(str, opts));\n  return regex;\n}\n\nfunction memo(key, opts, regex) {\n  cache[key] = {\n    regex: regex,\n    opts: opts\n  };\n}\n/**\n * Expose `cache`\n */\n\n\nmodule.exports.cache = cache;\nmodule.exports.basic = basic;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/regex-cache/index.js"],"names":["equal","require","basic","cache","module","exports","regexCache","fn","str","opts","key","regex","cached","isString","memo"],"mappings":"AAAA;;;;;;AAOA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAAnB;;AACA,IAAIC,KAAK,GAAG,EAAZ;AACA,IAAIC,KAAK,GAAG,EAAZ;AAEA;;;;AAIAC,MAAM,CAACC,OAAP,GAAiBC,UAAjB;AAEA;;;;;;;;;;AAUA,SAASA,UAAT,CAAoBC,EAApB,EAAwBC,GAAxB,EAA6BC,IAA7B,EAAmC;AACjC,MAAIC,GAAG,GAAG,WAAV;AAAA,MAAuBC,KAAvB;AAAA,MAA8BC,MAA9B;;AAEA,MAAI,CAACJ,GAAD,IAAQ,CAACC,IAAb,EAAmB;AACjB,QAAI,OAAOF,EAAP,KAAc,UAAlB,EAA8B;AAC5B,aAAOA,EAAP;AACD;;AACD,WAAOL,KAAK,CAACQ,GAAD,CAAL,KAAeR,KAAK,CAACQ,GAAD,CAAL,GAAaH,EAAE,CAACC,GAAD,CAA9B,CAAP;AACD;;AAED,MAAIK,QAAQ,GAAG,OAAOL,GAAP,KAAe,QAA9B;;AACA,MAAIK,QAAJ,EAAc;AACZ,QAAI,CAACJ,IAAL,EAAW;AACT,aAAOP,KAAK,CAACM,GAAD,CAAL,KAAeN,KAAK,CAACM,GAAD,CAAL,GAAaD,EAAE,CAACC,GAAD,CAA9B,CAAP;AACD;;AACDE,IAAAA,GAAG,GAAGF,GAAN;AACD,GALD,MAKO;AACLC,IAAAA,IAAI,GAAGD,GAAP;AACD;;AAEDI,EAAAA,MAAM,GAAGT,KAAK,CAACO,GAAD,CAAd;;AACA,MAAIE,MAAM,IAAIZ,KAAK,CAACY,MAAM,CAACH,IAAR,EAAcA,IAAd,CAAnB,EAAwC;AACtC,WAAOG,MAAM,CAACD,KAAd;AACD;;AAEDG,EAAAA,IAAI,CAACJ,GAAD,EAAMD,IAAN,EAAaE,KAAK,GAAGJ,EAAE,CAACC,GAAD,EAAMC,IAAN,CAAvB,CAAJ;AACA,SAAOE,KAAP;AACD;;AAED,SAASG,IAAT,CAAcJ,GAAd,EAAmBD,IAAnB,EAAyBE,KAAzB,EAAgC;AAC9BR,EAAAA,KAAK,CAACO,GAAD,CAAL,GAAa;AAACC,IAAAA,KAAK,EAAEA,KAAR;AAAeF,IAAAA,IAAI,EAAEA;AAArB,GAAb;AACD;AAED;;;;;AAIAL,MAAM,CAACC,OAAP,CAAeF,KAAf,GAAuBA,KAAvB;AACAC,MAAM,CAACC,OAAP,CAAeH,KAAf,GAAuBA,KAAvB","sourcesContent":["/*!\n * regex-cache <https://github.com/jonschlinkert/regex-cache>\n *\n * Copyright (c) 2015-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\n'use strict';\n\nvar equal = require('is-equal-shallow');\nvar basic = {};\nvar cache = {};\n\n/**\n * Expose `regexCache`\n */\n\nmodule.exports = regexCache;\n\n/**\n * Memoize the results of a call to the new RegExp constructor.\n *\n * @param  {Function} fn [description]\n * @param  {String} str [description]\n * @param  {Options} options [description]\n * @param  {Boolean} nocompare [description]\n * @return {RegExp}\n */\n\nfunction regexCache(fn, str, opts) {\n  var key = '_default_', regex, cached;\n\n  if (!str && !opts) {\n    if (typeof fn !== 'function') {\n      return fn;\n    }\n    return basic[key] || (basic[key] = fn(str));\n  }\n\n  var isString = typeof str === 'string';\n  if (isString) {\n    if (!opts) {\n      return basic[str] || (basic[str] = fn(str));\n    }\n    key = str;\n  } else {\n    opts = str;\n  }\n\n  cached = cache[key];\n  if (cached && equal(cached.opts, opts)) {\n    return cached.regex;\n  }\n\n  memo(key, opts, (regex = fn(str, opts)));\n  return regex;\n}\n\nfunction memo(key, opts, regex) {\n  cache[key] = {regex: regex, opts: opts};\n}\n\n/**\n * Expose `cache`\n */\n\nmodule.exports.cache = cache;\nmodule.exports.basic = basic;\n"]},"metadata":{},"sourceType":"script"}