{"ast":null,"code":"/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\nvar inherits = require('util').inherits;\n\nvar crc32 = require('buffer-crc32');\n\nvar _require = require('crc32-stream'),\n    CRC32Stream = _require.CRC32Stream;\n\nvar _require2 = require('crc32-stream'),\n    DeflateCRC32Stream = _require2.DeflateCRC32Stream;\n\nvar ArchiveOutputStream = require('../archive-output-stream');\n\nvar ZipArchiveEntry = require('./zip-archive-entry');\n\nvar GeneralPurposeBit = require('./general-purpose-bit');\n\nvar constants = require('./constants');\n\nvar util = require('../../util');\n\nvar zipUtil = require('./util');\n\nvar ZipArchiveOutputStream = module.exports = function (options) {\n  if (!(this instanceof ZipArchiveOutputStream)) {\n    return new ZipArchiveOutputStream(options);\n  }\n\n  options = this.options = this._defaults(options);\n  ArchiveOutputStream.call(this, options);\n  this._entry = null;\n  this._entries = [];\n  this._archive = {\n    centralLength: 0,\n    centralOffset: 0,\n    comment: '',\n    finish: false,\n    finished: false,\n    processing: false,\n    forceZip64: options.forceZip64,\n    forceLocalTime: options.forceLocalTime\n  };\n};\n\ninherits(ZipArchiveOutputStream, ArchiveOutputStream);\n\nZipArchiveOutputStream.prototype._afterAppend = function (ae) {\n  this._entries.push(ae);\n\n  if (ae.getGeneralPurposeBit().usesDataDescriptor()) {\n    this._writeDataDescriptor(ae);\n  }\n\n  this._archive.processing = false;\n  this._entry = null;\n\n  if (this._archive.finish && !this._archive.finished) {\n    this._finish();\n  }\n};\n\nZipArchiveOutputStream.prototype._appendBuffer = function (ae, source, callback) {\n  if (source.length === 0) {\n    ae.setMethod(constants.METHOD_STORED);\n  }\n\n  var method = ae.getMethod();\n\n  if (method === constants.METHOD_STORED) {\n    ae.setSize(source.length);\n    ae.setCompressedSize(source.length);\n    ae.setCrc(crc32.unsigned(source));\n  }\n\n  this._writeLocalFileHeader(ae);\n\n  if (method === constants.METHOD_STORED) {\n    this.write(source);\n\n    this._afterAppend(ae);\n\n    callback(null, ae);\n    return;\n  } else if (method === constants.METHOD_DEFLATED) {\n    this._smartStream(ae, callback).end(source);\n\n    return;\n  } else {\n    callback(new Error('compression method ' + method + ' not implemented'));\n    return;\n  }\n};\n\nZipArchiveOutputStream.prototype._appendStream = function (ae, source, callback) {\n  ae.getGeneralPurposeBit().useDataDescriptor(true);\n  ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);\n\n  this._writeLocalFileHeader(ae);\n\n  var smart = this._smartStream(ae, callback);\n\n  source.once('error', function (err) {\n    smart.emit('error', err);\n    smart.end();\n  });\n  source.pipe(smart);\n};\n\nZipArchiveOutputStream.prototype._defaults = function (o) {\n  if (typeof o !== 'object') {\n    o = {};\n  }\n\n  if (typeof o.zlib !== 'object') {\n    o.zlib = {};\n  }\n\n  if (typeof o.zlib.level !== 'number') {\n    o.zlib.level = constants.ZLIB_BEST_SPEED;\n  }\n\n  o.forceZip64 = !!o.forceZip64;\n  o.forceLocalTime = !!o.forceLocalTime;\n  return o;\n};\n\nZipArchiveOutputStream.prototype._finish = function () {\n  this._archive.centralOffset = this.offset;\n\n  this._entries.forEach(function (ae) {\n    this._writeCentralFileHeader(ae);\n  }.bind(this));\n\n  this._archive.centralLength = this.offset - this._archive.centralOffset;\n\n  if (this.isZip64()) {\n    this._writeCentralDirectoryZip64();\n  }\n\n  this._writeCentralDirectoryEnd();\n\n  this._archive.processing = false;\n  this._archive.finish = true;\n  this._archive.finished = true;\n  this.end();\n};\n\nZipArchiveOutputStream.prototype._normalizeEntry = function (ae) {\n  if (ae.getMethod() === -1) {\n    ae.setMethod(constants.METHOD_DEFLATED);\n  }\n\n  if (ae.getMethod() === constants.METHOD_DEFLATED) {\n    ae.getGeneralPurposeBit().useDataDescriptor(true);\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);\n  }\n\n  if (ae.getTime() === -1) {\n    ae.setTime(new Date(), this._archive.forceLocalTime);\n  }\n\n  ae._offsets = {\n    file: 0,\n    data: 0,\n    contents: 0\n  };\n};\n\nZipArchiveOutputStream.prototype._smartStream = function (ae, callback) {\n  var deflate = ae.getMethod() === constants.METHOD_DEFLATED;\n  var process = deflate ? new DeflateCRC32Stream(this.options.zlib) : new CRC32Stream();\n  var error = null;\n\n  function handleStuff() {\n    var digest = process.digest().readUInt32BE(0);\n    ae.setCrc(digest);\n    ae.setSize(process.size());\n    ae.setCompressedSize(process.size(true));\n\n    this._afterAppend(ae);\n\n    callback(error, ae);\n  }\n\n  process.once('end', handleStuff.bind(this));\n  process.once('error', function (err) {\n    error = err;\n  });\n  process.pipe(this, {\n    end: false\n  });\n  return process;\n};\n\nZipArchiveOutputStream.prototype._writeCentralDirectoryEnd = function () {\n  var records = this._entries.length;\n  var size = this._archive.centralLength;\n  var offset = this._archive.centralOffset;\n\n  if (this.isZip64()) {\n    records = constants.ZIP64_MAGIC_SHORT;\n    size = constants.ZIP64_MAGIC;\n    offset = constants.ZIP64_MAGIC;\n  } // signature\n\n\n  this.write(zipUtil.getLongBytes(constants.SIG_EOCD)); // disk numbers\n\n  this.write(constants.SHORT_ZERO);\n  this.write(constants.SHORT_ZERO); // number of entries\n\n  this.write(zipUtil.getShortBytes(records));\n  this.write(zipUtil.getShortBytes(records)); // length and location of CD\n\n  this.write(zipUtil.getLongBytes(size));\n  this.write(zipUtil.getLongBytes(offset)); // archive comment\n\n  var comment = this.getComment();\n  var commentLength = Buffer.byteLength(comment);\n  this.write(zipUtil.getShortBytes(commentLength));\n  this.write(comment);\n};\n\nZipArchiveOutputStream.prototype._writeCentralDirectoryZip64 = function () {\n  // signature\n  this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD)); // size of the ZIP64 EOCD record\n\n  this.write(zipUtil.getEightBytes(44)); // version made by\n\n  this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64)); // version to extract\n\n  this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64)); // disk numbers\n\n  this.write(constants.LONG_ZERO);\n  this.write(constants.LONG_ZERO); // number of entries\n\n  this.write(zipUtil.getEightBytes(this._entries.length));\n  this.write(zipUtil.getEightBytes(this._entries.length)); // length and location of CD\n\n  this.write(zipUtil.getEightBytes(this._archive.centralLength));\n  this.write(zipUtil.getEightBytes(this._archive.centralOffset)); // extensible data sector\n  // not implemented at this time\n  // end of central directory locator\n\n  this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD_LOC)); // disk number holding the ZIP64 EOCD record\n\n  this.write(constants.LONG_ZERO); // relative offset of the ZIP64 EOCD record\n\n  this.write(zipUtil.getEightBytes(this._archive.centralOffset + this._archive.centralLength)); // total number of disks\n\n  this.write(zipUtil.getLongBytes(1));\n};\n\nZipArchiveOutputStream.prototype._writeCentralFileHeader = function (ae) {\n  var gpb = ae.getGeneralPurposeBit();\n  var method = ae.getMethod();\n  var offsets = ae._offsets;\n  var size = ae.getSize();\n  var compressedSize = ae.getCompressedSize();\n\n  if (ae.isZip64() || offsets.file > constants.ZIP64_MAGIC) {\n    size = constants.ZIP64_MAGIC;\n    compressedSize = constants.ZIP64_MAGIC;\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);\n    var extraBuf = Buffer.concat([zipUtil.getShortBytes(constants.ZIP64_EXTRA_ID), zipUtil.getShortBytes(24), zipUtil.getEightBytes(ae.getSize()), zipUtil.getEightBytes(ae.getCompressedSize()), zipUtil.getEightBytes(offsets.file)], 28);\n    ae.setExtra(extraBuf);\n  } // signature\n\n\n  this.write(zipUtil.getLongBytes(constants.SIG_CFH)); // version made by\n\n  this.write(zipUtil.getShortBytes(ae.getPlatform() << 8 | constants.VERSION_MADEBY)); // version to extract and general bit flag\n\n  this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));\n  this.write(gpb.encode()); // compression method\n\n  this.write(zipUtil.getShortBytes(method)); // datetime\n\n  this.write(zipUtil.getLongBytes(ae.getTimeDos())); // crc32 checksum\n\n  this.write(zipUtil.getLongBytes(ae.getCrc())); // sizes\n\n  this.write(zipUtil.getLongBytes(compressedSize));\n  this.write(zipUtil.getLongBytes(size));\n  var name = ae.getName();\n  var comment = ae.getComment();\n  var extra = ae.getCentralDirectoryExtra();\n\n  if (gpb.usesUTF8ForNames()) {\n    name = Buffer.from(name);\n    comment = Buffer.from(comment);\n  } // name length\n\n\n  this.write(zipUtil.getShortBytes(name.length)); // extra length\n\n  this.write(zipUtil.getShortBytes(extra.length)); // comments length\n\n  this.write(zipUtil.getShortBytes(comment.length)); // disk number start\n\n  this.write(constants.SHORT_ZERO); // internal attributes\n\n  this.write(zipUtil.getShortBytes(ae.getInternalAttributes())); // external attributes\n\n  this.write(zipUtil.getLongBytes(ae.getExternalAttributes())); // relative offset of LFH\n\n  if (offsets.file > constants.ZIP64_MAGIC) {\n    this.write(zipUtil.getLongBytes(constants.ZIP64_MAGIC));\n  } else {\n    this.write(zipUtil.getLongBytes(offsets.file));\n  } // name\n\n\n  this.write(name); // extra\n\n  this.write(extra); // comment\n\n  this.write(comment);\n};\n\nZipArchiveOutputStream.prototype._writeDataDescriptor = function (ae) {\n  // signature\n  this.write(zipUtil.getLongBytes(constants.SIG_DD)); // crc32 checksum\n\n  this.write(zipUtil.getLongBytes(ae.getCrc())); // sizes\n\n  if (ae.isZip64()) {\n    this.write(zipUtil.getEightBytes(ae.getCompressedSize()));\n    this.write(zipUtil.getEightBytes(ae.getSize()));\n  } else {\n    this.write(zipUtil.getLongBytes(ae.getCompressedSize()));\n    this.write(zipUtil.getLongBytes(ae.getSize()));\n  }\n};\n\nZipArchiveOutputStream.prototype._writeLocalFileHeader = function (ae) {\n  var gpb = ae.getGeneralPurposeBit();\n  var method = ae.getMethod();\n  var name = ae.getName();\n  var extra = ae.getLocalFileDataExtra();\n\n  if (ae.isZip64()) {\n    gpb.useDataDescriptor(true);\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);\n  }\n\n  if (gpb.usesUTF8ForNames()) {\n    name = Buffer.from(name);\n  }\n\n  ae._offsets.file = this.offset; // signature\n\n  this.write(zipUtil.getLongBytes(constants.SIG_LFH)); // version to extract and general bit flag\n\n  this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));\n  this.write(gpb.encode()); // compression method\n\n  this.write(zipUtil.getShortBytes(method)); // datetime\n\n  this.write(zipUtil.getLongBytes(ae.getTimeDos()));\n  ae._offsets.data = this.offset; // crc32 checksum and sizes\n\n  if (gpb.usesDataDescriptor()) {\n    this.write(constants.LONG_ZERO);\n    this.write(constants.LONG_ZERO);\n    this.write(constants.LONG_ZERO);\n  } else {\n    this.write(zipUtil.getLongBytes(ae.getCrc()));\n    this.write(zipUtil.getLongBytes(ae.getCompressedSize()));\n    this.write(zipUtil.getLongBytes(ae.getSize()));\n  } // name length\n\n\n  this.write(zipUtil.getShortBytes(name.length)); // extra length\n\n  this.write(zipUtil.getShortBytes(extra.length)); // name\n\n  this.write(name); // extra\n\n  this.write(extra);\n  ae._offsets.contents = this.offset;\n};\n\nZipArchiveOutputStream.prototype.getComment = function (comment) {\n  return this._archive.comment !== null ? this._archive.comment : '';\n};\n\nZipArchiveOutputStream.prototype.isZip64 = function () {\n  return this._archive.forceZip64 || this._entries.length > constants.ZIP64_MAGIC_SHORT || this._archive.centralLength > constants.ZIP64_MAGIC || this._archive.centralOffset > constants.ZIP64_MAGIC;\n};\n\nZipArchiveOutputStream.prototype.setComment = function (comment) {\n  this._archive.comment = comment;\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/compress-commons/lib/archivers/zip/zip-archive-output-stream.js"],"names":["inherits","require","crc32","CRC32Stream","DeflateCRC32Stream","ArchiveOutputStream","ZipArchiveEntry","GeneralPurposeBit","constants","util","zipUtil","ZipArchiveOutputStream","module","exports","options","_defaults","call","_entry","_entries","_archive","centralLength","centralOffset","comment","finish","finished","processing","forceZip64","forceLocalTime","prototype","_afterAppend","ae","push","getGeneralPurposeBit","usesDataDescriptor","_writeDataDescriptor","_finish","_appendBuffer","source","callback","length","setMethod","METHOD_STORED","method","getMethod","setSize","setCompressedSize","setCrc","unsigned","_writeLocalFileHeader","write","METHOD_DEFLATED","_smartStream","end","Error","_appendStream","useDataDescriptor","setVersionNeededToExtract","MIN_VERSION_DATA_DESCRIPTOR","smart","once","err","emit","pipe","o","zlib","level","ZLIB_BEST_SPEED","offset","forEach","_writeCentralFileHeader","bind","isZip64","_writeCentralDirectoryZip64","_writeCentralDirectoryEnd","_normalizeEntry","getTime","setTime","Date","_offsets","file","data","contents","deflate","process","error","handleStuff","digest","readUInt32BE","size","records","ZIP64_MAGIC_SHORT","ZIP64_MAGIC","getLongBytes","SIG_EOCD","SHORT_ZERO","getShortBytes","getComment","commentLength","Buffer","byteLength","SIG_ZIP64_EOCD","getEightBytes","MIN_VERSION_ZIP64","LONG_ZERO","SIG_ZIP64_EOCD_LOC","gpb","offsets","getSize","compressedSize","getCompressedSize","extraBuf","concat","ZIP64_EXTRA_ID","setExtra","SIG_CFH","getPlatform","VERSION_MADEBY","getVersionNeededToExtract","encode","getTimeDos","getCrc","name","getName","extra","getCentralDirectoryExtra","usesUTF8ForNames","from","getInternalAttributes","getExternalAttributes","SIG_DD","getLocalFileDataExtra","SIG_LFH","setComment"],"mappings":"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","sourcesContent":["/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\r\nvar inherits = require('util').inherits;\r\nvar crc32 = require('buffer-crc32');\r\nvar {CRC32Stream} = require('crc32-stream');\r\nvar {DeflateCRC32Stream} = require('crc32-stream');\r\n\r\nvar ArchiveOutputStream = require('../archive-output-stream');\r\nvar ZipArchiveEntry = require('./zip-archive-entry');\r\nvar GeneralPurposeBit = require('./general-purpose-bit');\r\n\r\nvar constants = require('./constants');\r\nvar util = require('../../util');\r\nvar zipUtil = require('./util');\r\n\r\nvar ZipArchiveOutputStream = module.exports = function(options) {\r\n  if (!(this instanceof ZipArchiveOutputStream)) {\r\n    return new ZipArchiveOutputStream(options);\r\n  }\r\n\r\n  options = this.options = this._defaults(options);\r\n\r\n  ArchiveOutputStream.call(this, options);\r\n\r\n  this._entry = null;\r\n  this._entries = [];\r\n  this._archive = {\r\n    centralLength: 0,\r\n    centralOffset: 0,\r\n    comment: '',\r\n    finish: false,\r\n    finished: false,\r\n    processing: false,\r\n    forceZip64: options.forceZip64,\r\n    forceLocalTime: options.forceLocalTime\r\n  };\r\n};\r\n\r\ninherits(ZipArchiveOutputStream, ArchiveOutputStream);\r\n\r\nZipArchiveOutputStream.prototype._afterAppend = function(ae) {\r\n  this._entries.push(ae);\r\n\r\n  if (ae.getGeneralPurposeBit().usesDataDescriptor()) {\r\n    this._writeDataDescriptor(ae);\r\n  }\r\n\r\n  this._archive.processing = false;\r\n  this._entry = null;\r\n\r\n  if (this._archive.finish && !this._archive.finished) {\r\n    this._finish();\r\n  }\r\n};\r\n\r\nZipArchiveOutputStream.prototype._appendBuffer = function(ae, source, callback) {\r\n  if (source.length === 0) {\r\n    ae.setMethod(constants.METHOD_STORED);\r\n  }\r\n\r\n  var method = ae.getMethod();\r\n\r\n  if (method === constants.METHOD_STORED) {\r\n    ae.setSize(source.length);\r\n    ae.setCompressedSize(source.length);\r\n    ae.setCrc(crc32.unsigned(source));\r\n  }\r\n\r\n  this._writeLocalFileHeader(ae);\r\n\r\n  if (method === constants.METHOD_STORED) {\r\n    this.write(source);\r\n    this._afterAppend(ae);\r\n    callback(null, ae);\r\n    return;\r\n  } else if (method === constants.METHOD_DEFLATED) {\r\n    this._smartStream(ae, callback).end(source);\r\n    return;\r\n  } else {\r\n    callback(new Error('compression method ' + method + ' not implemented'));\r\n    return;\r\n  }\r\n};\r\n\r\nZipArchiveOutputStream.prototype._appendStream = function(ae, source, callback) {\r\n  ae.getGeneralPurposeBit().useDataDescriptor(true);\r\n  ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);\r\n\r\n  this._writeLocalFileHeader(ae);\r\n\r\n  var smart = this._smartStream(ae, callback);\r\n  source.once('error', function(err) {\r\n    smart.emit('error', err);\r\n    smart.end();\r\n  })\r\n  source.pipe(smart);\r\n};\r\n\r\nZipArchiveOutputStream.prototype._defaults = function(o) {\r\n  if (typeof o !== 'object') {\r\n    o = {};\r\n  }\r\n\r\n  if (typeof o.zlib !== 'object') {\r\n    o.zlib = {};\r\n  }\r\n\r\n  if (typeof o.zlib.level !== 'number') {\r\n    o.zlib.level = constants.ZLIB_BEST_SPEED;\r\n  }\r\n\r\n  o.forceZip64 = !!o.forceZip64;\r\n  o.forceLocalTime = !!o.forceLocalTime;\r\n\r\n  return o;\r\n};\r\n\r\nZipArchiveOutputStream.prototype._finish = function() {\r\n  this._archive.centralOffset = this.offset;\r\n\r\n  this._entries.forEach(function(ae) {\r\n    this._writeCentralFileHeader(ae);\r\n  }.bind(this));\r\n\r\n  this._archive.centralLength = this.offset - this._archive.centralOffset;\r\n\r\n  if (this.isZip64()) {\r\n    this._writeCentralDirectoryZip64();\r\n  }\r\n\r\n  this._writeCentralDirectoryEnd();\r\n\r\n  this._archive.processing = false;\r\n  this._archive.finish = true;\r\n  this._archive.finished = true;\r\n  this.end();\r\n};\r\n\r\nZipArchiveOutputStream.prototype._normalizeEntry = function(ae) {\r\n  if (ae.getMethod() === -1) {\r\n    ae.setMethod(constants.METHOD_DEFLATED);\r\n  }\r\n\r\n  if (ae.getMethod() === constants.METHOD_DEFLATED) {\r\n    ae.getGeneralPurposeBit().useDataDescriptor(true);\r\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);\r\n  }\r\n\r\n  if (ae.getTime() === -1) {\r\n    ae.setTime(new Date(), this._archive.forceLocalTime);\r\n  }\r\n\r\n  ae._offsets = {\r\n    file: 0,\r\n    data: 0,\r\n    contents: 0,\r\n  };\r\n};\r\n\r\nZipArchiveOutputStream.prototype._smartStream = function(ae, callback) {\r\n  var deflate = ae.getMethod() === constants.METHOD_DEFLATED;\r\n  var process = deflate ? new DeflateCRC32Stream(this.options.zlib) : new CRC32Stream();\r\n  var error = null;\r\n\r\n  function handleStuff() {\r\n    var digest = process.digest().readUInt32BE(0);\r\n    ae.setCrc(digest);\r\n    ae.setSize(process.size());\r\n    ae.setCompressedSize(process.size(true));\r\n    this._afterAppend(ae);\r\n    callback(error, ae);\r\n  }\r\n\r\n  process.once('end', handleStuff.bind(this));\r\n  process.once('error', function(err) {\r\n    error = err;\r\n  });\r\n\r\n  process.pipe(this, { end: false });\r\n\r\n  return process;\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeCentralDirectoryEnd = function() {\r\n  var records = this._entries.length;\r\n  var size = this._archive.centralLength;\r\n  var offset = this._archive.centralOffset;\r\n\r\n  if (this.isZip64()) {\r\n    records = constants.ZIP64_MAGIC_SHORT;\r\n    size = constants.ZIP64_MAGIC;\r\n    offset = constants.ZIP64_MAGIC;\r\n  }\r\n\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_EOCD));\r\n\r\n  // disk numbers\r\n  this.write(constants.SHORT_ZERO);\r\n  this.write(constants.SHORT_ZERO);\r\n\r\n  // number of entries\r\n  this.write(zipUtil.getShortBytes(records));\r\n  this.write(zipUtil.getShortBytes(records));\r\n\r\n  // length and location of CD\r\n  this.write(zipUtil.getLongBytes(size));\r\n  this.write(zipUtil.getLongBytes(offset));\r\n\r\n  // archive comment\r\n  var comment = this.getComment();\r\n  var commentLength = Buffer.byteLength(comment);\r\n  this.write(zipUtil.getShortBytes(commentLength));\r\n  this.write(comment);\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeCentralDirectoryZip64 = function() {\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD));\r\n\r\n  // size of the ZIP64 EOCD record\r\n  this.write(zipUtil.getEightBytes(44));\r\n\r\n  // version made by\r\n  this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64));\r\n\r\n  // version to extract\r\n  this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64));\r\n\r\n  // disk numbers\r\n  this.write(constants.LONG_ZERO);\r\n  this.write(constants.LONG_ZERO);\r\n\r\n  // number of entries\r\n  this.write(zipUtil.getEightBytes(this._entries.length));\r\n  this.write(zipUtil.getEightBytes(this._entries.length));\r\n\r\n  // length and location of CD\r\n  this.write(zipUtil.getEightBytes(this._archive.centralLength));\r\n  this.write(zipUtil.getEightBytes(this._archive.centralOffset));\r\n\r\n  // extensible data sector\r\n  // not implemented at this time\r\n\r\n  // end of central directory locator\r\n  this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD_LOC));\r\n\r\n  // disk number holding the ZIP64 EOCD record\r\n  this.write(constants.LONG_ZERO);\r\n\r\n  // relative offset of the ZIP64 EOCD record\r\n  this.write(zipUtil.getEightBytes(this._archive.centralOffset + this._archive.centralLength));\r\n\r\n  // total number of disks\r\n  this.write(zipUtil.getLongBytes(1));\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeCentralFileHeader = function(ae) {\r\n  var gpb = ae.getGeneralPurposeBit();\r\n  var method = ae.getMethod();\r\n  var offsets = ae._offsets;\r\n\r\n  var size = ae.getSize();\r\n  var compressedSize = ae.getCompressedSize();\r\n\r\n  if (ae.isZip64() || offsets.file > constants.ZIP64_MAGIC) {\r\n    size = constants.ZIP64_MAGIC;\r\n    compressedSize = constants.ZIP64_MAGIC;\r\n\r\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);\r\n\r\n    var extraBuf = Buffer.concat([\r\n      zipUtil.getShortBytes(constants.ZIP64_EXTRA_ID),\r\n      zipUtil.getShortBytes(24),\r\n      zipUtil.getEightBytes(ae.getSize()),\r\n      zipUtil.getEightBytes(ae.getCompressedSize()),\r\n      zipUtil.getEightBytes(offsets.file)\r\n    ], 28);\r\n\r\n    ae.setExtra(extraBuf);\r\n  }\r\n\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_CFH));\r\n\r\n  // version made by\r\n  this.write(zipUtil.getShortBytes((ae.getPlatform() << 8) | constants.VERSION_MADEBY));\r\n\r\n  // version to extract and general bit flag\r\n  this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));\r\n  this.write(gpb.encode());\r\n\r\n  // compression method\r\n  this.write(zipUtil.getShortBytes(method));\r\n\r\n  // datetime\r\n  this.write(zipUtil.getLongBytes(ae.getTimeDos()));\r\n\r\n  // crc32 checksum\r\n  this.write(zipUtil.getLongBytes(ae.getCrc()));\r\n\r\n  // sizes\r\n  this.write(zipUtil.getLongBytes(compressedSize));\r\n  this.write(zipUtil.getLongBytes(size));\r\n\r\n  var name = ae.getName();\r\n  var comment = ae.getComment();\r\n  var extra = ae.getCentralDirectoryExtra();\r\n\r\n  if (gpb.usesUTF8ForNames()) {\r\n    name = Buffer.from(name);\r\n    comment = Buffer.from(comment);\r\n  }\r\n\r\n  // name length\r\n  this.write(zipUtil.getShortBytes(name.length));\r\n\r\n  // extra length\r\n  this.write(zipUtil.getShortBytes(extra.length));\r\n\r\n  // comments length\r\n  this.write(zipUtil.getShortBytes(comment.length));\r\n\r\n  // disk number start\r\n  this.write(constants.SHORT_ZERO);\r\n\r\n  // internal attributes\r\n  this.write(zipUtil.getShortBytes(ae.getInternalAttributes()));\r\n\r\n  // external attributes\r\n  this.write(zipUtil.getLongBytes(ae.getExternalAttributes()));\r\n\r\n  // relative offset of LFH\r\n  if (offsets.file > constants.ZIP64_MAGIC) {\r\n    this.write(zipUtil.getLongBytes(constants.ZIP64_MAGIC));\r\n  } else {\r\n    this.write(zipUtil.getLongBytes(offsets.file));\r\n  }\r\n\r\n  // name\r\n  this.write(name);\r\n\r\n  // extra\r\n  this.write(extra);\r\n\r\n  // comment\r\n  this.write(comment);\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeDataDescriptor = function(ae) {\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_DD));\r\n\r\n  // crc32 checksum\r\n  this.write(zipUtil.getLongBytes(ae.getCrc()));\r\n\r\n  // sizes\r\n  if (ae.isZip64()) {\r\n    this.write(zipUtil.getEightBytes(ae.getCompressedSize()));\r\n    this.write(zipUtil.getEightBytes(ae.getSize()));\r\n  } else {\r\n    this.write(zipUtil.getLongBytes(ae.getCompressedSize()));\r\n    this.write(zipUtil.getLongBytes(ae.getSize()));\r\n  }\r\n};\r\n\r\nZipArchiveOutputStream.prototype._writeLocalFileHeader = function(ae) {\r\n  var gpb = ae.getGeneralPurposeBit();\r\n  var method = ae.getMethod();\r\n  var name = ae.getName();\r\n  var extra = ae.getLocalFileDataExtra();\r\n\r\n  if (ae.isZip64()) {\r\n    gpb.useDataDescriptor(true);\r\n    ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);\r\n  }\r\n\r\n  if (gpb.usesUTF8ForNames()) {\r\n    name = Buffer.from(name);\r\n  }\r\n\r\n  ae._offsets.file = this.offset;\r\n\r\n  // signature\r\n  this.write(zipUtil.getLongBytes(constants.SIG_LFH));\r\n\r\n  // version to extract and general bit flag\r\n  this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));\r\n  this.write(gpb.encode());\r\n\r\n  // compression method\r\n  this.write(zipUtil.getShortBytes(method));\r\n\r\n  // datetime\r\n  this.write(zipUtil.getLongBytes(ae.getTimeDos()));\r\n\r\n  ae._offsets.data = this.offset;\r\n\r\n  // crc32 checksum and sizes\r\n  if (gpb.usesDataDescriptor()) {\r\n    this.write(constants.LONG_ZERO);\r\n    this.write(constants.LONG_ZERO);\r\n    this.write(constants.LONG_ZERO);\r\n  } else {\r\n    this.write(zipUtil.getLongBytes(ae.getCrc()));\r\n    this.write(zipUtil.getLongBytes(ae.getCompressedSize()));\r\n    this.write(zipUtil.getLongBytes(ae.getSize()));\r\n  }\r\n\r\n  // name length\r\n  this.write(zipUtil.getShortBytes(name.length));\r\n\r\n  // extra length\r\n  this.write(zipUtil.getShortBytes(extra.length));\r\n\r\n  // name\r\n  this.write(name);\r\n\r\n  // extra\r\n  this.write(extra);\r\n\r\n  ae._offsets.contents = this.offset;\r\n};\r\n\r\nZipArchiveOutputStream.prototype.getComment = function(comment) {\r\n  return this._archive.comment !== null ? this._archive.comment : '';\r\n};\r\n\r\nZipArchiveOutputStream.prototype.isZip64 = function() {\r\n  return this._archive.forceZip64 || this._entries.length > constants.ZIP64_MAGIC_SHORT || this._archive.centralLength > constants.ZIP64_MAGIC || this._archive.centralOffset > constants.ZIP64_MAGIC;\r\n};\r\n\r\nZipArchiveOutputStream.prototype.setComment = function(comment) {\r\n  this._archive.comment = comment;\r\n};\r\n"]},"metadata":{},"sourceType":"script"}