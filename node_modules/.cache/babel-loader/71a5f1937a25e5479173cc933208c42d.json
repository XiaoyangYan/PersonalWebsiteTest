{"ast":null,"code":"/**\r\n * Archiver Vending\r\n *\r\n * @ignore\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\nvar Archiver = require('./lib/core');\n\nvar formats = {};\n/**\r\n * Dispenses a new Archiver instance.\r\n *\r\n * @constructor\r\n * @param  {String} format The archive format to use.\r\n * @param  {Object} options See [Archiver]{@link Archiver}\r\n * @return {Archiver}\r\n */\n\nvar vending = function (format, options) {\n  return vending.create(format, options);\n};\n/**\r\n * Creates a new Archiver instance.\r\n *\r\n * @param  {String} format The archive format to use.\r\n * @param  {Object} options See [Archiver]{@link Archiver}\r\n * @return {Archiver}\r\n */\n\n\nvending.create = function (format, options) {\n  if (formats[format]) {\n    var instance = new Archiver(format, options);\n    instance.setFormat(format);\n    instance.setModule(new formats[format](options));\n    return instance;\n  } else {\n    throw new Error('create(' + format + '): format not registered');\n  }\n};\n/**\r\n * Registers a format for use with archiver.\r\n *\r\n * @param  {String} format The name of the format.\r\n * @param  {Function} module The function for archiver to interact with.\r\n * @return void\r\n */\n\n\nvending.registerFormat = function (format, module) {\n  if (formats[format]) {\n    throw new Error('register(' + format + '): format already registered');\n  }\n\n  if (typeof module !== 'function') {\n    throw new Error('register(' + format + '): format module invalid');\n  }\n\n  if (typeof module.prototype.append !== 'function' || typeof module.prototype.finalize !== 'function') {\n    throw new Error('register(' + format + '): format module missing methods');\n  }\n\n  formats[format] = module;\n};\n\nvending.registerFormat('zip', require('./lib/plugins/zip'));\nvending.registerFormat('tar', require('./lib/plugins/tar'));\nvending.registerFormat('json', require('./lib/plugins/json'));\nmodule.exports = vending;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/archiver/index.js"],"names":["Archiver","require","formats","vending","format","options","create","instance","setFormat","setModule","Error","registerFormat","module","prototype","append","finalize","exports"],"mappings":"AAAA;;;;;;;AAOA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIC,OAAO,GAAG,EAAd;AAEA;;;;;;;;;AAQA,IAAIC,OAAO,GAAG,UAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACtC,SAAOF,OAAO,CAACG,MAAR,CAAeF,MAAf,EAAuBC,OAAvB,CAAP;AACD,CAFD;AAIA;;;;;;;;;AAOAF,OAAO,CAACG,MAAR,GAAiB,UAASF,MAAT,EAAiBC,OAAjB,EAA0B;AACzC,MAAIH,OAAO,CAACE,MAAD,CAAX,EAAqB;AACnB,QAAIG,QAAQ,GAAG,IAAIP,QAAJ,CAAaI,MAAb,EAAqBC,OAArB,CAAf;AACAE,IAAAA,QAAQ,CAACC,SAAT,CAAmBJ,MAAnB;AACAG,IAAAA,QAAQ,CAACE,SAAT,CAAmB,IAAIP,OAAO,CAACE,MAAD,CAAX,CAAoBC,OAApB,CAAnB;AAEA,WAAOE,QAAP;AACD,GAND,MAMO;AACL,UAAM,IAAIG,KAAJ,CAAU,YAAYN,MAAZ,GAAqB,0BAA/B,CAAN;AACD;AACF,CAVD;AAYA;;;;;;;;;AAOAD,OAAO,CAACQ,cAAR,GAAyB,UAASP,MAAT,EAAiBQ,MAAjB,EAAyB;AAChD,MAAIV,OAAO,CAACE,MAAD,CAAX,EAAqB;AACnB,UAAM,IAAIM,KAAJ,CAAU,cAAcN,MAAd,GAAuB,8BAAjC,CAAN;AACD;;AAED,MAAI,OAAOQ,MAAP,KAAkB,UAAtB,EAAkC;AAChC,UAAM,IAAIF,KAAJ,CAAU,cAAcN,MAAd,GAAuB,0BAAjC,CAAN;AACD;;AAED,MAAI,OAAOQ,MAAM,CAACC,SAAP,CAAiBC,MAAxB,KAAmC,UAAnC,IAAiD,OAAOF,MAAM,CAACC,SAAP,CAAiBE,QAAxB,KAAqC,UAA1F,EAAsG;AACpG,UAAM,IAAIL,KAAJ,CAAU,cAAcN,MAAd,GAAuB,kCAAjC,CAAN;AACD;;AAEDF,EAAAA,OAAO,CAACE,MAAD,CAAP,GAAkBQ,MAAlB;AACD,CAdD;;AAgBAT,OAAO,CAACQ,cAAR,CAAuB,KAAvB,EAA8BV,OAAO,CAAC,mBAAD,CAArC;AACAE,OAAO,CAACQ,cAAR,CAAuB,KAAvB,EAA8BV,OAAO,CAAC,mBAAD,CAArC;AACAE,OAAO,CAACQ,cAAR,CAAuB,MAAvB,EAA+BV,OAAO,CAAC,oBAAD,CAAtC;AAEAW,MAAM,CAACI,OAAP,GAAiBb,OAAjB","sourcesContent":["/**\r\n * Archiver Vending\r\n *\r\n * @ignore\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\r\nvar Archiver = require('./lib/core');\r\n\r\nvar formats = {};\r\n\r\n/**\r\n * Dispenses a new Archiver instance.\r\n *\r\n * @constructor\r\n * @param  {String} format The archive format to use.\r\n * @param  {Object} options See [Archiver]{@link Archiver}\r\n * @return {Archiver}\r\n */\r\nvar vending = function(format, options) {\r\n  return vending.create(format, options);\r\n};\r\n\r\n/**\r\n * Creates a new Archiver instance.\r\n *\r\n * @param  {String} format The archive format to use.\r\n * @param  {Object} options See [Archiver]{@link Archiver}\r\n * @return {Archiver}\r\n */\r\nvending.create = function(format, options) {\r\n  if (formats[format]) {\r\n    var instance = new Archiver(format, options);\r\n    instance.setFormat(format);\r\n    instance.setModule(new formats[format](options));\r\n\r\n    return instance;\r\n  } else {\r\n    throw new Error('create(' + format + '): format not registered');\r\n  }\r\n};\r\n\r\n/**\r\n * Registers a format for use with archiver.\r\n *\r\n * @param  {String} format The name of the format.\r\n * @param  {Function} module The function for archiver to interact with.\r\n * @return void\r\n */\r\nvending.registerFormat = function(format, module) {\r\n  if (formats[format]) {\r\n    throw new Error('register(' + format + '): format already registered');\r\n  }\r\n\r\n  if (typeof module !== 'function') {\r\n    throw new Error('register(' + format + '): format module invalid');\r\n  }\r\n\r\n  if (typeof module.prototype.append !== 'function' || typeof module.prototype.finalize !== 'function') {\r\n    throw new Error('register(' + format + '): format module missing methods');\r\n  }\r\n\r\n  formats[format] = module;\r\n};\r\n\r\nvending.registerFormat('zip', require('./lib/plugins/zip'));\r\nvending.registerFormat('tar', require('./lib/plugins/tar'));\r\nvending.registerFormat('json', require('./lib/plugins/json'));\r\n\r\nmodule.exports = vending;"]},"metadata":{},"sourceType":"script"}