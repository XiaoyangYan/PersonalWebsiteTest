{"ast":null,"code":"/**\r\n * Archiver Core\r\n *\r\n * @ignore\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\nvar util = require('util');\n\nconst ERROR_CODES = {\n  'ABORTED': 'archive was aborted',\n  'DIRECTORYDIRPATHREQUIRED': 'diretory dirpath argument must be a non-empty string value',\n  'DIRECTORYFUNCTIONINVALIDDATA': 'invalid data returned by directory custom data function',\n  'ENTRYNAMEREQUIRED': 'entry name must be a non-empty string value',\n  'FILEFILEPATHREQUIRED': 'file filepath argument must be a non-empty string value',\n  'FINALIZING': 'archive already finalizing',\n  'QUEUECLOSED': 'queue closed',\n  'NOENDMETHOD': 'no suitable finalize/end method defined by module',\n  'DIRECTORYNOTSUPPORTED': 'support for directory entries not defined by module',\n  'FORMATSET': 'archive format already set',\n  'INPUTSTEAMBUFFERREQUIRED': 'input source must be valid Stream or Buffer instance',\n  'MODULESET': 'module already set',\n  'SYMLINKNOTSUPPORTED': 'support for symlink entries not defined by module',\n  'SYMLINKFILEPATHREQUIRED': 'symlink filepath argument must be a non-empty string value',\n  'SYMLINKTARGETREQUIRED': 'symlink target argument must be a non-empty string value',\n  'ENTRYNOTSUPPORTED': 'entry not supported'\n};\n\nfunction ArchiverError(code, data) {\n  Error.captureStackTrace(this, this.constructor); //this.name = this.constructor.name;\n\n  this.message = ERROR_CODES[code] || code;\n  this.code = code;\n  this.data = data;\n}\n\nutil.inherits(ArchiverError, Error);\nexports = module.exports = ArchiverError;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/archiver/lib/error.js"],"names":["util","require","ERROR_CODES","ArchiverError","code","data","Error","captureStackTrace","constructor","message","inherits","exports","module"],"mappings":"AAAA;;;;;;;AAQA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,MAAMC,WAAW,GAAG;AAClB,aAAW,qBADO;AAElB,8BAA4B,4DAFV;AAGlB,kCAAgC,yDAHd;AAIlB,uBAAqB,6CAJH;AAKlB,0BAAwB,yDALN;AAMlB,gBAAc,4BANI;AAOlB,iBAAe,cAPG;AAQlB,iBAAe,mDARG;AASlB,2BAAyB,qDATP;AAUlB,eAAa,4BAVK;AAWlB,8BAA4B,sDAXV;AAYlB,eAAa,oBAZK;AAalB,yBAAuB,mDAbL;AAclB,6BAA2B,4DAdT;AAelB,2BAAyB,0DAfP;AAgBlB,uBAAqB;AAhBH,CAApB;;AAmBA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AACjCC,EAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC,EADiC,CAEjC;;AACA,OAAKC,OAAL,GAAeP,WAAW,CAACE,IAAD,CAAX,IAAqBA,IAApC;AACA,OAAKA,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD;;AAEDL,IAAI,CAACU,QAAL,CAAcP,aAAd,EAA6BG,KAA7B;AAEAK,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBR,aAA3B","sourcesContent":["/**\r\n * Archiver Core\r\n *\r\n * @ignore\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\r\n\r\nvar util = require('util');\r\n\r\nconst ERROR_CODES = {\r\n  'ABORTED': 'archive was aborted',\r\n  'DIRECTORYDIRPATHREQUIRED': 'diretory dirpath argument must be a non-empty string value',\r\n  'DIRECTORYFUNCTIONINVALIDDATA': 'invalid data returned by directory custom data function',\r\n  'ENTRYNAMEREQUIRED': 'entry name must be a non-empty string value',\r\n  'FILEFILEPATHREQUIRED': 'file filepath argument must be a non-empty string value',\r\n  'FINALIZING': 'archive already finalizing',\r\n  'QUEUECLOSED': 'queue closed',\r\n  'NOENDMETHOD': 'no suitable finalize/end method defined by module',\r\n  'DIRECTORYNOTSUPPORTED': 'support for directory entries not defined by module',\r\n  'FORMATSET': 'archive format already set',\r\n  'INPUTSTEAMBUFFERREQUIRED': 'input source must be valid Stream or Buffer instance',\r\n  'MODULESET': 'module already set',\r\n  'SYMLINKNOTSUPPORTED': 'support for symlink entries not defined by module',\r\n  'SYMLINKFILEPATHREQUIRED': 'symlink filepath argument must be a non-empty string value',\r\n  'SYMLINKTARGETREQUIRED': 'symlink target argument must be a non-empty string value',\r\n  'ENTRYNOTSUPPORTED': 'entry not supported'\r\n};\r\n\r\nfunction ArchiverError(code, data) {\r\n  Error.captureStackTrace(this, this.constructor);\r\n  //this.name = this.constructor.name;\r\n  this.message = ERROR_CODES[code] || code;\r\n  this.code = code;\r\n  this.data = data;\r\n}\r\n\r\nutil.inherits(ArchiverError, Error);\r\n\r\nexports = module.exports = ArchiverError;"]},"metadata":{},"sourceType":"script"}