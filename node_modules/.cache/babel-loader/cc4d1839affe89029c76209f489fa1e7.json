{"ast":null,"code":"/*!\n * parse-glob <https://github.com/jonschlinkert/parse-glob>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n'use strict';\n\nvar isGlob = require('is-glob');\n\nvar findBase = require('glob-base');\n\nvar extglob = require('is-extglob');\n\nvar dotfile = require('is-dotfile');\n/**\n * Expose `cache`\n */\n\n\nvar cache = module.exports.cache = {};\n/**\n * Parse a glob pattern into tokens.\n *\n * When no paths or '**' are in the glob, we use a\n * different strategy for parsing the filename, since\n * file names can contain braces and other difficult\n * patterns. such as:\n *\n *  - `*.{a,b}`\n *  - `(**|*.js)`\n */\n\nmodule.exports = function parseGlob(glob) {\n  if (cache.hasOwnProperty(glob)) {\n    return cache[glob];\n  }\n\n  var tok = {};\n  tok.orig = glob;\n  tok.is = {}; // unescape dots and slashes in braces/brackets\n\n  glob = escape(glob);\n  var parsed = findBase(glob);\n  tok.is.glob = parsed.isGlob;\n  tok.glob = parsed.glob;\n  tok.base = parsed.base;\n  var segs = /([^\\/]*)$/.exec(glob);\n  tok.path = {};\n  tok.path.dirname = '';\n  tok.path.basename = segs[1] || '';\n  tok.path.dirname = glob.split(tok.path.basename).join('') || '';\n  var basename = (tok.path.basename || '').split('.') || '';\n  tok.path.filename = basename[0] || '';\n  tok.path.extname = basename.slice(1).join('.') || '';\n  tok.path.ext = '';\n\n  if (isGlob(tok.path.dirname) && !tok.path.basename) {\n    if (!/\\/$/.test(tok.glob)) {\n      tok.path.basename = tok.glob;\n    }\n\n    tok.path.dirname = tok.base;\n  }\n\n  if (glob.indexOf('/') === -1 && !tok.is.globstar) {\n    tok.path.dirname = '';\n    tok.path.basename = tok.orig;\n  }\n\n  var dot = tok.path.basename.indexOf('.');\n\n  if (dot !== -1) {\n    tok.path.filename = tok.path.basename.slice(0, dot);\n    tok.path.extname = tok.path.basename.slice(dot);\n  }\n\n  if (tok.path.extname.charAt(0) === '.') {\n    var exts = tok.path.extname.split('.');\n    tok.path.ext = exts[exts.length - 1];\n  } // unescape dots and slashes in braces/brackets\n\n\n  tok.glob = unescape(tok.glob);\n  tok.path.dirname = unescape(tok.path.dirname);\n  tok.path.basename = unescape(tok.path.basename);\n  tok.path.filename = unescape(tok.path.filename);\n  tok.path.extname = unescape(tok.path.extname); // Booleans\n\n  var is = glob && tok.is.glob;\n  tok.is.negated = glob && glob.charAt(0) === '!';\n  tok.is.extglob = glob && extglob(glob);\n  tok.is.braces = has(is, glob, '{');\n  tok.is.brackets = has(is, glob, '[:');\n  tok.is.globstar = has(is, glob, '**');\n  tok.is.dotfile = dotfile(tok.path.basename) || dotfile(tok.path.filename);\n  tok.is.dotdir = dotdir(tok.path.dirname);\n  return cache[glob] = tok;\n};\n/**\n * Returns true if the glob matches dot-directories.\n *\n * @param  {Object} `tok` The tokens object\n * @param  {Object} `path` The path object\n * @return {Object}\n */\n\n\nfunction dotdir(base) {\n  if (base.indexOf('/.') !== -1) {\n    return true;\n  }\n\n  if (base.charAt(0) === '.' && base.charAt(1) !== '/') {\n    return true;\n  }\n\n  return false;\n}\n/**\n * Returns true if the pattern has the given `ch`aracter(s)\n *\n * @param  {Object} `glob` The glob pattern.\n * @param  {Object} `ch` The character to test for\n * @return {Object}\n */\n\n\nfunction has(is, glob, ch) {\n  return is && glob.indexOf(ch) !== -1;\n}\n/**\n * Escape/unescape utils\n */\n\n\nfunction escape(str) {\n  var re = /\\{([^{}]*?)}|\\(([^()]*?)\\)|\\[([^\\[\\]]*?)\\]/g;\n  return str.replace(re, function (outter, braces, parens, brackets) {\n    var inner = braces || parens || brackets;\n\n    if (!inner) {\n      return outter;\n    }\n\n    return outter.split(inner).join(esc(inner));\n  });\n}\n\nfunction esc(str) {\n  str = str.split('/').join('__SLASH__');\n  str = str.split('.').join('__DOT__');\n  return str;\n}\n\nfunction unescape(str) {\n  str = str.split('__SLASH__').join('/');\n  str = str.split('__DOT__').join('.');\n  return str;\n}","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/parse-glob/index.js"],"names":["isGlob","require","findBase","extglob","dotfile","cache","module","exports","parseGlob","glob","hasOwnProperty","tok","orig","is","escape","parsed","base","segs","exec","path","dirname","basename","split","join","filename","extname","slice","ext","test","indexOf","globstar","dot","charAt","exts","length","unescape","negated","braces","has","brackets","dotdir","ch","str","re","replace","outter","parens","inner","esc"],"mappings":"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","sourcesContent":["/*!\n * parse-glob <https://github.com/jonschlinkert/parse-glob>\n *\n * Copyright (c) 2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isGlob = require('is-glob');\nvar findBase = require('glob-base');\nvar extglob = require('is-extglob');\nvar dotfile = require('is-dotfile');\n\n/**\n * Expose `cache`\n */\n\nvar cache = module.exports.cache = {};\n\n/**\n * Parse a glob pattern into tokens.\n *\n * When no paths or '**' are in the glob, we use a\n * different strategy for parsing the filename, since\n * file names can contain braces and other difficult\n * patterns. such as:\n *\n *  - `*.{a,b}`\n *  - `(**|*.js)`\n */\n\nmodule.exports = function parseGlob(glob) {\n  if (cache.hasOwnProperty(glob)) {\n    return cache[glob];\n  }\n\n  var tok = {};\n  tok.orig = glob;\n  tok.is = {};\n\n  // unescape dots and slashes in braces/brackets\n  glob = escape(glob);\n\n  var parsed = findBase(glob);\n  tok.is.glob = parsed.isGlob;\n\n  tok.glob = parsed.glob;\n  tok.base = parsed.base;\n  var segs = /([^\\/]*)$/.exec(glob);\n\n  tok.path = {};\n  tok.path.dirname = '';\n  tok.path.basename = segs[1] || '';\n  tok.path.dirname = glob.split(tok.path.basename).join('') || '';\n  var basename = (tok.path.basename || '').split('.') || '';\n  tok.path.filename = basename[0] || '';\n  tok.path.extname = basename.slice(1).join('.') || '';\n  tok.path.ext = '';\n\n  if (isGlob(tok.path.dirname) && !tok.path.basename) {\n    if (!/\\/$/.test(tok.glob)) {\n      tok.path.basename = tok.glob;\n    }\n    tok.path.dirname = tok.base;\n  }\n\n  if (glob.indexOf('/') === -1 && !tok.is.globstar) {\n    tok.path.dirname = '';\n    tok.path.basename = tok.orig;\n  }\n\n  var dot = tok.path.basename.indexOf('.');\n  if (dot !== -1) {\n    tok.path.filename = tok.path.basename.slice(0, dot);\n    tok.path.extname = tok.path.basename.slice(dot);\n  }\n\n  if (tok.path.extname.charAt(0) === '.') {\n    var exts = tok.path.extname.split('.');\n    tok.path.ext = exts[exts.length - 1];\n  }\n\n  // unescape dots and slashes in braces/brackets\n  tok.glob = unescape(tok.glob);\n  tok.path.dirname = unescape(tok.path.dirname);\n  tok.path.basename = unescape(tok.path.basename);\n  tok.path.filename = unescape(tok.path.filename);\n  tok.path.extname = unescape(tok.path.extname);\n\n  // Booleans\n  var is = (glob && tok.is.glob);\n  tok.is.negated  = glob && glob.charAt(0) === '!';\n  tok.is.extglob  = glob && extglob(glob);\n  tok.is.braces   = has(is, glob, '{');\n  tok.is.brackets = has(is, glob, '[:');\n  tok.is.globstar = has(is, glob, '**');\n  tok.is.dotfile  = dotfile(tok.path.basename) || dotfile(tok.path.filename);\n  tok.is.dotdir   = dotdir(tok.path.dirname);\n  return (cache[glob] = tok);\n}\n\n/**\n * Returns true if the glob matches dot-directories.\n *\n * @param  {Object} `tok` The tokens object\n * @param  {Object} `path` The path object\n * @return {Object}\n */\n\nfunction dotdir(base) {\n  if (base.indexOf('/.') !== -1) {\n    return true;\n  }\n  if (base.charAt(0) === '.' && base.charAt(1) !== '/') {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Returns true if the pattern has the given `ch`aracter(s)\n *\n * @param  {Object} `glob` The glob pattern.\n * @param  {Object} `ch` The character to test for\n * @return {Object}\n */\n\nfunction has(is, glob, ch) {\n  return is && glob.indexOf(ch) !== -1;\n}\n\n/**\n * Escape/unescape utils\n */\n\nfunction escape(str) {\n  var re = /\\{([^{}]*?)}|\\(([^()]*?)\\)|\\[([^\\[\\]]*?)\\]/g;\n  return str.replace(re, function (outter, braces, parens, brackets) {\n    var inner = braces || parens || brackets;\n    if (!inner) { return outter; }\n    return outter.split(inner).join(esc(inner));\n  });\n}\n\nfunction esc(str) {\n  str = str.split('/').join('__SLASH__');\n  str = str.split('.').join('__DOT__');\n  return str;\n}\n\nfunction unescape(str) {\n  str = str.split('__SLASH__').join('/');\n  str = str.split('__DOT__').join('.');\n  return str;\n}\n"]},"metadata":{},"sourceType":"script"}