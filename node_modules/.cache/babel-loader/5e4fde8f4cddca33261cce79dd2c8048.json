{"ast":null,"code":"// builtin\nvar fs = require('fs');\n\nvar path = require('path'); // vendor\n\n\nvar resv = require('resolve'); // given a path, create an array of node_module paths for it\n// borrowed from substack/resolve\n\n\nfunction nodeModulesPaths(start, cb) {\n  var splitRe = process.platform === 'win32' ? /[\\/\\\\]/ : /\\/+/;\n  var parts = start.split(splitRe);\n  var dirs = [];\n\n  for (var i = parts.length - 1; i >= 0; i--) {\n    if (parts[i] === 'node_modules') continue;\n    var dir = path.join.apply(path, parts.slice(0, i + 1).concat(['node_modules']));\n\n    if (!parts[0].match(/([A-Za-z]:)/)) {\n      dir = '/' + dir;\n    }\n\n    dirs.push(dir);\n  }\n\n  return dirs;\n}\n\nfunction find_shims_in_package(pkgJson, cur_path, shims, browser) {\n  try {\n    var info = JSON.parse(pkgJson);\n  } catch (err) {\n    err.message = pkgJson + ' : ' + err.message;\n    throw err;\n  }\n\n  var replacements = getReplacements(info, browser); // no replacements, skip shims\n\n  if (!replacements) {\n    return;\n  } // if browser mapping is a string\n  // then it just replaces the main entry point\n\n\n  if (typeof replacements === 'string') {\n    var key = path.resolve(cur_path, info.main || 'index.js');\n    shims[key] = path.resolve(cur_path, replacements);\n    return;\n  } // http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders\n\n\n  Object.keys(replacements).forEach(function (key) {\n    var val;\n\n    if (replacements[key] === false) {\n      val = path.normalize(__dirname + '/empty.js');\n    } else {\n      val = replacements[key]; // if target is a relative path, then resolve\n      // otherwise we assume target is a module\n\n      if (val[0] === '.') {\n        val = path.resolve(cur_path, val);\n      }\n    }\n\n    if (key[0] === '/' || key[0] === '.') {\n      // if begins with / ../ or ./ then we must resolve to a full path\n      key = path.resolve(cur_path, key);\n    }\n\n    shims[key] = val;\n  });\n  ['.js', '.json'].forEach(function (ext) {\n    Object.keys(shims).forEach(function (key) {\n      if (!shims[key + ext]) {\n        shims[key + ext] = shims[key];\n      }\n    });\n  });\n} // paths is mutated\n// load shims from first package.json file found\n\n\nfunction load_shims(paths, browser, cb) {\n  // identify if our file should be replaced per the browser field\n  // original filename|id -> replacement\n  var shims = Object.create(null);\n\n  (function next() {\n    var cur_path = paths.shift();\n\n    if (!cur_path) {\n      return cb(null, shims);\n    }\n\n    var pkg_path = path.join(cur_path, 'package.json');\n    fs.readFile(pkg_path, 'utf8', function (err, data) {\n      if (err) {\n        // ignore paths we can't open\n        // avoids an exists check\n        if (err.code === 'ENOENT') {\n          return next();\n        }\n\n        return cb(err);\n      }\n\n      try {\n        find_shims_in_package(data, cur_path, shims, browser);\n        return cb(null, shims);\n      } catch (err) {\n        return cb(err);\n      }\n    });\n  })();\n}\n\n; // paths is mutated\n// synchronously load shims from first package.json file found\n\nfunction load_shims_sync(paths, browser) {\n  // identify if our file should be replaced per the browser field\n  // original filename|id -> replacement\n  var shims = Object.create(null);\n  var cur_path;\n\n  while (cur_path = paths.shift()) {\n    var pkg_path = path.join(cur_path, 'package.json');\n\n    try {\n      var data = fs.readFileSync(pkg_path, 'utf8');\n      find_shims_in_package(data, cur_path, shims, browser);\n      return shims;\n    } catch (err) {\n      // ignore paths we can't open\n      // avoids an exists check\n      if (err.code === 'ENOENT') {\n        continue;\n      }\n\n      throw err;\n    }\n  }\n\n  return shims;\n}\n\nfunction build_resolve_opts(opts, base) {\n  var packageFilter = opts.packageFilter;\n  var browser = normalizeBrowserFieldName(opts.browser);\n  opts.basedir = base;\n\n  opts.packageFilter = function (info, pkgdir) {\n    if (packageFilter) info = packageFilter(info, pkgdir);\n    var replacements = getReplacements(info, browser); // no browser field, keep info unchanged\n\n    if (!replacements) {\n      return info;\n    }\n\n    info[browser] = replacements; // replace main\n\n    if (typeof replacements === 'string') {\n      info.main = replacements;\n      return info;\n    }\n\n    var replace_main = replacements[info.main || './index.js'] || replacements['./' + info.main || './index.js'];\n    info.main = replace_main || info.main;\n    return info;\n  };\n\n  var pathFilter = opts.pathFilter;\n\n  opts.pathFilter = function (info, resvPath, relativePath) {\n    if (relativePath[0] != '.') {\n      relativePath = './' + relativePath;\n    }\n\n    var mappedPath;\n\n    if (pathFilter) {\n      mappedPath = pathFilter.apply(this, arguments);\n    }\n\n    if (mappedPath) {\n      return mappedPath;\n    }\n\n    var replacements = info[browser];\n\n    if (!replacements) {\n      return;\n    }\n\n    mappedPath = replacements[relativePath];\n\n    if (!mappedPath && path.extname(relativePath) === '') {\n      mappedPath = replacements[relativePath + '.js'];\n\n      if (!mappedPath) {\n        mappedPath = replacements[relativePath + '.json'];\n      }\n    }\n\n    return mappedPath;\n  };\n\n  return opts;\n}\n\nfunction resolve(id, opts, cb) {\n  // opts.filename\n  // opts.paths\n  // opts.modules\n  // opts.packageFilter\n  opts = opts || {};\n  opts.filename = opts.filename || '';\n  var base = path.dirname(opts.filename);\n\n  if (opts.basedir) {\n    base = opts.basedir;\n  }\n\n  var paths = nodeModulesPaths(base);\n\n  if (opts.paths) {\n    paths.push.apply(paths, opts.paths);\n  }\n\n  paths = paths.map(function (p) {\n    return path.dirname(p);\n  }); // we must always load shims because the browser field could shim out a module\n\n  load_shims(paths, opts.browser, function (err, shims) {\n    if (err) {\n      return cb(err);\n    }\n\n    var resid = path.resolve(opts.basedir || path.dirname(opts.filename), id);\n\n    if (shims[id] || shims[resid]) {\n      var xid = shims[id] ? id : resid; // if the shim was is an absolute path, it was fully resolved\n\n      if (shims[xid][0] === '/') {\n        return resv(shims[xid], build_resolve_opts(opts, base), function (err, full, pkg) {\n          cb(null, full, pkg);\n        });\n      } // module -> alt-module shims\n\n\n      id = shims[xid];\n    }\n\n    var modules = opts.modules || Object.create(null);\n    var shim_path = modules[id];\n\n    if (shim_path) {\n      return cb(null, shim_path);\n    } // our browser field resolver\n    // if browser field is an object tho?\n\n\n    var full = resv(id, build_resolve_opts(opts, base), function (err, full, pkg) {\n      if (err) {\n        return cb(err);\n      }\n\n      var resolved = shims ? shims[full] || full : full;\n      cb(null, resolved, pkg);\n    });\n  });\n}\n\n;\n\nresolve.sync = function (id, opts) {\n  // opts.filename\n  // opts.paths\n  // opts.modules\n  // opts.packageFilter\n  opts = opts || {};\n  opts.filename = opts.filename || '';\n  var base = path.dirname(opts.filename);\n\n  if (opts.basedir) {\n    base = opts.basedir;\n  }\n\n  var paths = nodeModulesPaths(base);\n\n  if (opts.paths) {\n    paths.push.apply(paths, opts.paths);\n  }\n\n  paths = paths.map(function (p) {\n    return path.dirname(p);\n  }); // we must always load shims because the browser field could shim out a module\n\n  var shims = load_shims_sync(paths, opts.browser);\n  var resid = path.resolve(opts.basedir || path.dirname(opts.filename), id);\n\n  if (shims[id] || shims[resid]) {\n    var xid = shims[id] ? id : resid; // if the shim was is an absolute path, it was fully resolved\n\n    if (shims[xid][0] === '/') {\n      return resv.sync(shims[xid], build_resolve_opts(opts, base));\n    } // module -> alt-module shims\n\n\n    id = shims[xid];\n  }\n\n  var modules = opts.modules || Object.create(null);\n  var shim_path = modules[id];\n\n  if (shim_path) {\n    return shim_path;\n  } // our browser field resolver\n  // if browser field is an object tho?\n\n\n  var full = resv.sync(id, build_resolve_opts(opts, base));\n  return shims ? shims[full] || full : full;\n};\n\nfunction normalizeBrowserFieldName(browser) {\n  return browser || 'browser';\n}\n\nfunction getReplacements(info, browser) {\n  browser = normalizeBrowserFieldName(browser);\n  var replacements = info[browser] || info.browser; // support legacy browserify field for easier migration from legacy\n  // many packages used this field historically\n\n  if (typeof info.browserify === 'string' && !replacements) {\n    replacements = info.browserify;\n  }\n\n  return replacements;\n}\n\nmodule.exports = resolve;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/browser-resolve/index.js"],"names":["fs","require","path","resv","nodeModulesPaths","start","cb","splitRe","process","platform","parts","split","dirs","i","length","dir","join","apply","slice","concat","match","push","find_shims_in_package","pkgJson","cur_path","shims","browser","info","JSON","parse","err","message","replacements","getReplacements","key","resolve","main","Object","keys","forEach","val","normalize","__dirname","ext","load_shims","paths","create","next","shift","pkg_path","readFile","data","code","load_shims_sync","readFileSync","build_resolve_opts","opts","base","packageFilter","normalizeBrowserFieldName","basedir","pkgdir","replace_main","pathFilter","resvPath","relativePath","mappedPath","arguments","extname","id","filename","dirname","map","p","resid","xid","full","pkg","modules","shim_path","resolved","sync","browserify","module","exports"],"mappings":"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","sourcesContent":["// builtin\nvar fs = require('fs');\nvar path = require('path');\n\n// vendor\nvar resv = require('resolve');\n\n// given a path, create an array of node_module paths for it\n// borrowed from substack/resolve\nfunction nodeModulesPaths (start, cb) {\n    var splitRe = process.platform === 'win32' ? /[\\/\\\\]/ : /\\/+/;\n    var parts = start.split(splitRe);\n\n    var dirs = [];\n    for (var i = parts.length - 1; i >= 0; i--) {\n        if (parts[i] === 'node_modules') continue;\n        var dir = path.join.apply(\n            path, parts.slice(0, i + 1).concat(['node_modules'])\n        );\n        if (!parts[0].match(/([A-Za-z]:)/)) {\n            dir = '/' + dir;\n        }\n        dirs.push(dir);\n    }\n    return dirs;\n}\n\nfunction find_shims_in_package(pkgJson, cur_path, shims, browser) {\n    try {\n        var info = JSON.parse(pkgJson);\n    }\n    catch (err) {\n        err.message = pkgJson + ' : ' + err.message\n        throw err;\n    }\n\n    var replacements = getReplacements(info, browser);\n\n    // no replacements, skip shims\n    if (!replacements) {\n        return;\n    }\n\n    // if browser mapping is a string\n    // then it just replaces the main entry point\n    if (typeof replacements === 'string') {\n        var key = path.resolve(cur_path, info.main || 'index.js');\n        shims[key] = path.resolve(cur_path, replacements);\n        return;\n    }\n\n    // http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders\n    Object.keys(replacements).forEach(function(key) {\n        var val;\n        if (replacements[key] === false) {\n            val = path.normalize(__dirname + '/empty.js');\n        }\n        else {\n            val = replacements[key];\n            // if target is a relative path, then resolve\n            // otherwise we assume target is a module\n            if (val[0] === '.') {\n                val = path.resolve(cur_path, val);\n            }\n        }\n\n        if (key[0] === '/' || key[0] === '.') {\n            // if begins with / ../ or ./ then we must resolve to a full path\n            key = path.resolve(cur_path, key);\n        }\n        shims[key] = val;\n    });\n\n    [ '.js', '.json' ].forEach(function (ext) {\n        Object.keys(shims).forEach(function (key) {\n            if (!shims[key + ext]) {\n                shims[key + ext] = shims[key];\n            }\n        });\n    });\n}\n\n// paths is mutated\n// load shims from first package.json file found\nfunction load_shims(paths, browser, cb) {\n    // identify if our file should be replaced per the browser field\n    // original filename|id -> replacement\n    var shims = Object.create(null);\n\n    (function next() {\n        var cur_path = paths.shift();\n        if (!cur_path) {\n            return cb(null, shims);\n        }\n\n        var pkg_path = path.join(cur_path, 'package.json');\n\n        fs.readFile(pkg_path, 'utf8', function(err, data) {\n            if (err) {\n                // ignore paths we can't open\n                // avoids an exists check\n                if (err.code === 'ENOENT') {\n                    return next();\n                }\n\n                return cb(err);\n            }\n            try {\n                find_shims_in_package(data, cur_path, shims, browser);\n                return cb(null, shims);\n            }\n            catch (err) {\n                return cb(err);\n            }\n        });\n    })();\n};\n\n// paths is mutated\n// synchronously load shims from first package.json file found\nfunction load_shims_sync(paths, browser) {\n    // identify if our file should be replaced per the browser field\n    // original filename|id -> replacement\n    var shims = Object.create(null);\n    var cur_path;\n\n    while (cur_path = paths.shift()) {\n        var pkg_path = path.join(cur_path, 'package.json');\n\n        try {\n            var data = fs.readFileSync(pkg_path, 'utf8');\n            find_shims_in_package(data, cur_path, shims, browser);\n            return shims;\n        }\n        catch (err) {\n            // ignore paths we can't open\n            // avoids an exists check\n            if (err.code === 'ENOENT') {\n                continue;\n            }\n\n            throw err;\n        }\n    }\n    return shims;\n}\n\nfunction build_resolve_opts(opts, base) {\n    var packageFilter = opts.packageFilter;\n    var browser = normalizeBrowserFieldName(opts.browser)\n\n    opts.basedir = base;\n    opts.packageFilter = function (info, pkgdir) {\n        if (packageFilter) info = packageFilter(info, pkgdir);\n\n        var replacements = getReplacements(info, browser);\n\n        // no browser field, keep info unchanged\n        if (!replacements) {\n            return info;\n        }\n\n        info[browser] = replacements;\n\n        // replace main\n        if (typeof replacements === 'string') {\n            info.main = replacements;\n            return info;\n        }\n\n        var replace_main = replacements[info.main || './index.js'] ||\n            replacements['./' + info.main || './index.js'];\n\n        info.main = replace_main || info.main;\n        return info;\n    };\n\n    var pathFilter = opts.pathFilter;\n    opts.pathFilter = function(info, resvPath, relativePath) {\n        if (relativePath[0] != '.') {\n            relativePath = './' + relativePath;\n        }\n        var mappedPath;\n        if (pathFilter) {\n            mappedPath = pathFilter.apply(this, arguments);\n        }\n        if (mappedPath) {\n            return mappedPath;\n        }\n\n        var replacements = info[browser];\n        if (!replacements) {\n            return;\n        }\n\n        mappedPath = replacements[relativePath];\n        if (!mappedPath && path.extname(relativePath) === '') {\n            mappedPath = replacements[relativePath + '.js'];\n            if (!mappedPath) {\n                mappedPath = replacements[relativePath + '.json'];\n            }\n        }\n        return mappedPath;\n    };\n\n    return opts;\n}\n\nfunction resolve(id, opts, cb) {\n\n    // opts.filename\n    // opts.paths\n    // opts.modules\n    // opts.packageFilter\n\n    opts = opts || {};\n    opts.filename = opts.filename || '';\n\n    var base = path.dirname(opts.filename);\n\n    if (opts.basedir) {\n        base = opts.basedir;\n    }\n\n    var paths = nodeModulesPaths(base);\n\n    if (opts.paths) {\n        paths.push.apply(paths, opts.paths);\n    }\n\n    paths = paths.map(function(p) {\n        return path.dirname(p);\n    });\n\n    // we must always load shims because the browser field could shim out a module\n    load_shims(paths, opts.browser, function(err, shims) {\n        if (err) {\n            return cb(err);\n        }\n\n        var resid = path.resolve(opts.basedir || path.dirname(opts.filename), id);\n        if (shims[id] || shims[resid]) {\n            var xid = shims[id] ? id : resid;\n            // if the shim was is an absolute path, it was fully resolved\n            if (shims[xid][0] === '/') {\n                return resv(shims[xid], build_resolve_opts(opts, base), function(err, full, pkg) {\n                    cb(null, full, pkg);\n                });\n            }\n\n            // module -> alt-module shims\n            id = shims[xid];\n        }\n\n        var modules = opts.modules || Object.create(null);\n        var shim_path = modules[id];\n        if (shim_path) {\n            return cb(null, shim_path);\n        }\n\n        // our browser field resolver\n        // if browser field is an object tho?\n        var full = resv(id, build_resolve_opts(opts, base), function(err, full, pkg) {\n            if (err) {\n                return cb(err);\n            }\n\n            var resolved = (shims) ? shims[full] || full : full;\n            cb(null, resolved, pkg);\n        });\n    });\n};\n\nresolve.sync = function (id, opts) {\n\n    // opts.filename\n    // opts.paths\n    // opts.modules\n    // opts.packageFilter\n\n    opts = opts || {};\n    opts.filename = opts.filename || '';\n\n    var base = path.dirname(opts.filename);\n\n    if (opts.basedir) {\n        base = opts.basedir;\n    }\n\n    var paths = nodeModulesPaths(base);\n\n    if (opts.paths) {\n        paths.push.apply(paths, opts.paths);\n    }\n\n    paths = paths.map(function(p) {\n        return path.dirname(p);\n    });\n\n    // we must always load shims because the browser field could shim out a module\n    var shims = load_shims_sync(paths, opts.browser);\n    var resid = path.resolve(opts.basedir || path.dirname(opts.filename), id);\n\n    if (shims[id] || shims[resid]) {\n        var xid = shims[id] ? id : resid;\n        // if the shim was is an absolute path, it was fully resolved\n        if (shims[xid][0] === '/') {\n            return resv.sync(shims[xid], build_resolve_opts(opts, base));\n        }\n\n        // module -> alt-module shims\n        id = shims[xid];\n    }\n\n    var modules = opts.modules || Object.create(null);\n    var shim_path = modules[id];\n    if (shim_path) {\n        return shim_path;\n    }\n\n    // our browser field resolver\n    // if browser field is an object tho?\n    var full = resv.sync(id, build_resolve_opts(opts, base));\n\n    return (shims) ? shims[full] || full : full;\n};\n\nfunction normalizeBrowserFieldName(browser) {\n    return browser || 'browser';\n}\n\nfunction getReplacements(info, browser) {\n    browser = normalizeBrowserFieldName(browser);\n    var replacements = info[browser] || info.browser;\n\n    // support legacy browserify field for easier migration from legacy\n    // many packages used this field historically\n    if (typeof info.browserify === 'string' && !replacements) {\n        replacements = info.browserify;\n    }\n\n    return replacements;\n}\n\nmodule.exports = resolve;\n"]},"metadata":{},"sourceType":"script"}