{"ast":null,"code":"// Reserved word lists for various dialects of the language\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n}; // And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\nvar keywordRelationalOperator = /^in(stanceof)?$/; // ## Character categories\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7b9\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null; // These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n// eslint-disable-next-line comma-spacing\n\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 190, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 26, 230, 43, 117, 63, 32, 0, 257, 0, 11, 39, 8, 0, 22, 0, 12, 39, 3, 3, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 68, 12, 0, 67, 12, 65, 1, 31, 6129, 15, 754, 9486, 286, 82, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541]; // eslint-disable-next-line comma-spacing\n\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 280, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239]; // This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\n\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n\n    if (pos > code) {\n      return false;\n    }\n\n    pos += set[i + 1];\n\n    if (pos >= code) {\n      return true;\n    }\n  }\n} // Test whether a given character code starts an identifier.\n\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) {\n    return code === 36;\n  }\n\n  if (code < 91) {\n    return true;\n  }\n\n  if (code < 97) {\n    return code === 95;\n  }\n\n  if (code < 123) {\n    return true;\n  }\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  if (astral === false) {\n    return false;\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n} // Test whether a given character is part of an identifier.\n\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) {\n    return code === 36;\n  }\n\n  if (code < 58) {\n    return true;\n  }\n\n  if (code < 65) {\n    return false;\n  }\n\n  if (code < 91) {\n    return true;\n  }\n\n  if (code < 97) {\n    return code === 95;\n  }\n\n  if (code < 123) {\n    return true;\n  }\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  if (astral === false) {\n    return false;\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n} // ## Token types\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\n\nvar TokenType = function TokenType(label, conf) {\n  if (conf === void 0) conf = {};\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {\n    beforeExpr: true,\n    binop: prec\n  });\n}\n\nvar beforeExpr = {\n  beforeExpr: true\n};\nvar startsExpr = {\n  startsExpr: true\n}; // Map keyword names to token types.\n\nvar keywords$1 = {}; // Succinct definitions of keyword token types\n\nfunction kw(name, options) {\n  if (options === void 0) options = {};\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options);\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n  eq: new TokenType(\"=\", {\n    beforeExpr: true,\n    isAssign: true\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr: true,\n    isAssign: true\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix: true,\n    postfix: true,\n    startsExpr: true\n  }),\n  prefix: new TokenType(\"!/~\", {\n    beforeExpr: true,\n    prefix: true,\n    startsExpr: true\n  }),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr: true,\n    binop: 9,\n    prefix: true,\n    startsExpr: true\n  }),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {\n    beforeExpr: true\n  }),\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {\n    isLoop: true,\n    beforeExpr: true\n  }),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {\n    isLoop: true\n  }),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {\n    isLoop: true\n  }),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {\n    beforeExpr: true,\n    startsExpr: true\n  }),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\"),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {\n    beforeExpr: true,\n    binop: 7\n  }),\n  _instanceof: kw(\"instanceof\", {\n    beforeExpr: true,\n    binop: 7\n  }),\n  _typeof: kw(\"typeof\", {\n    beforeExpr: true,\n    prefix: true,\n    startsExpr: true\n  }),\n  _void: kw(\"void\", {\n    beforeExpr: true,\n    prefix: true,\n    startsExpr: true\n  }),\n  _delete: kw(\"delete\", {\n    beforeExpr: true,\n    prefix: true,\n    startsExpr: true\n  })\n}; // Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString; // Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName);\n}\n\nvar isArray = Array.isArray || function (obj) {\n  return toString.call(obj) === \"[object Array]\";\n}; // These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset(n) {\n  return new Position(this.line, this.column + n);\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n\n  if (p.sourceFile !== null) {\n    this.source = p.sourceFile;\n  }\n}; // The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n} // A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features. The default is 7.\n  ecmaVersion: 7,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n}; // Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions) {\n    options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];\n  }\n\n  if (options.ecmaVersion >= 2015) {\n    options.ecmaVersion -= 2009;\n  }\n\n  if (options.allowReserved == null) {\n    options.allowReserved = options.ecmaVersion < 5;\n  }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n\n    options.onToken = function (token) {\n      return tokens.push(token);\n    };\n  }\n\n  if (isArray(options.onComment)) {\n    options.onComment = pushComment(options, options.onComment);\n  }\n\n  return options;\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n\n    if (options.locations) {\n      comment.loc = new SourceLocation(this, startLoc, endLoc);\n    }\n\n    if (options.ranges) {\n      comment.range = [start, end];\n    }\n\n    array.push(comment);\n  };\n} // Registered plugins\n\n\nvar plugins = {};\n\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\");\n}\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n  var reserved = \"\";\n\n  if (!options.allowReserved) {\n    for (var v = options.ecmaVersion;; v--) {\n      if (reserved = reservedWords[v]) {\n        break;\n      }\n    }\n\n    if (options.sourceType === \"module\") {\n      reserved += \" await\";\n    }\n  }\n\n  this.reservedWords = keywordRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = keywordRegexp(reservedStrict);\n  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input); // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n\n  this.containsEsc = false; // Load plugins\n\n  this.loadPlugins(options.plugins); // Set up token state\n  // The current position of the tokenizer in the input.\n\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  } // Properties of the current token:\n  // Its type\n\n\n  this.type = types.eof; // For tokens that include more information than their type, the value\n\n  this.value = null; // Its start and end offset\n\n  this.start = this.end = this.pos; // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n\n  this.startLoc = this.endLoc = this.curPosition(); // Position information for the previous token\n\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos; // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n\n  this.context = this.initialContext();\n  this.exprAllowed = true; // Figure out if it's a module code.\n\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos); // Used to signify the start of a potential arrow function\n\n  this.potentialArrowAt = -1; // Flags to track whether we are in a function, a generator, an async function.\n\n  this.inFunction = this.inGenerator = this.inAsync = false; // Positions to delayed-check that yield/await does not exist in default parameters.\n\n  this.yieldPos = this.awaitPos = 0; // Labels in scope.\n\n  this.labels = []; // If enabled, skip leading hashbang line.\n\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\") {\n    this.skipLineComment(2);\n  } // Scope tracking for duplicate variable names (see scope.js)\n\n\n  this.scopeStack = [];\n  this.enterFunctionScope(); // For RegExp validation\n\n  this.regexpState = null;\n}; // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n\n\nParser.prototype.isKeyword = function isKeyword(word) {\n  return this.keywords.test(word);\n};\n\nParser.prototype.isReservedWord = function isReservedWord(word) {\n  return this.reservedWords.test(word);\n};\n\nParser.prototype.extend = function extend(name, f) {\n  this[name] = f(this[name]);\n};\n\nParser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n  var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = plugins[name];\n\n    if (!plugin) {\n      throw new Error(\"Plugin '\" + name + \"' not found\");\n    }\n\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nParser.prototype.parse = function parse() {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node);\n};\n\nvar pp = Parser.prototype; // ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\"|;)/;\n\npp.strictDirective = function (start) {\n  var this$1 = this;\n\n  for (;;) {\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this$1.input)[0].length;\n    var match = literal.exec(this$1.input.slice(start));\n\n    if (!match) {\n      return false;\n    }\n\n    if ((match[1] || match[2]) === \"use strict\") {\n      return true;\n    }\n\n    start += match[0].length;\n  }\n}; // Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\n\npp.eat = function (type) {\n  if (this.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n}; // Tests whether parsed token is a contextual keyword.\n\n\npp.isContextual = function (name) {\n  return this.type === types.name && this.value === name && !this.containsEsc;\n}; // Consumes contextual keyword if possible.\n\n\npp.eatContextual = function (name) {\n  if (!this.isContextual(name)) {\n    return false;\n  }\n\n  this.next();\n  return true;\n}; // Asserts that following token is given contextual keyword.\n\n\npp.expectContextual = function (name) {\n  if (!this.eatContextual(name)) {\n    this.unexpected();\n  }\n}; // Test whether a semicolon can be inserted at the current position.\n\n\npp.canInsertSemicolon = function () {\n  return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n\npp.insertSemicolon = function () {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon) {\n      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    }\n\n    return true;\n  }\n}; // Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\n\npp.semicolon = function () {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) {\n    this.unexpected();\n  }\n};\n\npp.afterTrailingComma = function (tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma) {\n      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    }\n\n    if (!notNext) {\n      this.next();\n    }\n\n    return true;\n  }\n}; // Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\n\npp.expect = function (type) {\n  this.eat(type) || this.unexpected();\n}; // Raise an unexpected token error.\n\n\npp.unexpected = function (pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;\n}\n\npp.checkPatternErrors = function (refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) {\n    return;\n  }\n\n  if (refDestructuringErrors.trailingComma > -1) {\n    this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\");\n  }\n\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n\n  if (parens > -1) {\n    this.raiseRecoverable(parens, \"Parenthesized pattern\");\n  }\n};\n\npp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) {\n    return false;\n  }\n\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n\n  if (!andThrow) {\n    return shorthandAssign >= 0 || doubleProto >= 0;\n  }\n\n  if (shorthandAssign >= 0) {\n    this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\");\n  }\n\n  if (doubleProto >= 0) {\n    this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\");\n  }\n};\n\npp.checkYieldAwaitInDefaultParams = function () {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {\n    this.raise(this.yieldPos, \"Yield expression cannot be a default value\");\n  }\n\n  if (this.awaitPos) {\n    this.raise(this.awaitPos, \"Await expression cannot be a default value\");\n  }\n};\n\npp.isSimpleAssignTarget = function (expr) {\n  if (expr.type === \"ParenthesizedExpression\") {\n    return this.isSimpleAssignTarget(expr.expression);\n  }\n\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\";\n};\n\nvar pp$1 = Parser.prototype; // ### Statement parsing\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function (node) {\n  var this$1 = this;\n  var exports = {};\n\n  if (!node.body) {\n    node.body = [];\n  }\n\n  while (this.type !== types.eof) {\n    var stmt = this$1.parseStatement(true, true, exports);\n    node.body.push(stmt);\n  }\n\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n\n  return this.finishNode(node, \"Program\");\n};\n\nvar loopLabel = {\n  kind: \"loop\"\n};\nvar switchLabel = {\n  kind: \"switch\"\n};\n\npp$1.isLet = function () {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) {\n    return false;\n  }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length,\n      nextCh = this.input.charCodeAt(next);\n\n  if (nextCh === 91 || nextCh === 123) {\n    return true;\n  } // '{' and '['\n\n\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) {\n      ++pos;\n    }\n\n    var ident = this.input.slice(next, pos);\n\n    if (!keywordRelationalOperator.test(ident)) {\n      return true;\n    }\n  }\n\n  return false;\n}; // check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\n\n\npp$1.isAsyncFunction = function () {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\")) {\n    return false;\n  }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === \"function\" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));\n}; // Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\n\npp$1.parseStatement = function (declaration, topLevel, exports) {\n  var starttype = this.type,\n      node = this.startNode(),\n      kind;\n\n  if (this.isLet()) {\n    starttype = types._var;\n    kind = \"let\";\n  } // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n\n  switch (starttype) {\n    case types._break:\n    case types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n\n    case types._debugger:\n      return this.parseDebuggerStatement(node);\n\n    case types._do:\n      return this.parseDoStatement(node);\n\n    case types._for:\n      return this.parseForStatement(node);\n\n    case types._function:\n      if (!declaration && this.options.ecmaVersion >= 6) {\n        this.unexpected();\n      }\n\n      return this.parseFunctionStatement(node, false);\n\n    case types._class:\n      if (!declaration) {\n        this.unexpected();\n      }\n\n      return this.parseClass(node, true);\n\n    case types._if:\n      return this.parseIfStatement(node);\n\n    case types._return:\n      return this.parseReturnStatement(node);\n\n    case types._switch:\n      return this.parseSwitchStatement(node);\n\n    case types._throw:\n      return this.parseThrowStatement(node);\n\n    case types._try:\n      return this.parseTryStatement(node);\n\n    case types._const:\n    case types._var:\n      kind = kind || this.value;\n\n      if (!declaration && kind !== \"var\") {\n        this.unexpected();\n      }\n\n      return this.parseVarStatement(node, kind);\n\n    case types._while:\n      return this.parseWhileStatement(node);\n\n    case types._with:\n      return this.parseWithStatement(node);\n\n    case types.braceL:\n      return this.parseBlock();\n\n    case types.semi:\n      return this.parseEmptyStatement(node);\n\n    case types._export:\n    case types._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) {\n          this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n        }\n\n        if (!this.inModule) {\n          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n        }\n      }\n\n      return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n\n    default:\n      if (this.isAsyncFunction()) {\n        if (!declaration) {\n          this.unexpected();\n        }\n\n        this.next();\n        return this.parseFunctionStatement(node, true);\n      }\n\n      var maybeName = this.value,\n          expr = this.parseExpression();\n\n      if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n        return this.parseLabeledStatement(node, maybeName, expr);\n      } else {\n        return this.parseExpressionStatement(node, expr);\n      }\n\n  }\n};\n\npp$1.parseBreakContinueStatement = function (node, keyword) {\n  var this$1 = this;\n  var isBreak = keyword === \"break\";\n  this.next();\n\n  if (this.eat(types.semi) || this.insertSemicolon()) {\n    node.label = null;\n  } else if (this.type !== types.name) {\n    this.unexpected();\n  } else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  } // Verify that there is an actual destination to break or\n  // continue to.\n\n\n  var i = 0;\n\n  for (; i < this.labels.length; ++i) {\n    var lab = this$1.labels[i];\n\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) {\n        break;\n      }\n\n      if (node.label && isBreak) {\n        break;\n      }\n    }\n  }\n\n  if (i === this.labels.length) {\n    this.raise(node.start, \"Unsyntactic \" + keyword);\n  }\n\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp$1.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp$1.parseDoStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n\n  if (this.options.ecmaVersion >= 6) {\n    this.eat(types.semi);\n  } else {\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"DoWhileStatement\");\n}; // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\n\npp$1.parseForStatement = function (node) {\n  this.next();\n  var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual(\"await\") ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterLexicalScope();\n  this.expect(types.parenL);\n\n  if (this.type === types.semi) {\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, null);\n  }\n\n  var isLet = this.isLet();\n\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(),\n        kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n\n    if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && init$1.declarations.length === 1 && !(kind !== \"var\" && init$1.declarations[0].init)) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) {\n            this.unexpected(awaitAt);\n          }\n        } else {\n          node.await = awaitAt > -1;\n        }\n      }\n\n      return this.parseForIn(node, init$1);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init$1);\n  }\n\n  var refDestructuringErrors = new DestructuringErrors();\n  var init = this.parseExpression(true, refDestructuringErrors);\n\n  if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n      } else {\n        node.await = awaitAt > -1;\n      }\n    }\n\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init);\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n\n  if (awaitAt > -1) {\n    this.unexpected(awaitAt);\n  }\n\n  return this.parseFor(node, init);\n};\n\npp$1.parseFunctionStatement = function (node, isAsync) {\n  this.next();\n  return this.parseFunction(node, true, false, isAsync);\n};\n\npp$1.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression(); // allow function declarations in branches, but only in non-strict mode\n\n  node.consequent = this.parseStatement(!this.strict && this.type === types._function);\n  node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.type === types._function) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp$1.parseReturnStatement = function (node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction) {\n    this.raise(this.start, \"'return' outside of function\");\n  }\n\n  this.next(); // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) {\n    node.argument = null;\n  } else {\n    node.argument = this.parseExpression();\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp$1.parseSwitchStatement = function (node) {\n  var this$1 = this;\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterLexicalScope(); // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this$1.type === types._case || this$1.type === types._default) {\n      var isCase = this$1.type === types._case;\n\n      if (cur) {\n        this$1.finishNode(cur, \"SwitchCase\");\n      }\n\n      node.cases.push(cur = this$1.startNode());\n      cur.consequent = [];\n      this$1.next();\n\n      if (isCase) {\n        cur.test = this$1.parseExpression();\n      } else {\n        if (sawDefault) {\n          this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\");\n        }\n\n        sawDefault = true;\n        cur.test = null;\n      }\n\n      this$1.expect(types.colon);\n    } else {\n      if (!cur) {\n        this$1.unexpected();\n      }\n\n      cur.consequent.push(this$1.parseStatement(true));\n    }\n  }\n\n  this.exitLexicalScope();\n\n  if (cur) {\n    this.finishNode(cur, \"SwitchCase\");\n  }\n\n  this.next(); // Closing brace\n\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp$1.parseThrowStatement = function (node) {\n  this.next();\n\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {\n    this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  }\n\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n}; // Reused empty array added for node fields that are always empty.\n\n\nvar empty = [];\n\npp$1.parseTryStatement = function (node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      this.enterLexicalScope();\n      this.checkLVal(clause.param, \"let\");\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) {\n        this.unexpected();\n      }\n\n      clause.param = null;\n      this.enterLexicalScope();\n    }\n\n    clause.body = this.parseBlock(false);\n    this.exitLexicalScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n  if (!node.handler && !node.finalizer) {\n    this.raise(node.start, \"Missing catch or finally clause\");\n  }\n\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp$1.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp$1.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp$1.parseWithStatement = function (node) {\n  if (this.strict) {\n    this.raise(this.start, \"'with' in strict mode\");\n  }\n\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp$1.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp$1.parseLabeledStatement = function (node, maybeName, expr) {\n  var this$1 = this;\n\n  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1) {\n    var label = list[i$1];\n\n    if (label.name === maybeName) {\n      this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n    }\n  }\n\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this$1.labels[i];\n\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this$1.start;\n      label$1.kind = kind;\n    } else {\n      break;\n    }\n  }\n\n  this.labels.push({\n    name: maybeName,\n    kind: kind,\n    statementStart: this.start\n  });\n  node.body = this.parseStatement(true);\n\n  if (node.body.type === \"ClassDeclaration\" || node.body.type === \"VariableDeclaration\" && node.body.kind !== \"var\" || node.body.type === \"FunctionDeclaration\" && (this.strict || node.body.generator || node.body.async)) {\n    this.raiseRecoverable(node.body.start, \"Invalid labeled declaration\");\n  }\n\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp$1.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n}; // Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\n\npp$1.parseBlock = function (createNewLexicalScope) {\n  var this$1 = this;\n  if (createNewLexicalScope === void 0) createNewLexicalScope = true;\n  var node = this.startNode();\n  node.body = [];\n  this.expect(types.braceL);\n\n  if (createNewLexicalScope) {\n    this.enterLexicalScope();\n  }\n\n  while (!this.eat(types.braceR)) {\n    var stmt = this$1.parseStatement(true);\n    node.body.push(stmt);\n  }\n\n  if (createNewLexicalScope) {\n    this.exitLexicalScope();\n  }\n\n  return this.finishNode(node, \"BlockStatement\");\n}; // Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\n\npp$1.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n}; // Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\n\npp$1.parseForIn = function (node, init) {\n  var type = this.type === types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n\n  if (type === \"ForInStatement\") {\n    if (init.type === \"AssignmentPattern\" || init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (this.strict || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, \"Invalid assignment in for-in loop head\");\n    }\n  }\n\n  node.left = init;\n  node.right = type === \"ForInStatement\" ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type);\n}; // Parse a list of variable declarations.\n\n\npp$1.parseVar = function (node, isFor, kind) {\n  var this$1 = this;\n  node.declarations = [];\n  node.kind = kind;\n\n  for (;;) {\n    var decl = this$1.startNode();\n    this$1.parseVarId(decl, kind);\n\n    if (this$1.eat(types.eq)) {\n      decl.init = this$1.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this$1.type === types._in || this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\"))) {\n      this$1.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this$1.type === types._in || this$1.isContextual(\"of\")))) {\n      this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n\n    if (!this$1.eat(types.comma)) {\n      break;\n    }\n  }\n\n  return node;\n};\n\npp$1.parseVarId = function (decl, kind) {\n  decl.id = this.parseBindingAtom(kind);\n  this.checkLVal(decl.id, kind, false);\n}; // Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\n\npp$1.parseFunction = function (node, isStatement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {\n    node.generator = this.eat(types.star);\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  if (isStatement) {\n    node.id = isStatement === \"nullableID\" && this.type !== types.name ? null : this.parseIdent();\n\n    if (node.id) {\n      this.checkLVal(node.id, this.inModule && !this.inFunction ? \"let\" : \"var\");\n    }\n  }\n\n  var oldInGen = this.inGenerator,\n      oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos,\n      oldAwaitPos = this.awaitPos,\n      oldInFunc = this.inFunction;\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  if (!isStatement) {\n    node.id = this.type === types.name ? this.parseIdent() : null;\n  }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp$1.parseFunctionParams = function (node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n}; // Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\n\npp$1.parseClass = function (node, isStatement) {\n  var this$1 = this;\n  this.next();\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    var member = this$1.parseClassMember(classBody);\n\n    if (member && member.type === \"MethodDefinition\" && member.kind === \"constructor\") {\n      if (hadConstructor) {\n        this$1.raise(member.start, \"Duplicate constructor in the same class\");\n      }\n\n      hadConstructor = true;\n    }\n  }\n\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp$1.parseClassMember = function (classBody) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) {\n    return null;\n  }\n\n  var method = this.startNode();\n\n  var tryContextual = function (k, noLineBreak) {\n    if (noLineBreak === void 0) noLineBreak = false;\n    var start = this$1.start,\n        startLoc = this$1.startLoc;\n\n    if (!this$1.eatContextual(k)) {\n      return false;\n    }\n\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) {\n      return true;\n    }\n\n    if (method.key) {\n      this$1.unexpected();\n    }\n\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false;\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n\n  if (!method.key) {\n    this.parsePropertyName(method);\n  }\n\n  var key = method.key;\n\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") {\n      this.raise(key.start, \"Constructor can't have get/set modifier\");\n    }\n\n    if (isGenerator) {\n      this.raise(key.start, \"Constructor can't be a generator\");\n    }\n\n    if (isAsync) {\n      this.raise(key.start, \"Constructor can't be an async method\");\n    }\n\n    method.kind = \"constructor\";\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n\n  this.parseClassMethod(classBody, method, isGenerator, isAsync);\n\n  if (method.kind === \"get\" && method.value.params.length !== 0) {\n    this.raiseRecoverable(method.value.start, \"getter should have no params\");\n  }\n\n  if (method.kind === \"set\" && method.value.params.length !== 1) {\n    this.raiseRecoverable(method.value.start, \"setter should have exactly one param\");\n  }\n\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") {\n    this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\");\n  }\n\n  return method;\n};\n\npp$1.parseClassMethod = function (classBody, method, isGenerator, isAsync) {\n  method.value = this.parseMethod(isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp$1.parseClassId = function (node, isStatement) {\n  node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;\n};\n\npp$1.parseClassSuper = function (node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n}; // Parses module export declaration.\n\n\npp$1.parseExport = function (node, exports) {\n  var this$1 = this;\n  this.next(); // export * from '...'\n\n  if (this.eat(types.star)) {\n    this.expectContextual(\"from\");\n\n    if (this.type !== types.string) {\n      this.unexpected();\n    }\n\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n\n  if (this.eat(types._default)) {\n    // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      node.declaration = this.parseFunction(fNode, \"nullableID\", false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  } // export var|const|let|function|class ...\n\n\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n\n    if (node.declaration.type === \"VariableDeclaration\") {\n      this.checkVariableExport(exports, node.declaration.declarations);\n    } else {\n      this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);\n    }\n\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) {\n        this.unexpected();\n      }\n\n      node.source = this.parseExprAtom();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        var spec = list[i];\n        this$1.checkUnreserved(spec.local);\n      }\n\n      node.source = null;\n    }\n\n    this.semicolon();\n  }\n\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp$1.checkExport = function (exports, name, pos) {\n  if (!exports) {\n    return;\n  }\n\n  if (has(exports, name)) {\n    this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\");\n  }\n\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function (exports, pat) {\n  var this$1 = this;\n  var type = pat.type;\n\n  if (type === \"Identifier\") {\n    this.checkExport(exports, pat.name, pat.start);\n  } else if (type === \"ObjectPattern\") {\n    for (var i = 0, list = pat.properties; i < list.length; i += 1) {\n      var prop = list[i];\n      this$1.checkPatternExport(exports, prop);\n    }\n  } else if (type === \"ArrayPattern\") {\n    for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n      if (elt) {\n        this$1.checkPatternExport(exports, elt);\n      }\n    }\n  } else if (type === \"Property\") {\n    this.checkPatternExport(exports, pat.value);\n  } else if (type === \"AssignmentPattern\") {\n    this.checkPatternExport(exports, pat.left);\n  } else if (type === \"RestElement\") {\n    this.checkPatternExport(exports, pat.argument);\n  } else if (type === \"ParenthesizedExpression\") {\n    this.checkPatternExport(exports, pat.expression);\n  }\n};\n\npp$1.checkVariableExport = function (exports, decls) {\n  var this$1 = this;\n\n  if (!exports) {\n    return;\n  }\n\n  for (var i = 0, list = decls; i < list.length; i += 1) {\n    var decl = list[i];\n    this$1.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function () {\n  return this.type.keyword === \"var\" || this.type.keyword === \"const\" || this.type.keyword === \"class\" || this.type.keyword === \"function\" || this.isLet() || this.isAsyncFunction();\n}; // Parses a comma-separated list of module exports.\n\n\npp$1.parseExportSpecifiers = function (exports) {\n  var this$1 = this;\n  var nodes = [],\n      first = true; // export { x, y as z } [from '...']\n\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n\n      if (this$1.afterTrailingComma(types.braceR)) {\n        break;\n      }\n    } else {\n      first = false;\n    }\n\n    var node = this$1.startNode();\n    node.local = this$1.parseIdent(true);\n    node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local;\n    this$1.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this$1.finishNode(node, \"ExportSpecifier\"));\n  }\n\n  return nodes;\n}; // Parses import declaration.\n\n\npp$1.parseImport = function (node) {\n  this.next(); // import '...'\n\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n}; // Parses a comma-separated list of module imports.\n\n\npp$1.parseImportSpecifiers = function () {\n  var this$1 = this;\n  var nodes = [],\n      first = true;\n\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, \"let\");\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n\n    if (!this.eat(types.comma)) {\n      return nodes;\n    }\n  }\n\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, \"let\");\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes;\n  }\n\n  this.expect(types.braceL);\n\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n\n      if (this$1.afterTrailingComma(types.braceR)) {\n        break;\n      }\n    } else {\n      first = false;\n    }\n\n    var node$2 = this$1.startNode();\n    node$2.imported = this$1.parseIdent(true);\n\n    if (this$1.eatContextual(\"as\")) {\n      node$2.local = this$1.parseIdent();\n    } else {\n      this$1.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n\n    this$1.checkLVal(node$2.local, \"let\");\n    nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"));\n  }\n\n  return nodes;\n}; // Set `ExpressionStatement#directive` property for directive prologues.\n\n\npp$1.adaptDirectivePrologue = function (statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\n\npp$1.isDirectiveCandidate = function (statement) {\n  return statement.type === \"ExpressionStatement\" && statement.expression.type === \"Literal\" && typeof statement.expression.value === \"string\" && ( // Reject parenthesized strings.\n  this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\");\n};\n\nvar pp$2 = Parser.prototype; // Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function (node, isBinding, refDestructuringErrors) {\n  var this$1 = this;\n\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n        if (this.inAsync && node.name === \"await\") {\n          this.raise(node.start, \"Can not use 'await' as identifier inside an async function\");\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        if (refDestructuringErrors) {\n          this.checkPatternErrors(refDestructuringErrors, true);\n        }\n\n        for (var i = 0, list = node.properties; i < list.length; i += 1) {\n          var prop = list[i];\n          this$1.toAssignable(prop, isBinding); // Early error:\n          //   AssignmentRestProperty[Yield, Await] :\n          //     `...` DestructuringAssignmentTarget[Yield, Await]\n          //\n          //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n\n          if (prop.type === \"RestElement\" && (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")) {\n            this$1.raise(prop.argument.start, \"Unexpected token\");\n          }\n        }\n\n        break;\n\n      case \"Property\":\n        // AssignmentProperty has type === \"Property\"\n        if (node.kind !== \"init\") {\n          this.raise(node.key.start, \"Object pattern can't contain getter or setter\");\n        }\n\n        this.toAssignable(node.value, isBinding);\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n\n        if (refDestructuringErrors) {\n          this.checkPatternErrors(refDestructuringErrors, true);\n        }\n\n        this.toAssignableList(node.elements, isBinding);\n        break;\n\n      case \"SpreadElement\":\n        node.type = \"RestElement\";\n        this.toAssignable(node.argument, isBinding);\n\n        if (node.argument.type === \"AssignmentPattern\") {\n          this.raise(node.argument.start, \"Rest elements cannot have a default value\");\n        }\n\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isBinding);\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) {\n          break;\n        }\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n  }\n\n  return node;\n}; // Convert list of expression atoms to binding list.\n\n\npp$2.toAssignableList = function (exprList, isBinding) {\n  var this$1 = this;\n  var end = exprList.length;\n\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n\n    if (elt) {\n      this$1.toAssignable(elt, isBinding);\n    }\n  }\n\n  if (end) {\n    var last = exprList[end - 1];\n\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") {\n      this.unexpected(last.argument.start);\n    }\n  }\n\n  return exprList;\n}; // Parses spread element.\n\n\npp$2.parseSpread = function (refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp$2.parseRestBinding = function () {\n  var node = this.startNode();\n  this.next(); // RestElement inside of a function parameter must be an identifier\n\n  if (this.options.ecmaVersion === 6 && this.type !== types.name) {\n    this.unexpected();\n  }\n\n  node.argument = this.parseBindingAtom();\n  return this.finishNode(node, \"RestElement\");\n}; // Parses lvalue (assignable) atom.\n\n\npp$2.parseBindingAtom = function () {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n      case types.bracketL:\n        var node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(types.bracketR, true, true);\n        return this.finishNode(node, \"ArrayPattern\");\n\n      case types.braceL:\n        return this.parseObj(true);\n    }\n  }\n\n  return this.parseIdent();\n};\n\npp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {\n  var this$1 = this;\n  var elts = [],\n      first = true;\n\n  while (!this.eat(close)) {\n    if (first) {\n      first = false;\n    } else {\n      this$1.expect(types.comma);\n    }\n\n    if (allowEmpty && this$1.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n      break;\n    } else if (this$1.type === types.ellipsis) {\n      var rest = this$1.parseRestBinding();\n      this$1.parseBindingListItem(rest);\n      elts.push(rest);\n\n      if (this$1.type === types.comma) {\n        this$1.raise(this$1.start, \"Comma is not permitted after the rest element\");\n      }\n\n      this$1.expect(close);\n      break;\n    } else {\n      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);\n      this$1.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n\n  return elts;\n};\n\npp$2.parseBindingListItem = function (param) {\n  return param;\n}; // Parses assignment pattern around given atom if possible.\n\n\npp$2.parseMaybeDefault = function (startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {\n    return left;\n  }\n\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n}; // Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\n\npp$2.checkLVal = function (expr, bindingType, checkClashes) {\n  var this$1 = this;\n\n  switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {\n        this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n      }\n\n      if (checkClashes) {\n        if (has(checkClashes, expr.name)) {\n          this.raiseRecoverable(expr.start, \"Argument name clash\");\n        }\n\n        checkClashes[expr.name] = true;\n      }\n\n      if (bindingType && bindingType !== \"none\") {\n        if (bindingType === \"var\" && !this.canDeclareVarName(expr.name) || bindingType !== \"var\" && !this.canDeclareLexicalName(expr.name)) {\n          this.raiseRecoverable(expr.start, \"Identifier '\" + expr.name + \"' has already been declared\");\n        }\n\n        if (bindingType === \"var\") {\n          this.declareVarName(expr.name);\n        } else {\n          this.declareLexicalName(expr.name);\n        }\n      }\n\n      break;\n\n    case \"MemberExpression\":\n      if (bindingType) {\n        this.raiseRecoverable(expr.start, \"Binding member expression\");\n      }\n\n      break;\n\n    case \"ObjectPattern\":\n      for (var i = 0, list = expr.properties; i < list.length; i += 1) {\n        var prop = list[i];\n        this$1.checkLVal(prop, bindingType, checkClashes);\n      }\n\n      break;\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      this.checkLVal(expr.value, bindingType, checkClashes);\n      break;\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n        var elem = list$1[i$1];\n\n        if (elem) {\n          this$1.checkLVal(elem, bindingType, checkClashes);\n        }\n      }\n\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, bindingType, checkClashes);\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, bindingType, checkClashes);\n      break;\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, bindingType, checkClashes);\n      break;\n\n    default:\n      this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n}; // A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\nvar pp$3 = Parser.prototype; // Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function (prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\") {\n    return;\n  }\n\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {\n    return;\n  }\n\n  var key = prop.key;\n  var name;\n\n  switch (key.type) {\n    case \"Identifier\":\n      name = key.name;\n      break;\n\n    case \"Literal\":\n      name = String(key.value);\n      break;\n\n    default:\n      return;\n  }\n\n  var kind = prop.kind;\n\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) {\n          refDestructuringErrors.doubleProto = key.start;\n        } // Backwards-compat kludge. Can be removed in version 6.0\n        else {\n            this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\");\n          }\n      }\n\n      propHash.proto = true;\n    }\n\n    return;\n  }\n\n  name = \"$\" + name;\n  var other = propHash[name];\n\n  if (other) {\n    var redefinition;\n\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n\n    if (redefinition) {\n      this.raiseRecoverable(key.start, \"Redefinition of property\");\n    }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n\n  other[kind] = true;\n}; // ### Expression parsing\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\n\npp$3.parseExpression = function (noIn, refDestructuringErrors) {\n  var this$1 = this;\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n\n    while (this.eat(types.comma)) {\n      node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors));\n    }\n\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n\n  return expr;\n}; // Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\n\npp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) {\n    return this.parseYield();\n  }\n\n  var ownDestructuringErrors = false,\n      oldParenAssign = -1,\n      oldTrailingComma = -1;\n\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors();\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start,\n      startLoc = this.startLoc;\n\n  if (this.type === types.parenL || this.type === types.name) {\n    this.potentialArrowAt = this.start;\n  }\n\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n\n  if (afterLeftParse) {\n    left = afterLeftParse.call(this, left, startPos, startLoc);\n  }\n\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n\n    if (!ownDestructuringErrors) {\n      DestructuringErrors.call(refDestructuringErrors);\n    }\n\n    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else {\n    if (ownDestructuringErrors) {\n      this.checkExpressionErrors(refDestructuringErrors, true);\n    }\n  }\n\n  if (oldParenAssign > -1) {\n    refDestructuringErrors.parenthesizedAssign = oldParenAssign;\n  }\n\n  if (oldTrailingComma > -1) {\n    refDestructuringErrors.trailingComma = oldTrailingComma;\n  }\n\n  return left;\n}; // Parse a ternary conditional (`?:`) operator.\n\n\npp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n\n  if (this.checkExpressionErrors(refDestructuringErrors)) {\n    return expr;\n  }\n\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  return expr;\n}; // Start the precedence parser.\n\n\npp$3.parseExprOps = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n\n  if (this.checkExpressionErrors(refDestructuringErrors)) {\n    return expr;\n  }\n\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n}; // Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\n\npp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n\n  return left;\n};\n\npp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\");\n}; // Parse unary operators, both prefix and postfix.\n\n\npp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {\n  var this$1 = this;\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      expr;\n\n  if (this.isContextual(\"await\") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(),\n        update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n\n    if (update) {\n      this.checkLVal(node.argument);\n    } else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") {\n      this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\");\n    } else {\n      sawUnary = true;\n    }\n\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n\n    if (this.checkExpressionErrors(refDestructuringErrors)) {\n      return expr;\n    }\n\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.operator = this$1.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar)) {\n    return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false);\n  } else {\n    return expr;\n  }\n}; // Parse call, dot, and `[]`-subscript expressions.\n\n\npp$3.parseExprSubscripts = function (refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) {\n    return expr;\n  }\n\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) {\n      refDestructuringErrors.parenthesizedAssign = -1;\n    }\n\n    if (refDestructuringErrors.parenthesizedBind >= result.start) {\n      refDestructuringErrors.parenthesizedBind = -1;\n    }\n  }\n\n  return result;\n};\n\npp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  var this$1 = this;\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n\n  for (var computed = void 0;;) {\n    if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {\n      var node = this$1.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);\n      node.computed = !!computed;\n\n      if (computed) {\n        this$1.expect(types.bracketR);\n      }\n\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this$1.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors(),\n          oldYieldPos = this$1.yieldPos,\n          oldAwaitPos = this$1.awaitPos;\n      this$1.yieldPos = 0;\n      this$1.awaitPos = 0;\n      var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);\n\n      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {\n        this$1.checkPatternErrors(refDestructuringErrors, false);\n        this$1.checkYieldAwaitInDefaultParams();\n        this$1.yieldPos = oldYieldPos;\n        this$1.awaitPos = oldAwaitPos;\n        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true);\n      }\n\n      this$1.checkExpressionErrors(refDestructuringErrors, true);\n      this$1.yieldPos = oldYieldPos || this$1.yieldPos;\n      this$1.awaitPos = oldAwaitPos || this$1.awaitPos;\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      base = this$1.finishNode(node$1, \"CallExpression\");\n    } else if (this$1.type === types.backQuote) {\n      var node$2 = this$1.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this$1.parseTemplate({\n        isTagged: true\n      });\n      base = this$1.finishNode(node$2, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n}; // Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\n\npp$3.parseExprAtom = function (refDestructuringErrors) {\n  var node,\n      canBeArrow = this.potentialArrowAt === this.start;\n\n  switch (this.type) {\n    case types._super:\n      if (!this.inFunction) {\n        this.raise(this.start, \"'super' outside of function or class\");\n      }\n\n      node = this.startNode();\n      this.next(); // The `super` keyword can appear at below:\n      // SuperProperty:\n      //     super [ Expression ]\n      //     super . IdentifierName\n      // SuperCall:\n      //     super Arguments\n\n      if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {\n        this.unexpected();\n      }\n\n      return this.finishNode(node, \"Super\");\n\n    case types._this:\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"ThisExpression\");\n\n    case types.name:\n      var startPos = this.start,\n          startLoc = this.startLoc,\n          containsEsc = this.containsEsc;\n      var id = this.parseIdent(this.type !== types.name);\n\n      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function)) {\n        return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true);\n      }\n\n      if (canBeArrow && !this.canInsertSemicolon()) {\n        if (this.eat(types.arrow)) {\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);\n        }\n\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n          id = this.parseIdent();\n\n          if (this.canInsertSemicolon() || !this.eat(types.arrow)) {\n            this.unexpected();\n          }\n\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);\n        }\n      }\n\n      return id;\n\n    case types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = {\n        pattern: value.pattern,\n        flags: value.flags\n      };\n      return node;\n\n    case types.num:\n    case types.string:\n      return this.parseLiteral(this.value);\n\n    case types._null:\n    case types._true:\n    case types._false:\n      node = this.startNode();\n      node.value = this.type === types._null ? null : this.type === types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case types.parenL:\n      var start = this.start,\n          expr = this.parseParenAndDistinguishExpression(canBeArrow);\n\n      if (refDestructuringErrors) {\n        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {\n          refDestructuringErrors.parenthesizedAssign = start;\n        }\n\n        if (refDestructuringErrors.parenthesizedBind < 0) {\n          refDestructuringErrors.parenthesizedBind = start;\n        }\n      }\n\n      return expr;\n\n    case types.bracketL:\n      node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case types.braceL:\n      return this.parseObj(false, refDestructuringErrors);\n\n    case types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case types._class:\n      return this.parseClass(this.startNode(), false);\n\n    case types._new:\n      return this.parseNew();\n\n    case types.backQuote:\n      return this.parseTemplate();\n\n    default:\n      this.unexpected();\n  }\n};\n\npp$3.parseLiteral = function (value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\");\n};\n\npp$3.parseParenExpression = function () {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val;\n};\n\npp$3.parseParenAndDistinguishExpression = function (canBeArrow) {\n  var this$1 = this;\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      val,\n      allowTrailingComma = this.options.ecmaVersion >= 8;\n\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n    var innerStartPos = this.start,\n        innerStartLoc = this.startLoc;\n    var exprList = [],\n        first = true,\n        lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors(),\n        oldYieldPos = this.yieldPos,\n        oldAwaitPos = this.awaitPos,\n        spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n\n    while (this.type !== types.parenR) {\n      first ? first = false : this$1.expect(types.comma);\n\n      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break;\n      } else if (this$1.type === types.ellipsis) {\n        spreadStart = this$1.start;\n        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));\n\n        if (this$1.type === types.comma) {\n          this$1.raise(this$1.start, \"Comma is not permitted after the rest element\");\n        }\n\n        break;\n      } else {\n        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));\n      }\n    }\n\n    var innerEndPos = this.start,\n        innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList);\n    }\n\n    if (!exprList.length || lastIsComma) {\n      this.unexpected(this.lastTokStart);\n    }\n\n    if (spreadStart) {\n      this.unexpected(spreadStart);\n    }\n\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\");\n  } else {\n    return val;\n  }\n};\n\npp$3.parseParenItem = function (item) {\n  return item;\n};\n\npp$3.parseParenArrowList = function (startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n}; // New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\n\nvar empty$1 = [];\n\npp$3.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n\n    if (node.property.name !== \"target\" || containsEsc) {\n      this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\");\n    }\n\n    if (!this.inFunction) {\n      this.raiseRecoverable(node.start, \"new.target can only be used in functions\");\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n\n  if (this.eat(types.parenL)) {\n    node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);\n  } else {\n    node.arguments = empty$1;\n  }\n\n  return this.finishNode(node, \"NewExpression\");\n}; // Parse template expression.\n\n\npp$3.parseTemplateElement = function (ref) {\n  var isTagged = ref.isTagged;\n  var elem = this.startNode();\n\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp$3.parseTemplate = function (ref) {\n  var this$1 = this;\n  if (ref === void 0) ref = {};\n  var isTagged = ref.isTagged;\n  if (isTagged === void 0) isTagged = false;\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({\n    isTagged: isTagged\n  });\n  node.quasis = [curElt];\n\n  while (!curElt.tail) {\n    if (this$1.type === types.eof) {\n      this$1.raise(this$1.pos, \"Unterminated template literal\");\n    }\n\n    this$1.expect(types.dollarBraceL);\n    node.expressions.push(this$1.parseExpression());\n    this$1.expect(types.braceR);\n    node.quasis.push(curElt = this$1.parseTemplateElement({\n      isTagged: isTagged\n    }));\n  }\n\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\npp$3.isAsyncProp = function (prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n}; // Parse an object literal or binding pattern.\n\n\npp$3.parseObj = function (isPattern, refDestructuringErrors) {\n  var this$1 = this;\n  var node = this.startNode(),\n      first = true,\n      propHash = {};\n  node.properties = [];\n  this.next();\n\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n\n      if (this$1.afterTrailingComma(types.braceR)) {\n        break;\n      }\n    } else {\n      first = false;\n    }\n\n    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);\n\n    if (!isPattern) {\n      this$1.checkPropClash(prop, propHash, refDestructuringErrors);\n    }\n\n    node.properties.push(prop);\n  }\n\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp$3.parseProperty = function (isPattern, refDestructuringErrors) {\n  var prop = this.startNode(),\n      isGenerator,\n      isAsync,\n      startPos,\n      startLoc;\n\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n\n      return this.finishNode(prop, \"RestElement\");\n    } // To disallow parenthesized identifier via `this.toAssignable()`.\n\n\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    } // Parse argument.\n\n\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors); // To disallow trailing comma via `this.toAssignable()`.\n\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    } // Finish\n\n\n    return this.finishNode(prop, \"SpreadElement\");\n  }\n\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n  }\n\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\");\n};\n\npp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon) {\n    this.unexpected();\n  }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) {\n      this.unexpected();\n    }\n\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && this.type !== types.comma && this.type !== types.braceR) {\n    if (isGenerator || isAsync) {\n      this.unexpected();\n    }\n\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n\n      if (prop.kind === \"get\") {\n        this.raiseRecoverable(start, \"getter should have no params\");\n      } else {\n        this.raiseRecoverable(start, \"setter should have exactly one param\");\n      }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n        this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\");\n      }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    this.checkUnreserved(prop.key);\n    prop.kind = \"init\";\n\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0) {\n        refDestructuringErrors.shorthandAssign = this.start;\n      }\n\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n\n    prop.shorthand = true;\n  } else {\n    this.unexpected();\n  }\n};\n\npp$3.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key;\n    } else {\n      prop.computed = false;\n    }\n  }\n\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true);\n}; // Initialize empty function node.\n\n\npp$3.initFunction = function (node) {\n  node.id = null;\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = false;\n  }\n}; // Parse object or class method.\n\n\npp$3.parseMethod = function (isGenerator, isAsync) {\n  var node = this.startNode(),\n      oldInGen = this.inGenerator,\n      oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos,\n      oldAwaitPos = this.awaitPos,\n      oldInFunc = this.inFunction;\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = isGenerator;\n  }\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false);\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"FunctionExpression\");\n}; // Parse arrow function expression with given parameters.\n\n\npp$3.parseArrowExpression = function (node, params, isAsync) {\n  var oldInGen = this.inGenerator,\n      oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos,\n      oldAwaitPos = this.awaitPos,\n      oldInFunc = this.inFunction;\n  this.enterFunctionScope();\n  this.initFunction(node);\n\n  if (this.options.ecmaVersion >= 8) {\n    node.async = !!isAsync;\n  }\n\n  this.inGenerator = false;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n}; // Parse function body and check parameters.\n\n\npp$3.parseFunctionBody = function (node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict,\n      useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end); // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n\n      if (useStrict && nonSimple) {\n        this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n      }\n    } // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n\n\n    var oldLabels = this.labels;\n    this.labels = [];\n\n    if (useStrict) {\n      this.strict = true;\n    } // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n\n\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));\n    node.body = this.parseBlock(false);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n\n  this.exitFunctionScope();\n\n  if (this.strict && node.id) {\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    this.checkLVal(node.id, \"none\");\n  }\n\n  this.strict = oldStrict;\n};\n\npp$3.isSimpleParamList = function (params) {\n  for (var i = 0, list = params; i < list.length; i += 1) {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") {\n      return false;\n    }\n  }\n\n  return true;\n}; // Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\n\npp$3.checkParams = function (node, allowDuplicates) {\n  var this$1 = this;\n  var nameHash = {};\n\n  for (var i = 0, list = node.params; i < list.length; i += 1) {\n    var param = list[i];\n    this$1.checkLVal(param, \"var\", allowDuplicates ? null : nameHash);\n  }\n}; // Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\n\npp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var this$1 = this;\n  var elts = [],\n      first = true;\n\n  while (!this.eat(close)) {\n    if (!first) {\n      this$1.expect(types.comma);\n\n      if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n        break;\n      }\n    } else {\n      first = false;\n    }\n\n    var elt = void 0;\n\n    if (allowEmpty && this$1.type === types.comma) {\n      elt = null;\n    } else if (this$1.type === types.ellipsis) {\n      elt = this$1.parseSpread(refDestructuringErrors);\n\n      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0) {\n        refDestructuringErrors.trailingComma = this$1.start;\n      }\n    } else {\n      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);\n    }\n\n    elts.push(elt);\n  }\n\n  return elts;\n};\n\npp$3.checkUnreserved = function (ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\") {\n    this.raiseRecoverable(start, \"Can not use 'yield' as identifier inside a generator\");\n  }\n\n  if (this.inAsync && name === \"await\") {\n    this.raiseRecoverable(start, \"Can not use 'await' as identifier inside an async function\");\n  }\n\n  if (this.isKeyword(name)) {\n    this.raise(start, \"Unexpected keyword '\" + name + \"'\");\n  }\n\n  if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf(\"\\\\\") !== -1) {\n    return;\n  }\n\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\") {\n      this.raiseRecoverable(start, \"Can not use keyword 'await' outside an async function\");\n    }\n\n    this.raiseRecoverable(start, \"The keyword '\" + name + \"' is reserved\");\n  }\n}; // Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\n\npp$3.parseIdent = function (liberal, isBinding) {\n  var node = this.startNode();\n\n  if (liberal && this.options.allowReserved === \"never\") {\n    liberal = false;\n  }\n\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword; // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n\n    if ((node.name === \"class\" || node.name === \"function\") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n\n  this.next();\n  this.finishNode(node, \"Identifier\");\n\n  if (!liberal) {\n    this.checkUnreserved(node);\n  }\n\n  return node;\n}; // Parses yield expression inside generator.\n\n\npp$3.parseYield = function () {\n  if (!this.yieldPos) {\n    this.yieldPos = this.start;\n  }\n\n  var node = this.startNode();\n  this.next();\n\n  if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n\n  return this.finishNode(node, \"YieldExpression\");\n};\n\npp$3.parseAwait = function () {\n  if (!this.awaitPos) {\n    this.awaitPos = this.start;\n  }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\");\n};\n\nvar pp$4 = Parser.prototype; // This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function (pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;\n  err.loc = loc;\n  err.raisedAt = this.pos;\n  throw err;\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function () {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n};\n\nvar pp$5 = Parser.prototype; // Object.assign polyfill\n\nvar assign = Object.assign || function (target) {\n  var sources = [],\n      len = arguments.length - 1;\n\n  while (len-- > 0) sources[len] = arguments[len + 1];\n\n  for (var i = 0, list = sources; i < list.length; i += 1) {\n    var source = list[i];\n\n    for (var key in source) {\n      if (has(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\n\npp$5.enterFunctionScope = function () {\n  // var: a hash of var-declared names in the current lexical scope\n  // lexical: a hash of lexically-declared names in the current lexical scope\n  // childVar: a hash of var-declared names in all child lexical scopes of the current lexical scope (within the current function scope)\n  // parentLexical: a hash of lexically-declared names in all parent lexical scopes of the current lexical scope (within the current function scope)\n  this.scopeStack.push({\n    var: {},\n    lexical: {},\n    childVar: {},\n    parentLexical: {}\n  });\n};\n\npp$5.exitFunctionScope = function () {\n  this.scopeStack.pop();\n};\n\npp$5.enterLexicalScope = function () {\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n  var childScope = {\n    var: {},\n    lexical: {},\n    childVar: {},\n    parentLexical: {}\n  };\n  this.scopeStack.push(childScope);\n  assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);\n};\n\npp$5.exitLexicalScope = function () {\n  var childScope = this.scopeStack.pop();\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n  assign(parentScope.childVar, childScope.var, childScope.childVar);\n};\n/**\n * A name can be declared with `var` if there are no variables with the same name declared with `let`/`const`\n * in the current lexical scope or any of the parent lexical scopes in this function.\n */\n\n\npp$5.canDeclareVarName = function (name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n  return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name);\n};\n/**\n * A name can be declared with `let`/`const` if there are no variables with the same name declared with `let`/`const`\n * in the current scope, and there are no variables with the same name declared with `var` in the current scope or in\n * any child lexical scopes in this function.\n */\n\n\npp$5.canDeclareLexicalName = function (name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n  return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name);\n};\n\npp$5.declareVarName = function (name) {\n  this.scopeStack[this.scopeStack.length - 1].var[name] = true;\n};\n\npp$5.declareLexicalName = function (name) {\n  this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n\n  if (parser.options.locations) {\n    this.loc = new SourceLocation(parser, loc);\n  }\n\n  if (parser.options.directSourceFile) {\n    this.sourceFile = parser.options.directSourceFile;\n  }\n\n  if (parser.options.ranges) {\n    this.range = [pos, 0];\n  }\n}; // Start an AST node, attaching a start offset.\n\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function () {\n  return new Node(this, this.start, this.startLoc);\n};\n\npp$6.startNodeAt = function (pos, loc) {\n  return new Node(this, pos, loc);\n}; // Finish an AST node, adding `type` and `end` properties.\n\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n\n  if (this.options.locations) {\n    node.loc.end = loc;\n  }\n\n  if (this.options.ranges) {\n    node.range[1] = pos;\n  }\n\n  return node;\n}\n\npp$6.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n}; // Finish node at given position\n\n\npp$6.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n}; // The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) {\n    return p.tryReadTemplateToken();\n  }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function () {\n  return [types$1.b_stat];\n};\n\npp$7.braceIsBlock = function (prevType) {\n  var parent = this.curContext();\n\n  if (parent === types$1.f_expr || parent === types$1.f_stat) {\n    return true;\n  }\n\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {\n    return !parent.isExpr;\n  } // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n\n\n  if (prevType === types._return || prevType === types.name && this.exprAllowed) {\n    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  }\n\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n    return true;\n  }\n\n  if (prevType === types.braceL) {\n    return parent === types$1.b_stat;\n  }\n\n  if (prevType === types._var || prevType === types.name) {\n    return false;\n  }\n\n  return !this.exprAllowed;\n};\n\npp$7.inGeneratorContext = function () {\n  var this$1 = this;\n\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this$1.context[i];\n\n    if (context.token === \"function\") {\n      return context.generator;\n    }\n  }\n\n  return false;\n};\n\npp$7.updateContext = function (prevType) {\n  var update,\n      type = this.type;\n\n  if (type.keyword && prevType === types.dot) {\n    this.exprAllowed = false;\n  } else if (update = type.updateContext) {\n    update.call(this, prevType);\n  } else {\n    this.exprAllowed = type.beforeExpr;\n  }\n}; // Token-specific context update code\n\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return;\n  }\n\n  var out = this.context.pop();\n\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {// tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.context.push(types$1.f_expr);\n  } else {\n    this.context.push(types$1.f_stat);\n  }\n\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.q_tmpl) {\n    this.context.pop();\n  } else {\n    this.context.push(types$1.q_tmpl);\n  }\n\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function (prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n\n    if (this.context[index] === types$1.f_expr) {\n      this.context[index] = types$1.f_expr_gen;\n    } else {\n      this.context[index] = types$1.f_gen;\n    }\n  }\n\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function (prevType) {\n  var allowed = false;\n\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed || this.value === \"yield\" && this.inGeneratorContext()) {\n      allowed = true;\n    }\n  }\n\n  this.exprAllowed = allowed;\n};\n\nvar data = {\n  \"$LONE\": [\"ASCII\", \"ASCII_Hex_Digit\", \"AHex\", \"Alphabetic\", \"Alpha\", \"Any\", \"Assigned\", \"Bidi_Control\", \"Bidi_C\", \"Bidi_Mirrored\", \"Bidi_M\", \"Case_Ignorable\", \"CI\", \"Cased\", \"Changes_When_Casefolded\", \"CWCF\", \"Changes_When_Casemapped\", \"CWCM\", \"Changes_When_Lowercased\", \"CWL\", \"Changes_When_NFKC_Casefolded\", \"CWKCF\", \"Changes_When_Titlecased\", \"CWT\", \"Changes_When_Uppercased\", \"CWU\", \"Dash\", \"Default_Ignorable_Code_Point\", \"DI\", \"Deprecated\", \"Dep\", \"Diacritic\", \"Dia\", \"Emoji\", \"Emoji_Component\", \"Emoji_Modifier\", \"Emoji_Modifier_Base\", \"Emoji_Presentation\", \"Extender\", \"Ext\", \"Grapheme_Base\", \"Gr_Base\", \"Grapheme_Extend\", \"Gr_Ext\", \"Hex_Digit\", \"Hex\", \"IDS_Binary_Operator\", \"IDSB\", \"IDS_Trinary_Operator\", \"IDST\", \"ID_Continue\", \"IDC\", \"ID_Start\", \"IDS\", \"Ideographic\", \"Ideo\", \"Join_Control\", \"Join_C\", \"Logical_Order_Exception\", \"LOE\", \"Lowercase\", \"Lower\", \"Math\", \"Noncharacter_Code_Point\", \"NChar\", \"Pattern_Syntax\", \"Pat_Syn\", \"Pattern_White_Space\", \"Pat_WS\", \"Quotation_Mark\", \"QMark\", \"Radical\", \"Regional_Indicator\", \"RI\", \"Sentence_Terminal\", \"STerm\", \"Soft_Dotted\", \"SD\", \"Terminal_Punctuation\", \"Term\", \"Unified_Ideograph\", \"UIdeo\", \"Uppercase\", \"Upper\", \"Variation_Selector\", \"VS\", \"White_Space\", \"space\", \"XID_Continue\", \"XIDC\", \"XID_Start\", \"XIDS\"],\n  \"General_Category\": [\"Cased_Letter\", \"LC\", \"Close_Punctuation\", \"Pe\", \"Connector_Punctuation\", \"Pc\", \"Control\", \"Cc\", \"cntrl\", \"Currency_Symbol\", \"Sc\", \"Dash_Punctuation\", \"Pd\", \"Decimal_Number\", \"Nd\", \"digit\", \"Enclosing_Mark\", \"Me\", \"Final_Punctuation\", \"Pf\", \"Format\", \"Cf\", \"Initial_Punctuation\", \"Pi\", \"Letter\", \"L\", \"Letter_Number\", \"Nl\", \"Line_Separator\", \"Zl\", \"Lowercase_Letter\", \"Ll\", \"Mark\", \"M\", \"Combining_Mark\", \"Math_Symbol\", \"Sm\", \"Modifier_Letter\", \"Lm\", \"Modifier_Symbol\", \"Sk\", \"Nonspacing_Mark\", \"Mn\", \"Number\", \"N\", \"Open_Punctuation\", \"Ps\", \"Other\", \"C\", \"Other_Letter\", \"Lo\", \"Other_Number\", \"No\", \"Other_Punctuation\", \"Po\", \"Other_Symbol\", \"So\", \"Paragraph_Separator\", \"Zp\", \"Private_Use\", \"Co\", \"Punctuation\", \"P\", \"punct\", \"Separator\", \"Z\", \"Space_Separator\", \"Zs\", \"Spacing_Mark\", \"Mc\", \"Surrogate\", \"Cs\", \"Symbol\", \"S\", \"Titlecase_Letter\", \"Lt\", \"Unassigned\", \"Cn\", \"Uppercase_Letter\", \"Lu\"],\n  \"Script\": [\"Adlam\", \"Adlm\", \"Ahom\", \"Anatolian_Hieroglyphs\", \"Hluw\", \"Arabic\", \"Arab\", \"Armenian\", \"Armn\", \"Avestan\", \"Avst\", \"Balinese\", \"Bali\", \"Bamum\", \"Bamu\", \"Bassa_Vah\", \"Bass\", \"Batak\", \"Batk\", \"Bengali\", \"Beng\", \"Bhaiksuki\", \"Bhks\", \"Bopomofo\", \"Bopo\", \"Brahmi\", \"Brah\", \"Braille\", \"Brai\", \"Buginese\", \"Bugi\", \"Buhid\", \"Buhd\", \"Canadian_Aboriginal\", \"Cans\", \"Carian\", \"Cari\", \"Caucasian_Albanian\", \"Aghb\", \"Chakma\", \"Cakm\", \"Cham\", \"Cherokee\", \"Cher\", \"Common\", \"Zyyy\", \"Coptic\", \"Copt\", \"Qaac\", \"Cuneiform\", \"Xsux\", \"Cypriot\", \"Cprt\", \"Cyrillic\", \"Cyrl\", \"Deseret\", \"Dsrt\", \"Devanagari\", \"Deva\", \"Duployan\", \"Dupl\", \"Egyptian_Hieroglyphs\", \"Egyp\", \"Elbasan\", \"Elba\", \"Ethiopic\", \"Ethi\", \"Georgian\", \"Geor\", \"Glagolitic\", \"Glag\", \"Gothic\", \"Goth\", \"Grantha\", \"Gran\", \"Greek\", \"Grek\", \"Gujarati\", \"Gujr\", \"Gurmukhi\", \"Guru\", \"Han\", \"Hani\", \"Hangul\", \"Hang\", \"Hanunoo\", \"Hano\", \"Hatran\", \"Hatr\", \"Hebrew\", \"Hebr\", \"Hiragana\", \"Hira\", \"Imperial_Aramaic\", \"Armi\", \"Inherited\", \"Zinh\", \"Qaai\", \"Inscriptional_Pahlavi\", \"Phli\", \"Inscriptional_Parthian\", \"Prti\", \"Javanese\", \"Java\", \"Kaithi\", \"Kthi\", \"Kannada\", \"Knda\", \"Katakana\", \"Kana\", \"Kayah_Li\", \"Kali\", \"Kharoshthi\", \"Khar\", \"Khmer\", \"Khmr\", \"Khojki\", \"Khoj\", \"Khudawadi\", \"Sind\", \"Lao\", \"Laoo\", \"Latin\", \"Latn\", \"Lepcha\", \"Lepc\", \"Limbu\", \"Limb\", \"Linear_A\", \"Lina\", \"Linear_B\", \"Linb\", \"Lisu\", \"Lycian\", \"Lyci\", \"Lydian\", \"Lydi\", \"Mahajani\", \"Mahj\", \"Malayalam\", \"Mlym\", \"Mandaic\", \"Mand\", \"Manichaean\", \"Mani\", \"Marchen\", \"Marc\", \"Masaram_Gondi\", \"Gonm\", \"Meetei_Mayek\", \"Mtei\", \"Mende_Kikakui\", \"Mend\", \"Meroitic_Cursive\", \"Merc\", \"Meroitic_Hieroglyphs\", \"Mero\", \"Miao\", \"Plrd\", \"Modi\", \"Mongolian\", \"Mong\", \"Mro\", \"Mroo\", \"Multani\", \"Mult\", \"Myanmar\", \"Mymr\", \"Nabataean\", \"Nbat\", \"New_Tai_Lue\", \"Talu\", \"Newa\", \"Nko\", \"Nkoo\", \"Nushu\", \"Nshu\", \"Ogham\", \"Ogam\", \"Ol_Chiki\", \"Olck\", \"Old_Hungarian\", \"Hung\", \"Old_Italic\", \"Ital\", \"Old_North_Arabian\", \"Narb\", \"Old_Permic\", \"Perm\", \"Old_Persian\", \"Xpeo\", \"Old_South_Arabian\", \"Sarb\", \"Old_Turkic\", \"Orkh\", \"Oriya\", \"Orya\", \"Osage\", \"Osge\", \"Osmanya\", \"Osma\", \"Pahawh_Hmong\", \"Hmng\", \"Palmyrene\", \"Palm\", \"Pau_Cin_Hau\", \"Pauc\", \"Phags_Pa\", \"Phag\", \"Phoenician\", \"Phnx\", \"Psalter_Pahlavi\", \"Phlp\", \"Rejang\", \"Rjng\", \"Runic\", \"Runr\", \"Samaritan\", \"Samr\", \"Saurashtra\", \"Saur\", \"Sharada\", \"Shrd\", \"Shavian\", \"Shaw\", \"Siddham\", \"Sidd\", \"SignWriting\", \"Sgnw\", \"Sinhala\", \"Sinh\", \"Sora_Sompeng\", \"Sora\", \"Soyombo\", \"Soyo\", \"Sundanese\", \"Sund\", \"Syloti_Nagri\", \"Sylo\", \"Syriac\", \"Syrc\", \"Tagalog\", \"Tglg\", \"Tagbanwa\", \"Tagb\", \"Tai_Le\", \"Tale\", \"Tai_Tham\", \"Lana\", \"Tai_Viet\", \"Tavt\", \"Takri\", \"Takr\", \"Tamil\", \"Taml\", \"Tangut\", \"Tang\", \"Telugu\", \"Telu\", \"Thaana\", \"Thaa\", \"Thai\", \"Tibetan\", \"Tibt\", \"Tifinagh\", \"Tfng\", \"Tirhuta\", \"Tirh\", \"Ugaritic\", \"Ugar\", \"Vai\", \"Vaii\", \"Warang_Citi\", \"Wara\", \"Yi\", \"Yiii\", \"Zanabazar_Square\", \"Zanb\"]\n};\nArray.prototype.push.apply(data.$LONE, data.General_Category);\ndata.gc = data.General_Category;\ndata.sc = data.Script_Extensions = data.scx = data.Script;\nvar pp$9 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset(start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise(message) {\n  this.parser.raiseRecoverable(this.start, \"Invalid regular expression: /\" + this.source + \"/: \" + message);\n}; // If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\n\n\nRegExpValidationState.prototype.at = function at(i) {\n  var s = this.source;\n  var l = s.length;\n\n  if (i >= l) {\n    return -1;\n  }\n\n  var c = s.charCodeAt(i);\n\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c;\n  }\n\n  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00;\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex(i) {\n  var s = this.source;\n  var l = s.length;\n\n  if (i >= l) {\n    return l;\n  }\n\n  var c = s.charCodeAt(i);\n\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return i + 1;\n  }\n\n  return i + 2;\n};\n\nRegExpValidationState.prototype.current = function current() {\n  return this.at(this.pos);\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead() {\n  return this.at(this.nextIndex(this.pos));\n};\n\nRegExpValidationState.prototype.advance = function advance() {\n  this.pos = this.nextIndex(this.pos);\n};\n\nRegExpValidationState.prototype.eat = function eat(ch) {\n  if (this.current() === ch) {\n    this.advance();\n    return true;\n  }\n\n  return false;\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) {\n    return String.fromCharCode(ch);\n  }\n\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);\n}\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\n\n\npp$9.validateRegExpFlags = function (state) {\n  var this$1 = this;\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n\n    if (validFlags.indexOf(flag) === -1) {\n      this$1.raise(state.start, \"Invalid regular expression flag\");\n    }\n\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this$1.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\n\n\npp$9.validateRegExpPattern = function (state) {\n  this.regexp_pattern(state); // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\n\n\npp$9.regexp_pattern = function (state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29\n    /* ) */\n    )) {\n      state.raise(\"Unmatched ')'\");\n    }\n\n    if (state.eat(0x5D\n    /* [ */\n    ) || state.eat(0x7D\n    /* } */\n    )) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\n\n\npp$9.regexp_disjunction = function (state) {\n  var this$1 = this;\n  this.regexp_alternative(state);\n\n  while (state.eat(0x7C\n  /* | */\n  )) {\n    this$1.regexp_alternative(state);\n  } // Make the same message as V8.\n\n\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n\n  if (state.eat(0x7B\n  /* { */\n  )) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\n\n\npp$9.regexp_alternative = function (state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\n\n\npp$9.regexp_eatTerm = function (state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n\n    return true;\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\n\n\npp$9.regexp_eatAssertion = function (state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false; // ^, $\n\n  if (state.eat(0x5E\n  /* ^ */\n  ) || state.eat(0x24\n  /* $ */\n  )) {\n    return true;\n  } // \\b \\B\n\n\n  if (state.eat(0x5C\n  /* \\ */\n  )) {\n    if (state.eat(0x42\n    /* B */\n    ) || state.eat(0x62\n    /* b */\n    )) {\n      return true;\n    }\n\n    state.pos = start;\n  } // Lookahead / Lookbehind\n\n\n  if (state.eat(0x28\n  /* ( */\n  ) && state.eat(0x3F\n  /* ? */\n  )) {\n    var lookbehind = false;\n\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C\n      /* < */\n      );\n    }\n\n    if (state.eat(0x3D\n    /* = */\n    ) || state.eat(0x21\n    /* ! */\n    )) {\n      this.regexp_disjunction(state);\n\n      if (!state.eat(0x29\n      /* ) */\n      )) {\n        state.raise(\"Unterminated group\");\n      }\n\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true;\n    }\n  }\n\n  state.pos = start;\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\n\n\npp$9.regexp_eatQuantifier = function (state, noError) {\n  if (noError === void 0) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F\n    /* ? */\n    );\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\n\n\npp$9.regexp_eatQuantifierPrefix = function (state, noError) {\n  return state.eat(0x2A\n  /* * */\n  ) || state.eat(0x2B\n  /* + */\n  ) || state.eat(0x3F\n  /* ? */\n  ) || this.regexp_eatBracedQuantifier(state, noError);\n};\n\npp$9.regexp_eatBracedQuantifier = function (state, noError) {\n  var start = state.pos;\n\n  if (state.eat(0x7B\n  /* { */\n  )) {\n    var min = 0,\n        max = -1;\n\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n\n      if (state.eat(0x2C\n      /* , */\n      ) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n\n      if (state.eat(0x7D\n      /* } */\n      )) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n\n        return true;\n      }\n    }\n\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\n\n\npp$9.regexp_eatAtom = function (state) {\n  return this.regexp_eatPatternCharacters(state) || state.eat(0x2E\n  /* . */\n  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);\n};\n\npp$9.regexp_eatReverseSolidusAtomEscape = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C\n  /* \\ */\n  )) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true;\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\npp$9.regexp_eatUncapturingGroup = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x28\n  /* ( */\n  )) {\n    if (state.eat(0x3F\n    /* ? */\n    ) && state.eat(0x3A\n    /* : */\n    )) {\n      this.regexp_disjunction(state);\n\n      if (state.eat(0x29\n      /* ) */\n      )) {\n        return true;\n      }\n\n      state.raise(\"Unterminated group\");\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\npp$9.regexp_eatCapturingGroup = function (state) {\n  if (state.eat(0x28\n  /* ( */\n  )) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F\n    /* ? */\n    ) {\n        state.raise(\"Invalid group\");\n      }\n\n    this.regexp_disjunction(state);\n\n    if (state.eat(0x29\n    /* ) */\n    )) {\n      state.numCapturingParens += 1;\n      return true;\n    }\n\n    state.raise(\"Unterminated group\");\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\n\n\npp$9.regexp_eatExtendedAtom = function (state) {\n  return state.eat(0x2E\n  /* . */\n  ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\n\n\npp$9.regexp_eatInvalidBracedQuantifier = function (state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\n\n\npp$9.regexp_eatSyntaxCharacter = function (state) {\n  var ch = state.current();\n\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true;\n  }\n\n  return false;\n};\n\nfunction isSyntaxCharacter(ch) {\n  return ch === 0x24\n  /* $ */\n  || ch >= 0x28\n  /* ( */\n  && ch <= 0x2B\n  /* + */\n  || ch === 0x2E\n  /* . */\n  || ch === 0x3F\n  /* ? */\n  || ch >= 0x5B\n  /* [ */\n  && ch <= 0x5E\n  /* ^ */\n  || ch >= 0x7B\n  /* { */\n  && ch <= 0x7D\n  /* } */\n  ;\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\n\n\npp$9.regexp_eatPatternCharacters = function (state) {\n  var start = state.pos;\n  var ch = 0;\n\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n\n  return state.pos !== start;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\n\n\npp$9.regexp_eatExtendedPatternCharacter = function (state) {\n  var ch = state.current();\n\n  if (ch !== -1 && ch !== 0x24\n  /* $ */\n  && !(ch >= 0x28\n  /* ( */\n  && ch <= 0x2B\n  /* + */\n  ) && ch !== 0x2E\n  /* . */\n  && ch !== 0x3F\n  /* ? */\n  && ch !== 0x5B\n  /* [ */\n  && ch !== 0x5E\n  /* ^ */\n  && ch !== 0x7C\n  /* | */\n  ) {\n      state.advance();\n      return true;\n    }\n\n  return false;\n}; // GroupSpecifier[U] ::\n//   [empty]\n//   `?` GroupName[?U]\n\n\npp$9.regexp_groupSpecifier = function (state) {\n  if (state.eat(0x3F\n  /* ? */\n  )) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n\n      state.groupNames.push(state.lastStringValue);\n      return;\n    }\n\n    state.raise(\"Invalid group\");\n  }\n}; // GroupName[U] ::\n//   `<` RegExpIdentifierName[?U] `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\n\n\npp$9.regexp_eatGroupName = function (state) {\n  state.lastStringValue = \"\";\n\n  if (state.eat(0x3C\n  /* < */\n  )) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E\n    /* > */\n    )) {\n      return true;\n    }\n\n    state.raise(\"Invalid capture group name\");\n  }\n\n  return false;\n}; // RegExpIdentifierName[U] ::\n//   RegExpIdentifierStart[?U]\n//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n// Note: this updates `state.lastStringValue` property with the eaten name.\n\n\npp$9.regexp_eatRegExpIdentifierName = function (state) {\n  state.lastStringValue = \"\";\n\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n\n    return true;\n  }\n\n  return false;\n}; // RegExpIdentifierStart[U] ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n\n\npp$9.regexp_eatRegExpIdentifierStart = function (state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C\n  /* \\ */\n  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true;\n  }\n\n  state.pos = start;\n  return false;\n};\n\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24\n  /* $ */\n  || ch === 0x5F;\n  /* _ */\n} // RegExpIdentifierPart[U] ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n//   <ZWNJ>\n//   <ZWJ>\n\n\npp$9.regexp_eatRegExpIdentifierPart = function (state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C\n  /* \\ */\n  && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true;\n  }\n\n  state.pos = start;\n  return false;\n};\n\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24\n  /* $ */\n  || ch === 0x5F\n  /* _ */\n  || ch === 0x200C\n  /* <ZWNJ> */\n  || ch === 0x200D;\n  /* <ZWJ> */\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\n\n\npp$9.regexp_eatAtomEscape = function (state) {\n  if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {\n    return true;\n  }\n\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63\n    /* c */\n    ) {\n        state.raise(\"Invalid unicode escape\");\n      }\n\n    state.raise(\"Invalid escape\");\n  }\n\n  return false;\n};\n\npp$9.regexp_eatBackReference = function (state) {\n  var start = state.pos;\n\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n\n      return true;\n    }\n\n    if (n <= state.numCapturingParens) {\n      return true;\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\npp$9.regexp_eatKGroupName = function (state) {\n  if (state.eat(0x6B\n  /* k */\n  )) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true;\n    }\n\n    state.raise(\"Invalid named reference\");\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\n\n\npp$9.regexp_eatCharacterEscape = function (state) {\n  return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);\n};\n\npp$9.regexp_eatCControlLetter = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x63\n  /* c */\n  )) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true;\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\npp$9.regexp_eatZero = function (state) {\n  if (state.current() === 0x30\n  /* 0 */\n  && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\n\n\npp$9.regexp_eatControlEscape = function (state) {\n  var ch = state.current();\n\n  if (ch === 0x74\n  /* t */\n  ) {\n      state.lastIntValue = 0x09;\n      /* \\t */\n\n      state.advance();\n      return true;\n    }\n\n  if (ch === 0x6E\n  /* n */\n  ) {\n      state.lastIntValue = 0x0A;\n      /* \\n */\n\n      state.advance();\n      return true;\n    }\n\n  if (ch === 0x76\n  /* v */\n  ) {\n      state.lastIntValue = 0x0B;\n      /* \\v */\n\n      state.advance();\n      return true;\n    }\n\n  if (ch === 0x66\n  /* f */\n  ) {\n      state.lastIntValue = 0x0C;\n      /* \\f */\n\n      state.advance();\n      return true;\n    }\n\n  if (ch === 0x72\n  /* r */\n  ) {\n      state.lastIntValue = 0x0D;\n      /* \\r */\n\n      state.advance();\n      return true;\n    }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\n\n\npp$9.regexp_eatControlLetter = function (state) {\n  var ch = state.current();\n\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true;\n  }\n\n  return false;\n};\n\nfunction isControlLetter(ch) {\n  return ch >= 0x41\n  /* A */\n  && ch <= 0x5A\n  /* Z */\n  || ch >= 0x61\n  /* a */\n  && ch <= 0x7A\n  /* z */\n  ;\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\n\n\npp$9.regexp_eatRegExpUnicodeEscapeSequence = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x75\n  /* u */\n  )) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n\n      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n\n        if (state.eat(0x5C\n        /* \\ */\n        ) && state.eat(0x75\n        /* u */\n        ) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true;\n          }\n        }\n\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n\n      return true;\n    }\n\n    if (state.switchU && state.eat(0x7B\n    /* { */\n    ) && this.regexp_eatHexDigits(state) && state.eat(0x7D\n    /* } */\n    ) && isValidUnicode(state.lastIntValue)) {\n      return true;\n    }\n\n    if (state.switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n};\n\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF;\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\n\n\npp$9.regexp_eatIdentityEscape = function (state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true;\n    }\n\n    if (state.eat(0x2F\n    /* / */\n    )) {\n      state.lastIntValue = 0x2F;\n      /* / */\n\n      return true;\n    }\n\n    return false;\n  }\n\n  var ch = state.current();\n\n  if (ch !== 0x63\n  /* c */\n  && (!state.switchN || ch !== 0x6B\n  /* k */\n  )) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\n\n\npp$9.regexp_eatDecimalEscape = function (state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n\n  if (ch >= 0x31\n  /* 1 */\n  && ch <= 0x39\n  /* 9 */\n  ) {\n      do {\n        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30\n        /* 0 */\n        );\n        state.advance();\n      } while ((ch = state.current()) >= 0x30\n      /* 0 */\n      && ch <= 0x39\n      /* 9 */\n      );\n\n      return true;\n    }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\n\n\npp$9.regexp_eatCharacterClassEscape = function (state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true;\n  }\n\n  if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50\n  /* P */\n  || ch === 0x70\n  /* p */\n  )) {\n    state.lastIntValue = -1;\n    state.advance();\n\n    if (state.eat(0x7B\n    /* { */\n    ) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D\n    /* } */\n    )) {\n      return true;\n    }\n\n    state.raise(\"Invalid property name\");\n  }\n\n  return false;\n};\n\nfunction isCharacterClassEscape(ch) {\n  return ch === 0x64\n  /* d */\n  || ch === 0x44\n  /* D */\n  || ch === 0x73\n  /* s */\n  || ch === 0x53\n  /* S */\n  || ch === 0x77\n  /* w */\n  || ch === 0x57\n  /* W */\n  ;\n} // UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\n\n\npp$9.regexp_eatUnicodePropertyValueExpression = function (state) {\n  var start = state.pos; // UnicodePropertyName `=` UnicodePropertyValue\n\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D\n  /* = */\n  )) {\n    var name = state.lastStringValue;\n\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true;\n    }\n  }\n\n  state.pos = start; // LoneUnicodePropertyNameOrValue\n\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true;\n  }\n\n  return false;\n};\n\npp$9.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {\n  if (!data.hasOwnProperty(name) || data[name].indexOf(value) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\n\npp$9.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {\n  if (data.$LONE.indexOf(nameOrValue) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n}; // UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\n\n\npp$9.regexp_eatUnicodePropertyName = function (state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n\n  return state.lastStringValue !== \"\";\n};\n\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F;\n  /* _ */\n} // UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\n\n\npp$9.regexp_eatUnicodePropertyValue = function (state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n\n  return state.lastStringValue !== \"\";\n};\n\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);\n} // LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\n\n\npp$9.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {\n  return this.regexp_eatUnicodePropertyValue(state);\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\n\n\npp$9.regexp_eatCharacterClass = function (state) {\n  if (state.eat(0x5B\n  /* [ */\n  )) {\n    state.eat(0x5E\n    /* ^ */\n    );\n    this.regexp_classRanges(state);\n\n    if (state.eat(0x5D\n    /* [ */\n    )) {\n      return true;\n    } // Unreachable since it threw \"unterminated regular expression\" error before.\n\n\n    state.raise(\"Unterminated character class\");\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\n\n\npp$9.regexp_classRanges = function (state) {\n  var this$1 = this;\n\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n\n    if (state.eat(0x2D\n    /* - */\n    ) && this$1.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\n\n\npp$9.regexp_eatClassAtom = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C\n  /* \\ */\n  )) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true;\n    }\n\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n\n      if (ch$1 === 0x63\n      /* c */\n      || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n\n      state.raise(\"Invalid escape\");\n    }\n\n    state.pos = start;\n  }\n\n  var ch = state.current();\n\n  if (ch !== 0x5D\n  /* [ */\n  ) {\n      state.lastIntValue = ch;\n      state.advance();\n      return true;\n    }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\n\n\npp$9.regexp_eatClassEscape = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x62\n  /* b */\n  )) {\n    state.lastIntValue = 0x08;\n    /* <BS> */\n\n    return true;\n  }\n\n  if (state.switchU && state.eat(0x2D\n  /* - */\n  )) {\n    state.lastIntValue = 0x2D;\n    /* - */\n\n    return true;\n  }\n\n  if (!state.switchU && state.eat(0x63\n  /* c */\n  )) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true;\n    }\n\n    state.pos = start;\n  }\n\n  return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\n\n\npp$9.regexp_eatClassControlLetter = function (state) {\n  var ch = state.current();\n\n  if (isDecimalDigit(ch) || ch === 0x5F\n  /* _ */\n  ) {\n      state.lastIntValue = ch % 0x20;\n      state.advance();\n      return true;\n    }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n\n\npp$9.regexp_eatHexEscapeSequence = function (state) {\n  var start = state.pos;\n\n  if (state.eat(0x78\n  /* x */\n  )) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true;\n    }\n\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n\n    state.pos = start;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\n\n\npp$9.regexp_eatDecimalDigits = function (state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30\n    /* 0 */\n    );\n    state.advance();\n  }\n\n  return state.pos !== start;\n};\n\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30\n  /* 0 */\n  && ch <= 0x39;\n  /* 9 */\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\n\n\npp$9.regexp_eatHexDigits = function (state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n\n  return state.pos !== start;\n};\n\nfunction isHexDigit(ch) {\n  return ch >= 0x30\n  /* 0 */\n  && ch <= 0x39\n  /* 9 */\n  || ch >= 0x41\n  /* A */\n  && ch <= 0x46\n  /* F */\n  || ch >= 0x61\n  /* a */\n  && ch <= 0x66\n  /* f */\n  ;\n}\n\nfunction hexToInt(ch) {\n  if (ch >= 0x41\n  /* A */\n  && ch <= 0x46\n  /* F */\n  ) {\n      return 10 + (ch - 0x41\n      /* A */\n      );\n    }\n\n  if (ch >= 0x61\n  /* a */\n  && ch <= 0x66\n  /* f */\n  ) {\n      return 10 + (ch - 0x61\n      /* a */\n      );\n    }\n\n  return ch - 0x30;\n  /* 0 */\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\n\n\npp$9.regexp_eatLegacyOctalEscapeSequence = function (state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n\n    return true;\n  }\n\n  return false;\n}; // https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\n\n\npp$9.regexp_eatOctalDigit = function (state) {\n  var ch = state.current();\n\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30;\n    /* 0 */\n\n    state.advance();\n    return true;\n  }\n\n  state.lastIntValue = 0;\n  return false;\n};\n\nfunction isOctalDigit(ch) {\n  return ch >= 0x30\n  /* 0 */\n  && ch <= 0x37;\n  /* 7 */\n} // https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\n\n\npp$9.regexp_eatFixedHexDigits = function (state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false;\n    }\n\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n\n  return true;\n}; // Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n\n  if (p.options.locations) {\n    this.loc = new SourceLocation(p, p.startLoc, p.endLoc);\n  }\n\n  if (p.options.ranges) {\n    this.range = [p.start, p.end];\n  }\n}; // ## Tokenizer\n\n\nvar pp$8 = Parser.prototype; // Move to the next token\n\npp$8.next = function () {\n  if (this.options.onToken) {\n    this.options.onToken(new Token(this));\n  }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$8.getToken = function () {\n  this.next();\n  return new Token(this);\n}; // If we're in an ES6 environment, make parsers iterable\n\n\nif (typeof Symbol !== \"undefined\") {\n  pp$8[Symbol.iterator] = function () {\n    var this$1 = this;\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        };\n      }\n    };\n  };\n} // Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\n\npp$8.curContext = function () {\n  return this.context[this.context.length - 1];\n}; // Read a single token, updating the parser object's token-related\n// properties.\n\n\npp$8.nextToken = function () {\n  var curContext = this.curContext();\n\n  if (!curContext || !curContext.preserveSpace) {\n    this.skipSpace();\n  }\n\n  this.start = this.pos;\n\n  if (this.options.locations) {\n    this.startLoc = this.curPosition();\n  }\n\n  if (this.pos >= this.input.length) {\n    return this.finishToken(types.eof);\n  }\n\n  if (curContext.override) {\n    return curContext.override(this);\n  } else {\n    this.readToken(this.fullCharCodeAtPos());\n  }\n};\n\npp$8.readToken = function (code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92\n  /* '\\' */\n  ) {\n      return this.readWord();\n    }\n\n  return this.getTokenFromCode(code);\n};\n\npp$8.fullCharCodeAtPos = function () {\n  var code = this.input.charCodeAt(this.pos);\n\n  if (code <= 0xd7ff || code >= 0xe000) {\n    return code;\n  }\n\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00;\n};\n\npp$8.skipBlockComment = function () {\n  var this$1 = this;\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos,\n      end = this.input.indexOf(\"*/\", this.pos += 2);\n\n  if (end === -1) {\n    this.raise(this.pos - 2, \"Unterminated comment\");\n  }\n\n  this.pos = end + 2;\n\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this$1.curLine;\n      this$1.lineStart = match.index + match[0].length;\n    }\n  }\n\n  if (this.options.onComment) {\n    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n  }\n};\n\npp$8.skipLineComment = function (startSkip) {\n  var this$1 = this;\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this$1.input.charCodeAt(++this$1.pos);\n  }\n\n  if (this.options.onComment) {\n    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n  }\n}; // Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\n\npp$8.skipSpace = function () {\n  var this$1 = this;\n\n  loop: while (this.pos < this.input.length) {\n    var ch = this$1.input.charCodeAt(this$1.pos);\n\n    switch (ch) {\n      case 32:\n      case 160:\n        // ' '\n        ++this$1.pos;\n        break;\n\n      case 13:\n        if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n          ++this$1.pos;\n        }\n\n      case 10:\n      case 8232:\n      case 8233:\n        ++this$1.pos;\n\n        if (this$1.options.locations) {\n          ++this$1.curLine;\n          this$1.lineStart = this$1.pos;\n        }\n\n        break;\n\n      case 47:\n        // '/'\n        switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n          case 42:\n            // '*'\n            this$1.skipBlockComment();\n            break;\n\n          case 47:\n            this$1.skipLineComment(2);\n            break;\n\n          default:\n            break loop;\n        }\n\n        break;\n\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this$1.pos;\n        } else {\n          break loop;\n        }\n\n    }\n  }\n}; // Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\n\npp$8.finishToken = function (type, val) {\n  this.end = this.pos;\n\n  if (this.options.locations) {\n    this.endLoc = this.curPosition();\n  }\n\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n  this.updateContext(prevType);\n}; // ### Token reading\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\n\n\npp$8.readToken_dot = function () {\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next >= 48 && next <= 57) {\n    return this.readNumber(true);\n  }\n\n  var next2 = this.input.charCodeAt(this.pos + 2);\n\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n    // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis);\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot);\n  }\n};\n\npp$8.readToken_slash = function () {\n  // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (this.exprAllowed) {\n    ++this.pos;\n    return this.readRegexp();\n  }\n\n  if (next === 61) {\n    return this.finishOp(types.assign, 2);\n  }\n\n  return this.finishOp(types.slash, 1);\n};\n\npp$8.readToken_mult_modulo_exp = function (code) {\n  // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo; // exponentiation operator ** and **=\n\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) {\n    return this.finishOp(types.assign, size + 1);\n  }\n\n  return this.finishOp(tokentype, size);\n};\n\npp$8.readToken_pipe_amp = function (code) {\n  // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next === code) {\n    return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n  }\n\n  if (next === 61) {\n    return this.finishOp(types.assign, 2);\n  }\n\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n};\n\npp$8.readToken_caret = function () {\n  // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next === 61) {\n    return this.finishOp(types.assign, 2);\n  }\n\n  return this.finishOp(types.bitwiseXOR, 1);\n};\n\npp$8.readToken_plus_min = function (code) {\n  // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken();\n    }\n\n    return this.finishOp(types.incDec, 2);\n  }\n\n  if (next === 61) {\n    return this.finishOp(types.assign, 2);\n  }\n\n  return this.finishOp(types.plusMin, 1);\n};\n\npp$8.readToken_lt_gt = function (code) {\n  // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n\n    if (this.input.charCodeAt(this.pos + size) === 61) {\n      return this.finishOp(types.assign, size + 1);\n    }\n\n    return this.finishOp(types.bitShift, size);\n  }\n\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken();\n  }\n\n  if (next === 61) {\n    size = 2;\n  }\n\n  return this.finishOp(types.relational, size);\n};\n\npp$8.readToken_eq_excl = function (code) {\n  // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n\n  if (next === 61) {\n    return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n  }\n\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n    // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow);\n  }\n\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1);\n};\n\npp$8.getTokenFromCode = function (code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46:\n      // '.'\n      return this.readToken_dot();\n    // Punctuation tokens.\n\n    case 40:\n      ++this.pos;\n      return this.finishToken(types.parenL);\n\n    case 41:\n      ++this.pos;\n      return this.finishToken(types.parenR);\n\n    case 59:\n      ++this.pos;\n      return this.finishToken(types.semi);\n\n    case 44:\n      ++this.pos;\n      return this.finishToken(types.comma);\n\n    case 91:\n      ++this.pos;\n      return this.finishToken(types.bracketL);\n\n    case 93:\n      ++this.pos;\n      return this.finishToken(types.bracketR);\n\n    case 123:\n      ++this.pos;\n      return this.finishToken(types.braceL);\n\n    case 125:\n      ++this.pos;\n      return this.finishToken(types.braceR);\n\n    case 58:\n      ++this.pos;\n      return this.finishToken(types.colon);\n\n    case 63:\n      ++this.pos;\n      return this.finishToken(types.question);\n\n    case 96:\n      // '`'\n      if (this.options.ecmaVersion < 6) {\n        break;\n      }\n\n      ++this.pos;\n      return this.finishToken(types.backQuote);\n\n    case 48:\n      // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n\n      if (next === 120 || next === 88) {\n        return this.readRadixNumber(16);\n      } // '0x', '0X' - hex number\n\n\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) {\n          return this.readRadixNumber(8);\n        } // '0o', '0O' - octal number\n\n\n        if (next === 98 || next === 66) {\n          return this.readRadixNumber(2);\n        } // '0b', '0B' - binary number\n\n      }\n\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      // 1-9\n      return this.readNumber(false);\n    // Quotes produce strings.\n\n    case 34:\n    case 39:\n      // '\"', \"'\"\n      return this.readString(code);\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47:\n      // '/'\n      return this.readToken_slash();\n\n    case 37:\n    case 42:\n      // '%*'\n      return this.readToken_mult_modulo_exp(code);\n\n    case 124:\n    case 38:\n      // '|&'\n      return this.readToken_pipe_amp(code);\n\n    case 94:\n      // '^'\n      return this.readToken_caret();\n\n    case 43:\n    case 45:\n      // '+-'\n      return this.readToken_plus_min(code);\n\n    case 60:\n    case 62:\n      // '<>'\n      return this.readToken_lt_gt(code);\n\n    case 61:\n    case 33:\n      // '=!'\n      return this.readToken_eq_excl(code);\n\n    case 126:\n      // '~'\n      return this.finishOp(types.prefix, 1);\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp$8.finishOp = function (type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str);\n};\n\npp$8.readRegexp = function () {\n  var this$1 = this;\n  var escaped,\n      inClass,\n      start = this.pos;\n\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) {\n      this$1.raise(start, \"Unterminated regular expression\");\n    }\n\n    var ch = this$1.input.charAt(this$1.pos);\n\n    if (lineBreak.test(ch)) {\n      this$1.raise(start, \"Unterminated regular expression\");\n    }\n\n    if (!escaped) {\n      if (ch === \"[\") {\n        inClass = true;\n      } else if (ch === \"]\" && inClass) {\n        inClass = false;\n      } else if (ch === \"/\" && !inClass) {\n        break;\n      }\n\n      escaped = ch === \"\\\\\";\n    } else {\n      escaped = false;\n    }\n\n    ++this$1.pos;\n  }\n\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n\n  if (this.containsEsc) {\n    this.unexpected(flagsStart);\n  } // Validate pattern\n\n\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state); // Create Literal#value property value.\n\n  var value = null;\n\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {// ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {\n    pattern: pattern,\n    flags: flags,\n    value: value\n  });\n}; // Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\n\npp$8.readInt = function (radix, len) {\n  var this$1 = this;\n  var start = this.pos,\n      total = 0;\n\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this$1.input.charCodeAt(this$1.pos),\n        val = void 0;\n\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } // a\n    else if (code >= 65) {\n        val = code - 65 + 10;\n      } // A\n      else if (code >= 48 && code <= 57) {\n          val = code - 48;\n        } // 0-9\n        else {\n            val = Infinity;\n          }\n\n    if (val >= radix) {\n      break;\n    }\n\n    ++this$1.pos;\n    total = total * radix + val;\n  }\n\n  if (this.pos === start || len != null && this.pos - start !== len) {\n    return null;\n  }\n\n  return total;\n};\n\npp$8.readRadixNumber = function (radix) {\n  this.pos += 2; // 0x\n\n  var val = this.readInt(radix);\n\n  if (val == null) {\n    this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  }\n\n  if (isIdentifierStart(this.fullCharCodeAtPos())) {\n    this.raise(this.pos, \"Identifier directly after number\");\n  }\n\n  return this.finishToken(types.num, val);\n}; // Read an integer, octal integer, or floating-point number.\n\n\npp$8.readNumber = function (startsWithDot) {\n  var start = this.pos;\n\n  if (!startsWithDot && this.readInt(10) === null) {\n    this.raise(start, \"Invalid number\");\n  }\n\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n  if (octal && this.strict) {\n    this.raise(start, \"Invalid number\");\n  }\n\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) {\n    octal = false;\n  }\n\n  var next = this.input.charCodeAt(this.pos);\n\n  if (next === 46 && !octal) {\n    // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n\n  if ((next === 69 || next === 101) && !octal) {\n    // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n\n    if (next === 43 || next === 45) {\n      ++this.pos;\n    } // '+-'\n\n\n    if (this.readInt(10) === null) {\n      this.raise(start, \"Invalid number\");\n    }\n  }\n\n  if (isIdentifierStart(this.fullCharCodeAtPos())) {\n    this.raise(this.pos, \"Identifier directly after number\");\n  }\n\n  var str = this.input.slice(start, this.pos);\n  var val = octal ? parseInt(str, 8) : parseFloat(str);\n  return this.finishToken(types.num, val);\n}; // Read a string value, interpreting backslash-escapes.\n\n\npp$8.readCodePoint = function () {\n  var ch = this.input.charCodeAt(this.pos),\n      code;\n\n  if (ch === 123) {\n    // '{'\n    if (this.options.ecmaVersion < 6) {\n      this.unexpected();\n    }\n\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n\n    if (code > 0x10FFFF) {\n      this.invalidStringToken(codePos, \"Code point out of bounds\");\n    }\n  } else {\n    code = this.readHexChar(4);\n  }\n\n  return code;\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) {\n    return String.fromCharCode(code);\n  }\n\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\n\npp$8.readString = function (quote) {\n  var this$1 = this;\n  var out = \"\",\n      chunkStart = ++this.pos;\n\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) {\n      this$1.raise(this$1.start, \"Unterminated string constant\");\n    }\n\n    var ch = this$1.input.charCodeAt(this$1.pos);\n\n    if (ch === quote) {\n      break;\n    }\n\n    if (ch === 92) {\n      // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(false);\n      chunkStart = this$1.pos;\n    } else {\n      if (isNewLine(ch, this$1.options.ecmaVersion >= 10)) {\n        this$1.raise(this$1.start, \"Unterminated string constant\");\n      }\n\n      ++this$1.pos;\n    }\n  }\n\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out);\n}; // Reads template string tokens.\n\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$8.tryReadTemplateToken = function () {\n  this.inTemplateElement = true;\n\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err;\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$8.invalidStringToken = function (position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR;\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$8.readTmplToken = function () {\n  var this$1 = this;\n  var out = \"\",\n      chunkStart = this.pos;\n\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) {\n      this$1.raise(this$1.start, \"Unterminated template\");\n    }\n\n    var ch = this$1.input.charCodeAt(this$1.pos);\n\n    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) {\n      // '`', '${'\n      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this$1.pos += 2;\n          return this$1.finishToken(types.dollarBraceL);\n        } else {\n          ++this$1.pos;\n          return this$1.finishToken(types.backQuote);\n        }\n      }\n\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      return this$1.finishToken(types.template, out);\n    }\n\n    if (ch === 92) {\n      // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(true);\n      chunkStart = this$1.pos;\n    } else if (isNewLine(ch)) {\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      ++this$1.pos;\n\n      switch (ch) {\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos) === 10) {\n            ++this$1.pos;\n          }\n\n        case 10:\n          out += \"\\n\";\n          break;\n\n        default:\n          out += String.fromCharCode(ch);\n          break;\n      }\n\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n\n      chunkStart = this$1.pos;\n    } else {\n      ++this$1.pos;\n    }\n  }\n}; // Reads a template token to search for the end, without validating any escape sequences\n\n\npp$8.readInvalidTemplateToken = function () {\n  var this$1 = this;\n\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this$1.input[this$1.pos]) {\n      case \"\\\\\":\n        ++this$1.pos;\n        break;\n\n      case \"$\":\n        if (this$1.input[this$1.pos + 1] !== \"{\") {\n          break;\n        }\n\n      // falls through\n\n      case \"`\":\n        return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos));\n      // no default\n    }\n  }\n\n  this.raise(this.start, \"Unterminated template\");\n}; // Used to read escaped characters\n\n\npp$8.readEscapedChar = function (inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n\n  switch (ch) {\n    case 110:\n      return \"\\n\";\n    // 'n' -> '\\n'\n\n    case 114:\n      return \"\\r\";\n    // 'r' -> '\\r'\n\n    case 120:\n      return String.fromCharCode(this.readHexChar(2));\n    // 'x'\n\n    case 117:\n      return codePointToString(this.readCodePoint());\n    // 'u'\n\n    case 116:\n      return \"\\t\";\n    // 't' -> '\\t'\n\n    case 98:\n      return \"\\b\";\n    // 'b' -> '\\b'\n\n    case 118:\n      return \"\\u000b\";\n    // 'v' -> '\\u000b'\n\n    case 102:\n      return \"\\f\";\n    // 'f' -> '\\f'\n\n    case 13:\n      if (this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n      }\n\n    // '\\r\\n'\n\n    case 10:\n      // ' \\n'\n      if (this.options.locations) {\n        this.lineStart = this.pos;\n        ++this.curLine;\n      }\n\n      return \"\";\n\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n\n        this.pos += octalStr.length - 1;\n        ch = this.input.charCodeAt(this.pos);\n\n        if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n          this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? \"Octal literal in template string\" : \"Octal literal in strict mode\");\n        }\n\n        return String.fromCharCode(octal);\n      }\n\n      return String.fromCharCode(ch);\n  }\n}; // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n\npp$8.readHexChar = function (len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n\n  if (n === null) {\n    this.invalidStringToken(codePos, \"Bad character escape sequence\");\n  }\n\n  return n;\n}; // Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\n\npp$8.readWord1 = function () {\n  var this$1 = this;\n  this.containsEsc = false;\n  var word = \"\",\n      first = true,\n      chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n\n  while (this.pos < this.input.length) {\n    var ch = this$1.fullCharCodeAtPos();\n\n    if (isIdentifierChar(ch, astral)) {\n      this$1.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) {\n      // \"\\\"\n      this$1.containsEsc = true;\n      word += this$1.input.slice(chunkStart, this$1.pos);\n      var escStart = this$1.pos;\n\n      if (this$1.input.charCodeAt(++this$1.pos) !== 117) // \"u\"\n        {\n          this$1.invalidStringToken(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n        }\n\n      ++this$1.pos;\n      var esc = this$1.readCodePoint();\n\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {\n        this$1.invalidStringToken(escStart, \"Invalid Unicode escape\");\n      }\n\n      word += codePointToString(esc);\n      chunkStart = this$1.pos;\n    } else {\n      break;\n    }\n\n    first = false;\n  }\n\n  return word + this.input.slice(chunkStart, this.pos);\n}; // Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\n\npp$8.readWord = function () {\n  var word = this.readWord1();\n  var type = types.name;\n\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) {\n      this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word);\n    }\n\n    type = keywords$1[word];\n  }\n\n  return this.finishToken(type, word);\n}; // Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\n\nvar version = \"5.7.3\"; // The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse();\n} // This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression();\n} // Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\n\nfunction tokenizer(input, options) {\n  return new Parser(options, input);\n} // This is a terrible kludge to support the existing, pre-ES6\n// interface where the loose parser module retroactively adds exports\n// to this module.\n\n\nvar parse_dammit;\nvar LooseParser;\nvar pluginsLoose; // eslint-disable-line camelcase\n\nfunction addLooseExports(parse, Parser$$1, plugins$$1) {\n  parse_dammit = parse; // eslint-disable-line camelcase\n\n  LooseParser = Parser$$1;\n  pluginsLoose = plugins$$1;\n}\n\nexport { version, parse, parseExpressionAt, tokenizer, parse_dammit, LooseParser, pluginsLoose, addLooseExports, Parser, plugins, defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, types as tokTypes, keywords$1 as keywordTypes, TokContext, types$1 as tokContexts, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/detective/node_modules/acorn/dist/acorn.es.js"],"names":["reservedWords","strict","strictBind","ecma5AndLessKeywords","keywords","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","RegExp","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","code","set","pos","i","length","isIdentifierStart","astral","test","String","fromCharCode","isIdentifierChar","TokenType","label","conf","keyword","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","binop","updateContext","name","prec","keywords$1","kw","options","types","num","regexp","string","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","arrow","template","invalidTemplate","ellipsis","backQuote","dollarBraceL","eq","assign","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","source","isNewLine","ecma2019String","nonASCIIwhitespace","skipWhiteSpace","ref","Object","prototype","hasOwnProperty","toString","has","obj","propName","call","isArray","Array","Position","line","col","column","offset","n","SourceLocation","p","start","end","sourceFile","getLineInfo","input","cur","lastIndex","match","exec","index","defaultOptions","ecmaVersion","sourceType","onInsertedSemicolon","onTrailingComma","allowReserved","allowReturnOutsideFunction","allowImportExportEverywhere","allowAwaitOutsideFunction","allowHashBang","locations","onToken","onComment","ranges","program","directSourceFile","preserveParens","plugins","getOptions","opts","opt","tokens","token","push","pushComment","array","block","text","startLoc","endLoc","comment","type","value","loc","range","keywordRegexp","words","replace","Parser","startPos","reserved","v","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","loadPlugins","lineStart","lastIndexOf","curLine","slice","split","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","context","initialContext","exprAllowed","inModule","strictDirective","potentialArrowAt","inFunction","inGenerator","inAsync","yieldPos","awaitPos","labels","skipLineComment","scopeStack","enterFunctionScope","regexpState","isKeyword","word","isReservedWord","extend","f","pluginConfigs","this$1","plugin","Error","parse","node","startNode","nextToken","parseTopLevel","pp","literal","eat","next","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","notNext","expect","raise","DestructuringErrors","shorthandAssign","trailingComma","parenthesizedAssign","parenthesizedBind","doubleProto","checkPatternErrors","refDestructuringErrors","raiseRecoverable","parens","checkExpressionErrors","andThrow","checkYieldAwaitInDefaultParams","isSimpleAssignTarget","expr","expression","pp$1","exports","body","stmt","parseStatement","adaptDirectivePrologue","finishNode","loopLabel","kind","switchLabel","isLet","skip","nextCh","charCodeAt","ident","isAsyncFunction","charAt","declaration","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseImport","parseExport","maybeName","parseExpression","parseLabeledStatement","parseExpressionStatement","isBreak","parseIdent","lab","pop","parseParenExpression","awaitAt","enterLexicalScope","parseFor","init$1","parseVar","declarations","init","await","parseForIn","toAssignable","checkLVal","isAsync","parseFunction","consequent","alternate","argument","discriminant","cases","sawDefault","isCase","exitLexicalScope","empty","handler","clause","param","parseBindingAtom","finalizer","object","i$1","list","label$1","statementStart","generator","async","createNewLexicalScope","update","id","left","right","parseMaybeAssign","isFor","decl","parseVarId","isStatement","allowExpressionBody","initFunction","oldInGen","oldInAsync","oldYieldPos","oldAwaitPos","oldInFunc","parseFunctionParams","parseFunctionBody","params","parseBindingList","parseClassId","parseClassSuper","classBody","hadConstructor","member","parseClassMember","method","tryContextual","k","noLineBreak","key","computed","startNodeAt","static","isGenerator","parsePropertyName","parseClassMethod","parseMethod","superClass","parseExprSubscripts","parseExprAtom","checkExport","fNode","cNode","shouldParseExportStatement","checkVariableExport","specifiers","parseExportSpecifiers","spec","checkUnreserved","local","checkPatternExport","pat","properties","prop","list$1","elements","elt","decls","nodes","first","exported","parseImportSpecifiers","node$1","node$2","imported","statements","isDirectiveCandidate","directive","raw","statement","pp$2","isBinding","toAssignableList","operator","exprList","last","parseSpread","parseRestBinding","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","bindingType","checkClashes","canDeclareVarName","canDeclareLexicalName","declareVarName","declareLexicalName","pp$3","checkPropClash","propHash","shorthand","proto","other","redefinition","get","noIn","expressions","afterLeftParse","parseYield","ownDestructuringErrors","oldParenAssign","oldTrailingComma","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","op","buildBinary","sawUnary","parseAwait","skipArrowSubscripts","result","parseSubscripts","base","noCalls","maybeAsyncArrow","property","parseExprList","parseArrowExpression","callee","arguments","tag","quasi","parseTemplate","isTagged","canBeArrow","parseLiteral","regex","pattern","flags","parseParenAndDistinguishExpression","parseNew","val","innerStartPos","innerStartLoc","lastIsComma","spreadStart","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","par","item","empty$1","meta","parseTemplateElement","cooked","tail","curElt","quasis","isAsyncProp","isPattern","parseProperty","parsePropertyValue","paramCount","isArrowFunction","isExpression","oldStrict","useStrict","checkParams","nonSimple","isSimpleParamList","oldLabels","exitFunctionScope","allowDuplicates","nameHash","indexOf","re","liberal","delegate","pp$4","message","err","SyntaxError","raisedAt","pp$5","target","sources","len","var","lexical","childVar","parentLexical","parentScope","childScope","currentScope","Node","parser","pp$6","TokContext","isExpr","preserveSpace","override","types$1","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","tryReadTemplateToken","f_stat","f_expr","f_expr_gen","f_gen","pp$7","braceIsBlock","prevType","parent","curContext","inGeneratorContext","out","statementParens","allowed","data","apply","$LONE","General_Category","gc","sc","Script_Extensions","scx","Script","pp$9","RegExpValidationState","validFlags","switchU","switchN","lastIntValue","lastStringValue","lastAssertionIsQuantifiable","numCapturingParens","maxBackReference","groupNames","backReferenceNames","reset","unicode","at","s","l","c","nextIndex","current","lookahead","advance","ch","codePointToString$1","validateRegExpFlags","state","flag","validateRegExpPattern","regexp_pattern","regexp_disjunction","regexp_alternative","regexp_eatQuantifier","regexp_eatTerm","regexp_eatAssertion","regexp_eatAtom","regexp_eatExtendedAtom","lookbehind","noError","regexp_eatQuantifierPrefix","regexp_eatBracedQuantifier","min","max","regexp_eatDecimalDigits","regexp_eatPatternCharacters","regexp_eatReverseSolidusAtomEscape","regexp_eatCharacterClass","regexp_eatUncapturingGroup","regexp_eatCapturingGroup","regexp_eatAtomEscape","regexp_groupSpecifier","regexp_eatInvalidBracedQuantifier","regexp_eatExtendedPatternCharacter","regexp_eatSyntaxCharacter","isSyntaxCharacter","regexp_eatGroupName","regexp_eatRegExpIdentifierName","regexp_eatRegExpIdentifierStart","regexp_eatRegExpIdentifierPart","regexp_eatRegExpUnicodeEscapeSequence","isRegExpIdentifierStart","isRegExpIdentifierPart","regexp_eatBackReference","regexp_eatCharacterClassEscape","regexp_eatCharacterEscape","regexp_eatKGroupName","regexp_eatDecimalEscape","regexp_eatControlEscape","regexp_eatCControlLetter","regexp_eatZero","regexp_eatHexEscapeSequence","regexp_eatLegacyOctalEscapeSequence","regexp_eatIdentityEscape","regexp_eatControlLetter","isDecimalDigit","isControlLetter","regexp_eatFixedHexDigits","lead","leadSurrogateEnd","trail","regexp_eatHexDigits","isValidUnicode","isCharacterClassEscape","regexp_eatUnicodePropertyValueExpression","regexp_eatUnicodePropertyName","regexp_eatUnicodePropertyValue","regexp_validateUnicodePropertyNameAndValue","regexp_eatLoneUnicodePropertyNameOrValue","nameOrValue","regexp_validateUnicodePropertyNameOrValue","isUnicodePropertyNameCharacter","isUnicodePropertyValueCharacter","regexp_classRanges","regexp_eatClassAtom","regexp_eatClassEscape","ch$1","isOctalDigit","regexp_eatClassControlLetter","isHexDigit","hexToInt","regexp_eatOctalDigit","n1","n2","Token","pp$8","getToken","Symbol","iterator","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","loop","readToken_dot","readNumber","next2","readToken_slash","readRegexp","finishOp","readToken_mult_modulo_exp","size","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readRadixNumber","readString","codePointToString","str","escaped","inClass","flagsStart","readWord1","e","readInt","radix","total","Infinity","startsWithDot","octal","parseInt","parseFloat","readCodePoint","codePos","readHexChar","invalidStringToken","quote","chunkStart","readEscapedChar","INVALID_TEMPLATE_ESCAPE_ERROR","inTemplateElement","readTmplToken","readInvalidTemplateToken","position","inTemplate","octalStr","substr","escStart","esc","version","parseExpressionAt","tokenizer","parse_dammit","LooseParser","pluginsLoose","addLooseExports","Parser$$1","plugins$$1","tokTypes","keywordTypes","tokContexts"],"mappings":"AAAA;AAEA,IAAIA,aAAa,GAAG;AAClB,KAAG,qNADe;AAElB,KAAG,8CAFe;AAGlB,KAAG,MAHe;AAIlBC,EAAAA,MAAM,EAAE,wEAJU;AAKlBC,EAAAA,UAAU,EAAE;AALM,CAApB,C,CAQA;;AAEA,IAAIC,oBAAoB,GAAG,6KAA3B;AAEA,IAAIC,QAAQ,GAAG;AACb,KAAGD,oBADU;AAEb,KAAGA,oBAAoB,GAAG;AAFb,CAAf;AAKA,IAAIE,yBAAyB,GAAG,iBAAhC,C,CAEA;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,4BAA4B,GAAG,2tIAAnC;AACA,IAAIC,uBAAuB,GAAG,qjFAA9B;AAEA,IAAIC,uBAAuB,GAAG,IAAIC,MAAJ,CAAW,MAAMH,4BAAN,GAAqC,GAAhD,CAA9B;AACA,IAAII,kBAAkB,GAAG,IAAID,MAAJ,CAAW,MAAMH,4BAAN,GAAqCC,uBAArC,GAA+D,GAA1E,CAAzB;AAEAD,4BAA4B,GAAGC,uBAAuB,GAAG,IAAzD,C,CAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,IAAII,0BAA0B,GAAG,CAAC,CAAD,EAAG,EAAH,EAAM,CAAN,EAAQ,EAAR,EAAW,CAAX,EAAa,EAAb,EAAgB,CAAhB,EAAkB,CAAlB,EAAoB,CAApB,EAAsB,EAAtB,EAAyB,CAAzB,EAA2B,EAA3B,EAA8B,EAA9B,EAAiC,GAAjC,EAAqC,EAArC,EAAwC,EAAxC,EAA2C,GAA3C,EAA+C,EAA/C,EAAkD,CAAlD,EAAoD,EAApD,EAAuD,EAAvD,EAA0D,EAA1D,EAA6D,EAA7D,EAAgE,EAAhE,EAAmE,CAAnE,EAAqE,EAArE,EAAwE,EAAxE,EAA2E,EAA3E,EAA8E,CAA9E,EAAgF,EAAhF,EAAmF,CAAnF,EAAqF,CAArF,EAAuF,CAAvF,EAAyF,CAAzF,EAA2F,EAA3F,EAA8F,GAA9F,EAAkG,EAAlG,EAAqG,EAArG,EAAwG,CAAxG,EAA0G,EAA1G,EAA6G,CAA7G,EAA+G,EAA/G,EAAkH,CAAlH,EAAoH,EAApH,EAAuH,GAAvH,EAA2H,GAA3H,EAA+H,EAA/H,EAAkI,EAAlI,EAAqI,EAArI,EAAwI,CAAxI,EAA0I,GAA1I,EAA8I,CAA9I,EAAgJ,CAAhJ,EAAkJ,CAAlJ,EAAoJ,CAApJ,EAAsJ,EAAtJ,EAAyJ,CAAzJ,EAA2J,CAA3J,EAA6J,CAA7J,EAA+J,CAA/J,EAAiK,CAAjK,EAAmK,EAAnK,EAAsK,EAAtK,EAAyK,EAAzK,EAA4K,EAA5K,EAA+K,EAA/K,EAAkL,EAAlL,EAAqL,EAArL,EAAwL,CAAxL,EAA0L,CAA1L,EAA4L,EAA5L,EAA+L,EAA/L,EAAkM,EAAlM,EAAqM,EAArM,EAAwM,EAAxM,EAA2M,EAA3M,EAA8M,CAA9M,EAAgN,CAAhN,EAAkN,EAAlN,EAAqN,CAArN,EAAuN,EAAvN,EAA0N,CAA1N,EAA4N,CAA5N,EAA8N,CAA9N,EAAgO,CAAhO,EAAkO,EAAlO,EAAqO,EAArO,EAAwO,EAAxO,EAA2O,CAA3O,EAA6O,EAA7O,EAAgP,EAAhP,EAAmP,CAAnP,EAAqP,CAArP,EAAuP,EAAvP,EAA0P,EAA1P,EAA6P,EAA7P,EAAgQ,EAAhQ,EAAmQ,EAAnQ,EAAsQ,EAAtQ,EAAyQ,EAAzQ,EAA4Q,EAA5Q,EAA+Q,EAA/Q,EAAkR,GAAlR,EAAsR,EAAtR,EAAyR,EAAzR,EAA4R,EAA5R,EAA+R,EAA/R,EAAkS,EAAlS,EAAqS,EAArS,EAAwS,EAAxS,EAA2S,GAA3S,EAA+S,EAA/S,EAAkT,EAAlT,EAAqT,CAArT,EAAuT,CAAvT,EAAyT,EAAzT,EAA4T,GAA5T,EAAgU,EAAhU,EAAmU,EAAnU,EAAsU,EAAtU,EAAyU,EAAzU,EAA4U,EAA5U,EAA+U,EAA/U,EAAkV,EAAlV,EAAqV,EAArV,EAAwV,CAAxV,EAA0V,EAA1V,EAA6V,EAA7V,EAAgW,CAAhW,EAAkW,CAAlW,EAAoW,EAApW,EAAuW,EAAvW,EAA0W,EAA1W,EAA6W,CAA7W,EAA+W,EAA/W,EAAkX,CAAlX,EAAoX,CAApX,EAAsX,CAAtX,EAAwX,EAAxX,EAA2X,EAA3X,EAA8X,CAA9X,EAAgY,EAAhY,EAAmY,EAAnY,EAAsY,CAAtY,EAAwY,CAAxY,EAA0Y,CAA1Y,EAA4Y,CAA5Y,EAA8Y,CAA9Y,EAAgZ,CAAhZ,EAAkZ,EAAlZ,EAAqZ,CAArZ,EAAuZ,CAAvZ,EAAyZ,CAAzZ,EAA2Z,EAA3Z,EAA8Z,EAA9Z,EAAia,CAAja,EAAma,CAAna,EAAqa,CAAra,EAAua,CAAva,EAAya,EAAza,EAA4a,CAA5a,EAA8a,CAA9a,EAAgb,CAAhb,EAAkb,CAAlb,EAAob,CAApb,EAAsb,CAAtb,EAAwb,CAAxb,EAA0b,CAA1b,EAA4b,EAA5b,EAA+b,CAA/b,EAAic,EAAjc,EAAoc,CAApc,EAAsc,GAAtc,EAA0c,EAA1c,EAA6c,EAA7c,EAAgd,CAAhd,EAAkd,EAAld,EAAqd,EAArd,EAAwd,EAAxd,EAA2d,CAA3d,EAA6d,CAA7d,EAA+d,CAA/d,EAAie,GAAje,EAAqe,EAAre,EAAwe,EAAxe,EAA2e,CAA3e,EAA6e,EAA7e,EAAgf,EAAhf,EAAmf,EAAnf,EAAsf,CAAtf,EAAwf,EAAxf,EAA2f,EAA3f,EAA8f,EAA9f,EAAigB,EAAjgB,EAAogB,GAApgB,EAAwgB,EAAxgB,EAA2gB,GAA3gB,EAA+gB,EAA/gB,EAAkhB,EAAlhB,EAAqhB,CAArhB,EAAuhB,GAAvhB,EAA2hB,CAA3hB,EAA6hB,EAA7hB,EAAgiB,EAAhiB,EAAmiB,CAAniB,EAAqiB,CAAriB,EAAuiB,EAAviB,EAA0iB,CAA1iB,EAA4iB,EAA5iB,EAA+iB,EAA/iB,EAAkjB,CAAljB,EAAojB,CAApjB,EAAsjB,EAAtjB,EAAyjB,CAAzjB,EAA2jB,EAA3jB,EAA8jB,EAA9jB,EAAikB,GAAjkB,EAAqkB,CAArkB,EAAukB,CAAvkB,EAAykB,EAAzkB,EAA4kB,EAA5kB,EAA+kB,CAA/kB,EAAilB,EAAjlB,EAAolB,EAAplB,EAAulB,GAAvlB,EAA2lB,CAA3lB,EAA6lB,CAA7lB,EAA+lB,CAA/lB,EAAimB,CAAjmB,EAAmmB,EAAnmB,EAAsmB,EAAtmB,EAAymB,CAAzmB,EAA2mB,EAA3mB,EAA8mB,CAA9mB,EAAgnB,CAAhnB,EAAknB,CAAlnB,EAAonB,CAApnB,EAAsnB,EAAtnB,EAAynB,EAAznB,EAA4nB,CAA5nB,EAA8nB,GAA9nB,EAAkoB,EAAloB,EAAqoB,GAAroB,EAAyoB,GAAzoB,EAA6oB,GAA7oB,EAAipB,GAAjpB,EAAqpB,EAArpB,EAAwpB,GAAxpB,EAA4pB,IAA5pB,EAAiqB,IAAjqB,EAAsqB,IAAtqB,EAA2qB,GAA3qB,EAA+qB,IAA/qB,EAAorB,GAAprB,EAAwrB,CAAxrB,EAA0rB,EAA1rB,EAA6rB,GAA7rB,EAAisB,EAAjsB,EAAosB,EAApsB,EAAusB,EAAvsB,EAA0sB,EAA1sB,EAA6sB,CAA7sB,EAA+sB,EAA/sB,EAAktB,EAAltB,EAAqtB,CAArtB,EAAutB,EAAvtB,EAA0tB,GAA1tB,EAA8tB,EAA9tB,EAAiuB,GAAjuB,EAAquB,EAAruB,EAAwuB,EAAxuB,EAA2uB,CAA3uB,EAA6uB,EAA7uB,EAAgvB,EAAhvB,EAAmvB,EAAnvB,EAAsvB,CAAtvB,EAAwvB,EAAxvB,EAA2vB,IAA3vB,EAAgwB,EAAhwB,EAAmwB,GAAnwB,EAAuwB,IAAvwB,EAA4wB,GAA5wB,EAAgxB,EAAhxB,EAAmxB,GAAnxB,EAAuxB,IAAvxB,EAA4xB,GAA5xB,EAAgyB,CAAhyB,EAAkyB,EAAlyB,EAAqyB,CAAryB,EAAuyB,CAAvyB,EAAyyB,CAAzyB,EAA2yB,CAA3yB,EAA6yB,IAA7yB,EAAkzB,EAAlzB,EAAqzB,CAArzB,EAAuzB,EAAvzB,EAA0zB,CAA1zB,EAA4zB,CAA5zB,EAA8zB,CAA9zB,EAAg0B,CAAh0B,EAAk0B,CAAl0B,EAAo0B,CAAp0B,EAAs0B,CAAt0B,EAAw0B,CAAx0B,EAA00B,CAA10B,EAA40B,EAA50B,EAA+0B,CAA/0B,EAAi1B,CAAj1B,EAAm1B,CAAn1B,EAAq1B,CAAr1B,EAAu1B,CAAv1B,EAAy1B,EAAz1B,EAA41B,CAA51B,EAA81B,CAA91B,EAAg2B,CAAh2B,EAAk2B,CAAl2B,EAAo2B,CAAp2B,EAAs2B,CAAt2B,EAAw2B,CAAx2B,EAA02B,EAA12B,EAA62B,CAA72B,EAA+2B,CAA/2B,EAAi3B,CAAj3B,EAAm3B,CAAn3B,EAAq3B,CAAr3B,EAAu3B,CAAv3B,EAAy3B,CAAz3B,EAA23B,CAA33B,EAA63B,CAA73B,EAA+3B,GAA/3B,EAAm4B,CAAn4B,EAAq4B,EAAr4B,EAAw4B,CAAx4B,EAA04B,EAA14B,EAA64B,CAA74B,EAA+4B,EAA/4B,EAAk5B,CAAl5B,EAAo5B,EAAp5B,EAAu5B,CAAv5B,EAAy5B,EAAz5B,EAA45B,CAA55B,EAA85B,EAA95B,EAAi6B,CAAj6B,EAAm6B,EAAn6B,EAAs6B,CAAt6B,EAAw6B,EAAx6B,EAA26B,CAA36B,EAA66B,EAA76B,EAAg7B,CAAh7B,EAAk7B,EAAl7B,EAAq7B,CAAr7B,EAAu7B,CAAv7B,EAAy7B,IAAz7B,EAA87B,GAA97B,EAAk8B,EAAl8B,EAAq8B,EAAr8B,EAAw8B,IAAx8B,EAA68B,CAA78B,EAA+8B,CAA/8B,EAAi9B,EAAj9B,EAAo9B,CAAp9B,EAAs9B,CAAt9B,EAAw9B,CAAx9B,EAA09B,CAA19B,EAA49B,CAA59B,EAA89B,CAA99B,EAAg+B,CAAh+B,EAAk+B,CAAl+B,EAAo+B,CAAp+B,EAAs+B,CAAt+B,EAAw+B,CAAx+B,EAA0+B,CAA1+B,EAA4+B,CAA5+B,EAA8+B,CAA9+B,EAAg/B,CAAh/B,EAAk/B,CAAl/B,EAAo/B,CAAp/B,EAAs/B,CAAt/B,EAAw/B,CAAx/B,EAA0/B,CAA1/B,EAA4/B,CAA5/B,EAA8/B,CAA9/B,EAAggC,CAAhgC,EAAkgC,CAAlgC,EAAogC,CAApgC,EAAsgC,CAAtgC,EAAwgC,CAAxgC,EAA0gC,CAA1gC,EAA4gC,CAA5gC,EAA8gC,CAA9gC,EAAghC,CAAhhC,EAAkhC,CAAlhC,EAAohC,CAAphC,EAAshC,CAAthC,EAAwhC,CAAxhC,EAA0hC,CAA1hC,EAA4hC,CAA5hC,EAA8hC,CAA9hC,EAAgiC,CAAhiC,EAAkiC,CAAliC,EAAoiC,CAApiC,EAAsiC,CAAtiC,EAAwiC,CAAxiC,EAA0iC,CAA1iC,EAA4iC,CAA5iC,EAA8iC,CAA9iC,EAAgjC,CAAhjC,EAAkjC,CAAljC,EAAojC,CAApjC,EAAsjC,CAAtjC,EAAwjC,CAAxjC,EAA0jC,CAA1jC,EAA4jC,CAA5jC,EAA8jC,CAA9jC,EAAgkC,CAAhkC,EAAkkC,EAAlkC,EAAqkC,CAArkC,EAAukC,CAAvkC,EAAykC,CAAzkC,EAA2kC,CAA3kC,EAA6kC,CAA7kC,EAA+kC,EAA/kC,EAAklC,IAAllC,EAAulC,KAAvlC,EAA6lC,EAA7lC,EAAgmC,IAAhmC,EAAqmC,EAArmC,EAAwmC,GAAxmC,EAA4mC,CAA5mC,EAA8mC,IAA9mC,EAAmnC,EAAnnC,EAAsnC,IAAtnC,EAA2nC,IAA3nC,EAAgoC,GAAhoC,CAAjC,C,CAEA;;AACA,IAAIC,qBAAqB,GAAG,CAAC,GAAD,EAAK,CAAL,EAAO,GAAP,EAAW,CAAX,EAAa,GAAb,EAAiB,CAAjB,EAAmB,GAAnB,EAAuB,CAAvB,EAAyB,IAAzB,EAA8B,CAA9B,EAAgC,CAAhC,EAAkC,CAAlC,EAAoC,CAApC,EAAsC,CAAtC,EAAwC,EAAxC,EAA2C,CAA3C,EAA6C,CAA7C,EAA+C,CAA/C,EAAiD,GAAjD,EAAqD,CAArD,EAAuD,GAAvD,EAA2D,CAA3D,EAA6D,CAA7D,EAA+D,CAA/D,EAAiE,GAAjE,EAAqE,EAArE,EAAwE,GAAxE,EAA4E,CAA5E,EAA8E,EAA9E,EAAiF,EAAjF,EAAoF,EAApF,EAAuF,CAAvF,EAAyF,EAAzF,EAA4F,CAA5F,EAA8F,EAA9F,EAAiG,EAAjG,EAAoG,EAApG,EAAuG,CAAvG,EAAyG,CAAzG,EAA2G,CAA3G,EAA6G,EAA7G,EAAgH,EAAhH,EAAmH,CAAnH,EAAqH,CAArH,EAAuH,CAAvH,EAAyH,CAAzH,EAA2H,EAA3H,EAA8H,CAA9H,EAAgI,EAAhI,EAAmI,CAAnI,EAAqI,EAArI,EAAwI,EAAxI,EAA2I,CAA3I,EAA6I,CAA7I,EAA+I,CAA/I,EAAiJ,CAAjJ,EAAmJ,EAAnJ,EAAsJ,EAAtJ,EAAyJ,CAAzJ,EAA2J,CAA3J,EAA6J,GAA7J,EAAiK,EAAjK,EAAoK,CAApK,EAAsK,CAAtK,EAAwK,CAAxK,EAA0K,CAA1K,EAA4K,EAA5K,EAA+K,CAA/K,EAAiL,CAAjL,EAAmL,CAAnL,EAAqL,CAArL,EAAuL,CAAvL,EAAyL,CAAzL,EAA2L,CAA3L,EAA6L,EAA7L,EAAgM,CAAhM,EAAkM,EAAlM,EAAqM,CAArM,EAAuM,CAAvM,EAAyM,CAAzM,EAA2M,CAA3M,EAA6M,CAA7M,EAA+M,GAA/M,EAAmN,EAAnN,EAAsN,EAAtN,EAAyN,CAAzN,EAA2N,CAA3N,EAA6N,CAA7N,EAA+N,EAA/N,EAAkO,EAAlO,EAAqO,EAArO,EAAwO,CAAxO,EAA0O,GAA1O,EAA8O,CAA9O,EAAgP,CAAhP,EAAkP,CAAlP,EAAoP,EAApP,EAAuP,CAAvP,EAAyP,EAAzP,EAA4P,EAA5P,EAA+P,EAA/P,EAAkQ,CAAlQ,EAAoQ,EAApQ,EAAuQ,EAAvQ,EAA0Q,CAA1Q,EAA4Q,CAA5Q,EAA8Q,EAA9Q,EAAiR,EAAjR,EAAoR,CAApR,EAAsR,CAAtR,EAAwR,GAAxR,EAA4R,EAA5R,EAA+R,GAA/R,EAAmS,CAAnS,EAAqS,GAArS,EAAyS,CAAzS,EAA2S,EAA3S,EAA8S,CAA9S,EAAgT,CAAhT,EAAkT,CAAlT,EAAoT,CAApT,EAAsT,CAAtT,EAAwT,EAAxT,EAA2T,EAA3T,EAA8T,EAA9T,EAAiU,EAAjU,EAAoU,GAApU,EAAwU,CAAxU,EAA0U,CAA1U,EAA4U,CAA5U,EAA8U,EAA9U,EAAiV,CAAjV,EAAmV,EAAnV,EAAsV,EAAtV,EAAyV,CAAzV,EAA2V,EAA3V,EAA8V,GAA9V,EAAkW,CAAlW,EAAoW,CAApW,EAAsW,CAAtW,EAAwW,CAAxW,EAA0W,CAA1W,EAA4W,CAA5W,EAA8W,CAA9W,EAAgX,CAAhX,EAAkX,CAAlX,EAAoX,CAApX,EAAsX,CAAtX,EAAwX,EAAxX,EAA2X,CAA3X,EAA6X,CAA7X,EAA+X,CAA/X,EAAiY,CAAjY,EAAmY,CAAnY,EAAqY,CAArY,EAAuY,CAAvY,EAAyY,GAAzY,EAA6Y,CAA7Y,EAA+Y,KAA/Y,EAAqZ,CAArZ,EAAuZ,GAAvZ,EAA2Z,CAA3Z,EAA6Z,EAA7Z,EAAga,CAAha,EAAka,EAAla,EAAqa,CAAra,EAAua,IAAva,EAA4a,EAA5a,EAA+a,EAA/a,EAAkb,CAAlb,EAAob,KAApb,EAA0b,CAA1b,EAA4b,IAA5b,EAAic,CAAjc,EAAmc,CAAnc,EAAqc,CAArc,EAAuc,CAAvc,EAAyc,CAAzc,EAA2c,CAA3c,EAA6c,CAA7c,EAA+c,EAA/c,EAAkd,CAAld,EAAod,GAApd,EAAwd,CAAxd,EAA0d,IAA1d,EAA+d,EAA/d,EAAke,GAAle,EAAse,EAAte,EAAye,CAAze,EAA2e,EAA3e,EAA8e,CAA9e,EAAgf,CAAhf,EAAkf,EAAlf,EAAqf,CAArf,EAAuf,EAAvf,EAA0f,CAA1f,EAA4f,CAA5f,EAA8f,EAA9f,EAAigB,IAAjgB,EAAsgB,CAAtgB,EAAwgB,CAAxgB,EAA0gB,EAA1gB,EAA6gB,CAA7gB,EAA+gB,CAA/gB,EAAihB,CAAjhB,EAAmhB,CAAnhB,EAAqhB,CAArhB,EAAuhB,CAAvhB,EAAyhB,IAAzhB,EAA8hB,CAA9hB,EAAgiB,GAAhiB,EAAoiB,CAApiB,EAAsiB,CAAtiB,EAAwiB,CAAxiB,EAA0iB,MAA1iB,EAAijB,GAAjjB,CAA5B,C,CAEA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,GAA7B,EAAkC;AAChC,MAAIC,GAAG,GAAG,OAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtCD,IAAAA,GAAG,IAAID,GAAG,CAACE,CAAD,CAAV;;AACA,QAAID,GAAG,GAAGF,IAAV,EAAgB;AAAE,aAAO,KAAP;AAAc;;AAChCE,IAAAA,GAAG,IAAID,GAAG,CAACE,CAAC,GAAG,CAAL,CAAV;;AACA,QAAID,GAAG,IAAIF,IAAX,EAAiB;AAAE,aAAO,IAAP;AAAa;AACjC;AACF,C,CAED;;;AAEA,SAASK,iBAAT,CAA2BL,IAA3B,EAAiCM,MAAjC,EAAyC;AACvC,MAAIN,IAAI,GAAG,EAAX,EAAe;AAAE,WAAOA,IAAI,KAAK,EAAhB;AAAoB;;AACrC,MAAIA,IAAI,GAAG,EAAX,EAAe;AAAE,WAAO,IAAP;AAAa;;AAC9B,MAAIA,IAAI,GAAG,EAAX,EAAe;AAAE,WAAOA,IAAI,KAAK,EAAhB;AAAoB;;AACrC,MAAIA,IAAI,GAAG,GAAX,EAAgB;AAAE,WAAO,IAAP;AAAa;;AAC/B,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAAE,WAAOA,IAAI,IAAI,IAAR,IAAgBN,uBAAuB,CAACa,IAAxB,CAA6BC,MAAM,CAACC,YAAP,CAAoBT,IAApB,CAA7B,CAAvB;AAAgF;;AACtG,MAAIM,MAAM,KAAK,KAAf,EAAsB;AAAE,WAAO,KAAP;AAAc;;AACtC,SAAOP,aAAa,CAACC,IAAD,EAAOH,0BAAP,CAApB;AACD,C,CAED;;;AAEA,SAASa,gBAAT,CAA0BV,IAA1B,EAAgCM,MAAhC,EAAwC;AACtC,MAAIN,IAAI,GAAG,EAAX,EAAe;AAAE,WAAOA,IAAI,KAAK,EAAhB;AAAoB;;AACrC,MAAIA,IAAI,GAAG,EAAX,EAAe;AAAE,WAAO,IAAP;AAAa;;AAC9B,MAAIA,IAAI,GAAG,EAAX,EAAe;AAAE,WAAO,KAAP;AAAc;;AAC/B,MAAIA,IAAI,GAAG,EAAX,EAAe;AAAE,WAAO,IAAP;AAAa;;AAC9B,MAAIA,IAAI,GAAG,EAAX,EAAe;AAAE,WAAOA,IAAI,KAAK,EAAhB;AAAoB;;AACrC,MAAIA,IAAI,GAAG,GAAX,EAAgB;AAAE,WAAO,IAAP;AAAa;;AAC/B,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAAE,WAAOA,IAAI,IAAI,IAAR,IAAgBJ,kBAAkB,CAACW,IAAnB,CAAwBC,MAAM,CAACC,YAAP,CAAoBT,IAApB,CAAxB,CAAvB;AAA2E;;AACjG,MAAIM,MAAM,KAAK,KAAf,EAAsB;AAAE,WAAO,KAAP;AAAc;;AACtC,SAAOP,aAAa,CAACC,IAAD,EAAOH,0BAAP,CAAb,IAAmDE,aAAa,CAACC,IAAD,EAAOF,qBAAP,CAAvE;AACD,C,CAED;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIa,SAAS,GAAG,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgC;AAC9C,MAAKA,IAAI,KAAK,KAAK,CAAnB,EAAuBA,IAAI,GAAG,EAAP;AAEvB,OAAKD,KAAL,GAAaA,KAAb;AACA,OAAKE,OAAL,GAAeD,IAAI,CAACC,OAApB;AACA,OAAKC,UAAL,GAAkB,CAAC,CAACF,IAAI,CAACE,UAAzB;AACA,OAAKC,UAAL,GAAkB,CAAC,CAACH,IAAI,CAACG,UAAzB;AACA,OAAKC,MAAL,GAAc,CAAC,CAACJ,IAAI,CAACI,MAArB;AACA,OAAKC,QAAL,GAAgB,CAAC,CAACL,IAAI,CAACK,QAAvB;AACA,OAAKC,MAAL,GAAc,CAAC,CAACN,IAAI,CAACM,MAArB;AACA,OAAKC,OAAL,GAAe,CAAC,CAACP,IAAI,CAACO,OAAtB;AACA,OAAKC,KAAL,GAAaR,IAAI,CAACQ,KAAL,IAAc,IAA3B;AACA,OAAKC,aAAL,GAAqB,IAArB;AACD,CAbD;;AAeA,SAASD,KAAT,CAAeE,IAAf,EAAqBC,IAArB,EAA2B;AACzB,SAAO,IAAIb,SAAJ,CAAcY,IAAd,EAAoB;AAACR,IAAAA,UAAU,EAAE,IAAb;AAAmBM,IAAAA,KAAK,EAAEG;AAA1B,GAApB,CAAP;AACD;;AACD,IAAIT,UAAU,GAAG;AAACA,EAAAA,UAAU,EAAE;AAAb,CAAjB;AACA,IAAIC,UAAU,GAAG;AAACA,EAAAA,UAAU,EAAE;AAAb,CAAjB,C,CAEA;;AAEA,IAAIS,UAAU,GAAG,EAAjB,C,CAEA;;AACA,SAASC,EAAT,CAAYH,IAAZ,EAAkBI,OAAlB,EAA2B;AACzB,MAAKA,OAAO,KAAK,KAAK,CAAtB,EAA0BA,OAAO,GAAG,EAAV;AAE1BA,EAAAA,OAAO,CAACb,OAAR,GAAkBS,IAAlB;AACA,SAAOE,UAAU,CAACF,IAAD,CAAV,GAAmB,IAAIZ,SAAJ,CAAcY,IAAd,EAAoBI,OAApB,CAA1B;AACD;;AAED,IAAIC,KAAK,GAAG;AACVC,EAAAA,GAAG,EAAE,IAAIlB,SAAJ,CAAc,KAAd,EAAqBK,UAArB,CADK;AAEVc,EAAAA,MAAM,EAAE,IAAInB,SAAJ,CAAc,QAAd,EAAwBK,UAAxB,CAFE;AAGVe,EAAAA,MAAM,EAAE,IAAIpB,SAAJ,CAAc,QAAd,EAAwBK,UAAxB,CAHE;AAIVO,EAAAA,IAAI,EAAE,IAAIZ,SAAJ,CAAc,MAAd,EAAsBK,UAAtB,CAJI;AAKVgB,EAAAA,GAAG,EAAE,IAAIrB,SAAJ,CAAc,KAAd,CALK;AAOV;AACAsB,EAAAA,QAAQ,EAAE,IAAItB,SAAJ,CAAc,GAAd,EAAmB;AAACI,IAAAA,UAAU,EAAE,IAAb;AAAmBC,IAAAA,UAAU,EAAE;AAA/B,GAAnB,CARA;AASVkB,EAAAA,QAAQ,EAAE,IAAIvB,SAAJ,CAAc,GAAd,CATA;AAUVwB,EAAAA,MAAM,EAAE,IAAIxB,SAAJ,CAAc,GAAd,EAAmB;AAACI,IAAAA,UAAU,EAAE,IAAb;AAAmBC,IAAAA,UAAU,EAAE;AAA/B,GAAnB,CAVE;AAWVoB,EAAAA,MAAM,EAAE,IAAIzB,SAAJ,CAAc,GAAd,CAXE;AAYV0B,EAAAA,MAAM,EAAE,IAAI1B,SAAJ,CAAc,GAAd,EAAmB;AAACI,IAAAA,UAAU,EAAE,IAAb;AAAmBC,IAAAA,UAAU,EAAE;AAA/B,GAAnB,CAZE;AAaVsB,EAAAA,MAAM,EAAE,IAAI3B,SAAJ,CAAc,GAAd,CAbE;AAcV4B,EAAAA,KAAK,EAAE,IAAI5B,SAAJ,CAAc,GAAd,EAAmBI,UAAnB,CAdG;AAeVyB,EAAAA,IAAI,EAAE,IAAI7B,SAAJ,CAAc,GAAd,EAAmBI,UAAnB,CAfI;AAgBV0B,EAAAA,KAAK,EAAE,IAAI9B,SAAJ,CAAc,GAAd,EAAmBI,UAAnB,CAhBG;AAiBV2B,EAAAA,GAAG,EAAE,IAAI/B,SAAJ,CAAc,GAAd,CAjBK;AAkBVgC,EAAAA,QAAQ,EAAE,IAAIhC,SAAJ,CAAc,GAAd,EAAmBI,UAAnB,CAlBA;AAmBV6B,EAAAA,KAAK,EAAE,IAAIjC,SAAJ,CAAc,IAAd,EAAoBI,UAApB,CAnBG;AAoBV8B,EAAAA,QAAQ,EAAE,IAAIlC,SAAJ,CAAc,UAAd,CApBA;AAqBVmC,EAAAA,eAAe,EAAE,IAAInC,SAAJ,CAAc,iBAAd,CArBP;AAsBVoC,EAAAA,QAAQ,EAAE,IAAIpC,SAAJ,CAAc,KAAd,EAAqBI,UAArB,CAtBA;AAuBViC,EAAAA,SAAS,EAAE,IAAIrC,SAAJ,CAAc,GAAd,EAAmBK,UAAnB,CAvBD;AAwBViC,EAAAA,YAAY,EAAE,IAAItC,SAAJ,CAAc,IAAd,EAAoB;AAACI,IAAAA,UAAU,EAAE,IAAb;AAAmBC,IAAAA,UAAU,EAAE;AAA/B,GAApB,CAxBJ;AA0BV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAkC,EAAAA,EAAE,EAAE,IAAIvC,SAAJ,CAAc,GAAd,EAAmB;AAACI,IAAAA,UAAU,EAAE,IAAb;AAAmBG,IAAAA,QAAQ,EAAE;AAA7B,GAAnB,CAxCM;AAyCViC,EAAAA,MAAM,EAAE,IAAIxC,SAAJ,CAAc,IAAd,EAAoB;AAACI,IAAAA,UAAU,EAAE,IAAb;AAAmBG,IAAAA,QAAQ,EAAE;AAA7B,GAApB,CAzCE;AA0CVkC,EAAAA,MAAM,EAAE,IAAIzC,SAAJ,CAAc,OAAd,EAAuB;AAACQ,IAAAA,MAAM,EAAE,IAAT;AAAeC,IAAAA,OAAO,EAAE,IAAxB;AAA8BJ,IAAAA,UAAU,EAAE;AAA1C,GAAvB,CA1CE;AA2CVG,EAAAA,MAAM,EAAE,IAAIR,SAAJ,CAAc,KAAd,EAAqB;AAACI,IAAAA,UAAU,EAAE,IAAb;AAAmBI,IAAAA,MAAM,EAAE,IAA3B;AAAiCH,IAAAA,UAAU,EAAE;AAA7C,GAArB,CA3CE;AA4CVqC,EAAAA,SAAS,EAAEhC,KAAK,CAAC,IAAD,EAAO,CAAP,CA5CN;AA6CViC,EAAAA,UAAU,EAAEjC,KAAK,CAAC,IAAD,EAAO,CAAP,CA7CP;AA8CVkC,EAAAA,SAAS,EAAElC,KAAK,CAAC,GAAD,EAAM,CAAN,CA9CN;AA+CVmC,EAAAA,UAAU,EAAEnC,KAAK,CAAC,GAAD,EAAM,CAAN,CA/CP;AAgDVoC,EAAAA,UAAU,EAAEpC,KAAK,CAAC,GAAD,EAAM,CAAN,CAhDP;AAiDVqC,EAAAA,QAAQ,EAAErC,KAAK,CAAC,eAAD,EAAkB,CAAlB,CAjDL;AAkDVsC,EAAAA,UAAU,EAAEtC,KAAK,CAAC,WAAD,EAAc,CAAd,CAlDP;AAmDVuC,EAAAA,QAAQ,EAAEvC,KAAK,CAAC,WAAD,EAAc,CAAd,CAnDL;AAoDVwC,EAAAA,OAAO,EAAE,IAAIlD,SAAJ,CAAc,KAAd,EAAqB;AAACI,IAAAA,UAAU,EAAE,IAAb;AAAmBM,IAAAA,KAAK,EAAE,CAA1B;AAA6BF,IAAAA,MAAM,EAAE,IAArC;AAA2CH,IAAAA,UAAU,EAAE;AAAvD,GAArB,CApDC;AAqDV8C,EAAAA,MAAM,EAAEzC,KAAK,CAAC,GAAD,EAAM,EAAN,CArDH;AAsDV0C,EAAAA,IAAI,EAAE1C,KAAK,CAAC,GAAD,EAAM,EAAN,CAtDD;AAuDV2C,EAAAA,KAAK,EAAE3C,KAAK,CAAC,GAAD,EAAM,EAAN,CAvDF;AAwDV4C,EAAAA,QAAQ,EAAE,IAAItD,SAAJ,CAAc,IAAd,EAAoB;AAACI,IAAAA,UAAU,EAAE;AAAb,GAApB,CAxDA;AA0DV;AACAmD,EAAAA,MAAM,EAAExC,EAAE,CAAC,OAAD,CA3DA;AA4DVyC,EAAAA,KAAK,EAAEzC,EAAE,CAAC,MAAD,EAASX,UAAT,CA5DC;AA6DVqD,EAAAA,MAAM,EAAE1C,EAAE,CAAC,OAAD,CA7DA;AA8DV2C,EAAAA,SAAS,EAAE3C,EAAE,CAAC,UAAD,CA9DH;AA+DV4C,EAAAA,SAAS,EAAE5C,EAAE,CAAC,UAAD,CA/DH;AAgEV6C,EAAAA,QAAQ,EAAE7C,EAAE,CAAC,SAAD,EAAYX,UAAZ,CAhEF;AAiEVyD,EAAAA,GAAG,EAAE9C,EAAE,CAAC,IAAD,EAAO;AAACT,IAAAA,MAAM,EAAE,IAAT;AAAeF,IAAAA,UAAU,EAAE;AAA3B,GAAP,CAjEG;AAkEV0D,EAAAA,KAAK,EAAE/C,EAAE,CAAC,MAAD,EAASX,UAAT,CAlEC;AAmEV2D,EAAAA,QAAQ,EAAEhD,EAAE,CAAC,SAAD,CAnEF;AAoEViD,EAAAA,IAAI,EAAEjD,EAAE,CAAC,KAAD,EAAQ;AAACT,IAAAA,MAAM,EAAE;AAAT,GAAR,CApEE;AAqEV2D,EAAAA,SAAS,EAAElD,EAAE,CAAC,UAAD,EAAaV,UAAb,CArEH;AAsEV6D,EAAAA,GAAG,EAAEnD,EAAE,CAAC,IAAD,CAtEG;AAuEVoD,EAAAA,OAAO,EAAEpD,EAAE,CAAC,QAAD,EAAWX,UAAX,CAvED;AAwEVgE,EAAAA,OAAO,EAAErD,EAAE,CAAC,QAAD,CAxED;AAyEVsD,EAAAA,MAAM,EAAEtD,EAAE,CAAC,OAAD,EAAUX,UAAV,CAzEA;AA0EVkE,EAAAA,IAAI,EAAEvD,EAAE,CAAC,KAAD,CA1EE;AA2EVwD,EAAAA,IAAI,EAAExD,EAAE,CAAC,KAAD,CA3EE;AA4EVyD,EAAAA,MAAM,EAAEzD,EAAE,CAAC,OAAD,CA5EA;AA6EV0D,EAAAA,MAAM,EAAE1D,EAAE,CAAC,OAAD,EAAU;AAACT,IAAAA,MAAM,EAAE;AAAT,GAAV,CA7EA;AA8EVoE,EAAAA,KAAK,EAAE3D,EAAE,CAAC,MAAD,CA9EC;AA+EV4D,EAAAA,IAAI,EAAE5D,EAAE,CAAC,KAAD,EAAQ;AAACX,IAAAA,UAAU,EAAE,IAAb;AAAmBC,IAAAA,UAAU,EAAE;AAA/B,GAAR,CA/EE;AAgFVuE,EAAAA,KAAK,EAAE7D,EAAE,CAAC,MAAD,EAASV,UAAT,CAhFC;AAiFVwE,EAAAA,MAAM,EAAE9D,EAAE,CAAC,OAAD,EAAUV,UAAV,CAjFA;AAkFVyE,EAAAA,MAAM,EAAE/D,EAAE,CAAC,OAAD,EAAUV,UAAV,CAlFA;AAmFV0E,EAAAA,QAAQ,EAAEhE,EAAE,CAAC,SAAD,EAAYX,UAAZ,CAnFF;AAoFV4E,EAAAA,OAAO,EAAEjE,EAAE,CAAC,QAAD,CApFD;AAqFVkE,EAAAA,OAAO,EAAElE,EAAE,CAAC,QAAD,CArFD;AAsFVmE,EAAAA,KAAK,EAAEnE,EAAE,CAAC,MAAD,EAASV,UAAT,CAtFC;AAuFV8E,EAAAA,KAAK,EAAEpE,EAAE,CAAC,MAAD,EAASV,UAAT,CAvFC;AAwFV+E,EAAAA,MAAM,EAAErE,EAAE,CAAC,OAAD,EAAUV,UAAV,CAxFA;AAyFVgF,EAAAA,GAAG,EAAEtE,EAAE,CAAC,IAAD,EAAO;AAACX,IAAAA,UAAU,EAAE,IAAb;AAAmBM,IAAAA,KAAK,EAAE;AAA1B,GAAP,CAzFG;AA0FV4E,EAAAA,WAAW,EAAEvE,EAAE,CAAC,YAAD,EAAe;AAACX,IAAAA,UAAU,EAAE,IAAb;AAAmBM,IAAAA,KAAK,EAAE;AAA1B,GAAf,CA1FL;AA2FV6E,EAAAA,OAAO,EAAExE,EAAE,CAAC,QAAD,EAAW;AAACX,IAAAA,UAAU,EAAE,IAAb;AAAmBI,IAAAA,MAAM,EAAE,IAA3B;AAAiCH,IAAAA,UAAU,EAAE;AAA7C,GAAX,CA3FD;AA4FVmF,EAAAA,KAAK,EAAEzE,EAAE,CAAC,MAAD,EAAS;AAACX,IAAAA,UAAU,EAAE,IAAb;AAAmBI,IAAAA,MAAM,EAAE,IAA3B;AAAiCH,IAAAA,UAAU,EAAE;AAA7C,GAAT,CA5FC;AA6FVoF,EAAAA,OAAO,EAAE1E,EAAE,CAAC,QAAD,EAAW;AAACX,IAAAA,UAAU,EAAE,IAAb;AAAmBI,IAAAA,MAAM,EAAE,IAA3B;AAAiCH,IAAAA,UAAU,EAAE;AAA7C,GAAX;AA7FD,CAAZ,C,CAgGA;AACA;;AAEA,IAAIqF,SAAS,GAAG,wBAAhB;AACA,IAAIC,UAAU,GAAG,IAAI3G,MAAJ,CAAW0G,SAAS,CAACE,MAArB,EAA6B,GAA7B,CAAjB;;AAEA,SAASC,SAAT,CAAmBxG,IAAnB,EAAyByG,cAAzB,EAAyC;AACvC,SAAOzG,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAAxB,IAA+B,CAACyG,cAAD,KAAoBzG,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,MAAhD,CAAtC;AACD;;AAED,IAAI0G,kBAAkB,GAAG,qDAAzB;AAEA,IAAIC,cAAc,GAAG,+BAArB;AAEA,IAAIC,GAAG,GAAGC,MAAM,CAACC,SAAjB;AACA,IAAIC,cAAc,GAAGH,GAAG,CAACG,cAAzB;AACA,IAAIC,QAAQ,GAAGJ,GAAG,CAACI,QAAnB,C,CAEA;;AAEA,SAASC,GAAT,CAAaC,GAAb,EAAkBC,QAAlB,EAA4B;AAC1B,SAAOJ,cAAc,CAACK,IAAf,CAAoBF,GAApB,EAAyBC,QAAzB,CAAP;AACD;;AAED,IAAIE,OAAO,GAAGC,KAAK,CAACD,OAAN,IAAkB,UAAUH,GAAV,EAAe;AAAE,SAC/CF,QAAQ,CAACI,IAAT,CAAcF,GAAd,MAAuB,gBADwB;AAE7C,CAFJ,C,CAIA;AACA;;;AAEA,IAAIK,QAAQ,GAAG,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,GAAxB,EAA6B;AAC1C,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKE,MAAL,GAAcD,GAAd;AACD,CAHD;;AAKAF,QAAQ,CAACT,SAAT,CAAmBa,MAAnB,GAA4B,SAASA,MAAT,CAAiBC,CAAjB,EAAoB;AAC9C,SAAO,IAAIL,QAAJ,CAAa,KAAKC,IAAlB,EAAwB,KAAKE,MAAL,GAAcE,CAAtC,CAAP;AACD,CAFD;;AAIA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,CAAxB,EAA2BC,KAA3B,EAAkCC,GAAlC,EAAuC;AAC1D,OAAKD,KAAL,GAAaA,KAAb;AACA,OAAKC,GAAL,GAAWA,GAAX;;AACA,MAAIF,CAAC,CAACG,UAAF,KAAiB,IAArB,EAA2B;AAAE,SAAK1B,MAAL,GAAcuB,CAAC,CAACG,UAAhB;AAA6B;AAC3D,CAJD,C,CAMA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BR,MAA5B,EAAoC;AAClC,OAAK,IAAIH,IAAI,GAAG,CAAX,EAAcY,GAAG,GAAG,CAAzB,IAA8B;AAC5B9B,IAAAA,UAAU,CAAC+B,SAAX,GAAuBD,GAAvB;AACA,QAAIE,KAAK,GAAGhC,UAAU,CAACiC,IAAX,CAAgBJ,KAAhB,CAAZ;;AACA,QAAIG,KAAK,IAAIA,KAAK,CAACE,KAAN,GAAcb,MAA3B,EAAmC;AACjC,QAAEH,IAAF;AACAY,MAAAA,GAAG,GAAGE,KAAK,CAACE,KAAN,GAAcF,KAAK,CAAC,CAAD,CAAL,CAASlI,MAA7B;AACD,KAHD,MAGO;AACL,aAAO,IAAImH,QAAJ,CAAaC,IAAb,EAAmBG,MAAM,GAAGS,GAA5B,CAAP;AACD;AACF;AACF,C,CAED;AACA;;;AAEA,IAAIK,cAAc,GAAG;AACnB;AACA;AACA;AACA;AACAC,EAAAA,WAAW,EAAE,CALM;AAMnB;AACA;AACA;AACAC,EAAAA,UAAU,EAAE,QATO;AAUnB;AACA;AACA;AACA;AACA;AACAC,EAAAA,mBAAmB,EAAE,IAfF;AAgBnB;AACA;AACAC,EAAAA,eAAe,EAAE,IAlBE;AAmBnB;AACA;AACA;AACA;AACAC,EAAAA,aAAa,EAAE,IAvBI;AAwBnB;AACA;AACAC,EAAAA,0BAA0B,EAAE,KA1BT;AA2BnB;AACA;AACAC,EAAAA,2BAA2B,EAAE,KA7BV;AA8BnB;AACA;AACAC,EAAAA,yBAAyB,EAAE,KAhCR;AAiCnB;AACA;AACAC,EAAAA,aAAa,EAAE,KAnCI;AAoCnB;AACA;AACA;AACA;AACAC,EAAAA,SAAS,EAAE,KAxCQ;AAyCnB;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,EAAE,IA9CU;AA+CnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,SAAS,EAAE,IAzDQ;AA0DnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,MAAM,EAAE,KAlEW;AAmEnB;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,EAAE,IAxEU;AAyEnB;AACA;AACAtB,EAAAA,UAAU,EAAE,IA3EO;AA4EnB;AACA;AACAuB,EAAAA,gBAAgB,EAAE,IA9EC;AA+EnB;AACA;AACAC,EAAAA,cAAc,EAAE,KAjFG;AAkFnBC,EAAAA,OAAO,EAAE;AAlFU,CAArB,C,CAqFA;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAIjI,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIkI,GAAT,IAAgBpB,cAAhB,EACE;AAAE9G,IAAAA,OAAO,CAACkI,GAAD,CAAP,GAAeD,IAAI,IAAI3C,GAAG,CAAC2C,IAAD,EAAOC,GAAP,CAAX,GAAyBD,IAAI,CAACC,GAAD,CAA7B,GAAqCpB,cAAc,CAACoB,GAAD,CAAlE;AAA0E;;AAE9E,MAAIlI,OAAO,CAAC+G,WAAR,IAAuB,IAA3B,EACE;AAAE/G,IAAAA,OAAO,CAAC+G,WAAR,IAAuB,IAAvB;AAA8B;;AAElC,MAAI/G,OAAO,CAACmH,aAAR,IAAyB,IAA7B,EACE;AAAEnH,IAAAA,OAAO,CAACmH,aAAR,GAAwBnH,OAAO,CAAC+G,WAAR,GAAsB,CAA9C;AAAkD;;AAEtD,MAAIrB,OAAO,CAAC1F,OAAO,CAACyH,OAAT,CAAX,EAA8B;AAC5B,QAAIU,MAAM,GAAGnI,OAAO,CAACyH,OAArB;;AACAzH,IAAAA,OAAO,CAACyH,OAAR,GAAkB,UAAUW,KAAV,EAAiB;AAAE,aAAOD,MAAM,CAACE,IAAP,CAAYD,KAAZ,CAAP;AAA4B,KAAjE;AACD;;AACD,MAAI1C,OAAO,CAAC1F,OAAO,CAAC0H,SAAT,CAAX,EACE;AAAE1H,IAAAA,OAAO,CAAC0H,SAAR,GAAoBY,WAAW,CAACtI,OAAD,EAAUA,OAAO,CAAC0H,SAAlB,CAA/B;AAA8D;;AAElE,SAAO1H,OAAP;AACD;;AAED,SAASsI,WAAT,CAAqBtI,OAArB,EAA8BuI,KAA9B,EAAqC;AACnC,SAAO,UAASC,KAAT,EAAgBC,IAAhB,EAAsBrC,KAAtB,EAA6BC,GAA7B,EAAkCqC,QAAlC,EAA4CC,MAA5C,EAAoD;AACzD,QAAIC,OAAO,GAAG;AACZC,MAAAA,IAAI,EAAEL,KAAK,GAAG,OAAH,GAAa,MADZ;AAEZM,MAAAA,KAAK,EAAEL,IAFK;AAGZrC,MAAAA,KAAK,EAAEA,KAHK;AAIZC,MAAAA,GAAG,EAAEA;AAJO,KAAd;;AAMA,QAAIrG,OAAO,CAACwH,SAAZ,EACE;AAAEoB,MAAAA,OAAO,CAACG,GAAR,GAAc,IAAI7C,cAAJ,CAAmB,IAAnB,EAAyBwC,QAAzB,EAAmCC,MAAnC,CAAd;AAA2D;;AAC/D,QAAI3I,OAAO,CAAC2H,MAAZ,EACE;AAAEiB,MAAAA,OAAO,CAACI,KAAR,GAAgB,CAAC5C,KAAD,EAAQC,GAAR,CAAhB;AAA+B;;AACnCkC,IAAAA,KAAK,CAACF,IAAN,CAAWO,OAAX;AACD,GAZD;AAaD,C,CAED;;;AACA,IAAIb,OAAO,GAAG,EAAd;;AAEA,SAASkB,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,SAAO,IAAIlL,MAAJ,CAAW,SAASkL,KAAK,CAACC,OAAN,CAAc,IAAd,EAAoB,GAApB,CAAT,GAAoC,IAA/C,CAAP;AACD;;AAED,IAAIC,MAAM,GAAG,SAASA,MAAT,CAAgBpJ,OAAhB,EAAyBwG,KAAzB,EAAgC6C,QAAhC,EAA0C;AACrD,OAAKrJ,OAAL,GAAeA,OAAO,GAAGgI,UAAU,CAAChI,OAAD,CAAnC;AACA,OAAKsG,UAAL,GAAkBtG,OAAO,CAACsG,UAA1B;AACA,OAAK3I,QAAL,GAAgBsL,aAAa,CAACtL,QAAQ,CAACqC,OAAO,CAAC+G,WAAR,IAAuB,CAAvB,GAA2B,CAA3B,GAA+B,CAAhC,CAAT,CAA7B;AACA,MAAIuC,QAAQ,GAAG,EAAf;;AACA,MAAI,CAACtJ,OAAO,CAACmH,aAAb,EAA4B;AAC1B,SAAK,IAAIoC,CAAC,GAAGvJ,OAAO,CAAC+G,WAArB,GAAmCwC,CAAC,EAApC,EACE;AAAE,UAAID,QAAQ,GAAG/L,aAAa,CAACgM,CAAD,CAA5B,EAAiC;AAAE;AAAO;AAAE;;AAChD,QAAIvJ,OAAO,CAACgH,UAAR,KAAuB,QAA3B,EAAqC;AAAEsC,MAAAA,QAAQ,IAAI,QAAZ;AAAuB;AAC/D;;AACD,OAAK/L,aAAL,GAAqB0L,aAAa,CAACK,QAAD,CAAlC;AACA,MAAIE,cAAc,GAAG,CAACF,QAAQ,GAAGA,QAAQ,GAAG,GAAd,GAAoB,EAA7B,IAAmC/L,aAAa,CAACC,MAAtE;AACA,OAAKiM,mBAAL,GAA2BR,aAAa,CAACO,cAAD,CAAxC;AACA,OAAKE,uBAAL,GAA+BT,aAAa,CAACO,cAAc,GAAG,GAAjB,GAAuBjM,aAAa,CAACE,UAAtC,CAA5C;AACA,OAAK+I,KAAL,GAAa3H,MAAM,CAAC2H,KAAD,CAAnB,CAdqD,CAgBrD;AACA;AACA;;AACA,OAAKmD,WAAL,GAAmB,KAAnB,CAnBqD,CAqBrD;;AACA,OAAKC,WAAL,CAAiB5J,OAAO,CAAC+H,OAAzB,EAtBqD,CAwBrD;AAEA;;AACA,MAAIsB,QAAJ,EAAc;AACZ,SAAK9K,GAAL,GAAW8K,QAAX;AACA,SAAKQ,SAAL,GAAiB,KAAKrD,KAAL,CAAWsD,WAAX,CAAuB,IAAvB,EAA6BT,QAAQ,GAAG,CAAxC,IAA6C,CAA9D;AACA,SAAKU,OAAL,GAAe,KAAKvD,KAAL,CAAWwD,KAAX,CAAiB,CAAjB,EAAoB,KAAKH,SAAzB,EAAoCI,KAApC,CAA0CvF,SAA1C,EAAqDjG,MAApE;AACD,GAJD,MAIO;AACL,SAAKF,GAAL,GAAW,KAAKsL,SAAL,GAAiB,CAA5B;AACA,SAAKE,OAAL,GAAe,CAAf;AACD,GAlCoD,CAoCrD;AACA;;;AACA,OAAKlB,IAAL,GAAY5I,KAAK,CAACI,GAAlB,CAtCqD,CAuCrD;;AACA,OAAKyI,KAAL,GAAa,IAAb,CAxCqD,CAyCrD;;AACA,OAAK1C,KAAL,GAAa,KAAKC,GAAL,GAAW,KAAK9H,GAA7B,CA1CqD,CA2CrD;AACA;;AACA,OAAKmK,QAAL,GAAgB,KAAKC,MAAL,GAAc,KAAKuB,WAAL,EAA9B,CA7CqD,CA+CrD;;AACA,OAAKC,aAAL,GAAqB,KAAKC,eAAL,GAAuB,IAA5C;AACA,OAAKC,YAAL,GAAoB,KAAKC,UAAL,GAAkB,KAAK/L,GAA3C,CAjDqD,CAmDrD;AACA;AACA;;AACA,OAAKgM,OAAL,GAAe,KAAKC,cAAL,EAAf;AACA,OAAKC,WAAL,GAAmB,IAAnB,CAvDqD,CAyDrD;;AACA,OAAKC,QAAL,GAAgB1K,OAAO,CAACgH,UAAR,KAAuB,QAAvC;AACA,OAAKxJ,MAAL,GAAc,KAAKkN,QAAL,IAAiB,KAAKC,eAAL,CAAqB,KAAKpM,GAA1B,CAA/B,CA3DqD,CA6DrD;;AACA,OAAKqM,gBAAL,GAAwB,CAAC,CAAzB,CA9DqD,CAgErD;;AACA,OAAKC,UAAL,GAAkB,KAAKC,WAAL,GAAmB,KAAKC,OAAL,GAAe,KAApD,CAjEqD,CAkErD;;AACA,OAAKC,QAAL,GAAgB,KAAKC,QAAL,GAAgB,CAAhC,CAnEqD,CAoErD;;AACA,OAAKC,MAAL,GAAc,EAAd,CArEqD,CAuErD;;AACA,MAAI,KAAK3M,GAAL,KAAa,CAAb,IAAkByB,OAAO,CAACuH,aAA1B,IAA2C,KAAKf,KAAL,CAAWwD,KAAX,CAAiB,CAAjB,EAAoB,CAApB,MAA2B,IAA1E,EACE;AAAE,SAAKmB,eAAL,CAAqB,CAArB;AAA0B,GAzEuB,CA2ErD;;;AACA,OAAKC,UAAL,GAAkB,EAAlB;AACA,OAAKC,kBAAL,GA7EqD,CA+ErD;;AACA,OAAKC,WAAL,GAAmB,IAAnB;AACD,CAjFD,C,CAmFA;;;AACAlC,MAAM,CAACjE,SAAP,CAAiBoG,SAAjB,GAA6B,SAASA,SAAT,CAAoBC,IAApB,EAA0B;AAAE,SAAO,KAAK7N,QAAL,CAAciB,IAAd,CAAmB4M,IAAnB,CAAP;AAAiC,CAA1F;;AACApC,MAAM,CAACjE,SAAP,CAAiBsG,cAAjB,GAAkC,SAASA,cAAT,CAAyBD,IAAzB,EAA+B;AAAE,SAAO,KAAKjO,aAAL,CAAmBqB,IAAnB,CAAwB4M,IAAxB,CAAP;AAAsC,CAAzG;;AAEApC,MAAM,CAACjE,SAAP,CAAiBuG,MAAjB,GAA0B,SAASA,MAAT,CAAiB9L,IAAjB,EAAuB+L,CAAvB,EAA0B;AAClD,OAAK/L,IAAL,IAAa+L,CAAC,CAAC,KAAK/L,IAAL,CAAD,CAAd;AACD,CAFD;;AAIAwJ,MAAM,CAACjE,SAAP,CAAiByE,WAAjB,GAA+B,SAASA,WAAT,CAAsBgC,aAAtB,EAAqC;AAChE,MAAIC,MAAM,GAAG,IAAb;;AAEF,OAAK,IAAIjM,IAAT,IAAiBgM,aAAjB,EAAgC;AAC9B,QAAIE,MAAM,GAAG/D,OAAO,CAACnI,IAAD,CAApB;;AACA,QAAI,CAACkM,MAAL,EAAa;AAAE,YAAM,IAAIC,KAAJ,CAAU,aAAanM,IAAb,GAAoB,aAA9B,CAAN;AAAoD;;AACnEkM,IAAAA,MAAM,CAACD,MAAD,EAASD,aAAa,CAAChM,IAAD,CAAtB,CAAN;AACD;AACF,CARD;;AAUAwJ,MAAM,CAACjE,SAAP,CAAiB6G,KAAjB,GAAyB,SAASA,KAAT,GAAkB;AACzC,MAAIC,IAAI,GAAG,KAAKjM,OAAL,CAAa4H,OAAb,IAAwB,KAAKsE,SAAL,EAAnC;AACA,OAAKC,SAAL;AACA,SAAO,KAAKC,aAAL,CAAmBH,IAAnB,CAAP;AACD,CAJD;;AAMA,IAAII,EAAE,GAAGjD,MAAM,CAACjE,SAAhB,C,CAEA;;AAEA,IAAImH,OAAO,GAAG,8CAAd;;AACAD,EAAE,CAAC1B,eAAH,GAAqB,UAASvE,KAAT,EAAgB;AACnC,MAAIyF,MAAM,GAAG,IAAb;;AAEA,WAAS;AACP7G,IAAAA,cAAc,CAAC0B,SAAf,GAA2BN,KAA3B;AACAA,IAAAA,KAAK,IAAIpB,cAAc,CAAC4B,IAAf,CAAoBiF,MAAM,CAACrF,KAA3B,EAAkC,CAAlC,EAAqC/H,MAA9C;AACA,QAAIkI,KAAK,GAAG2F,OAAO,CAAC1F,IAAR,CAAaiF,MAAM,CAACrF,KAAP,CAAawD,KAAb,CAAmB5D,KAAnB,CAAb,CAAZ;;AACA,QAAI,CAACO,KAAL,EAAY;AAAE,aAAO,KAAP;AAAc;;AAC5B,QAAI,CAACA,KAAK,CAAC,CAAD,CAAL,IAAYA,KAAK,CAAC,CAAD,CAAlB,MAA2B,YAA/B,EAA6C;AAAE,aAAO,IAAP;AAAa;;AAC5DP,IAAAA,KAAK,IAAIO,KAAK,CAAC,CAAD,CAAL,CAASlI,MAAlB;AACD;AACF,CAXD,C,CAaA;AACA;;;AAEA4N,EAAE,CAACE,GAAH,GAAS,UAAS1D,IAAT,EAAe;AACtB,MAAI,KAAKA,IAAL,KAAcA,IAAlB,EAAwB;AACtB,SAAK2D,IAAL;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,WAAO,KAAP;AACD;AACF,CAPD,C,CASA;;;AAEAH,EAAE,CAACI,YAAH,GAAkB,UAAS7M,IAAT,EAAe;AAC/B,SAAO,KAAKiJ,IAAL,KAAc5I,KAAK,CAACL,IAApB,IAA4B,KAAKkJ,KAAL,KAAelJ,IAA3C,IAAmD,CAAC,KAAK+J,WAAhE;AACD,CAFD,C,CAIA;;;AAEA0C,EAAE,CAACK,aAAH,GAAmB,UAAS9M,IAAT,EAAe;AAChC,MAAI,CAAC,KAAK6M,YAAL,CAAkB7M,IAAlB,CAAL,EAA8B;AAAE,WAAO,KAAP;AAAc;;AAC9C,OAAK4M,IAAL;AACA,SAAO,IAAP;AACD,CAJD,C,CAMA;;;AAEAH,EAAE,CAACM,gBAAH,GAAsB,UAAS/M,IAAT,EAAe;AACnC,MAAI,CAAC,KAAK8M,aAAL,CAAmB9M,IAAnB,CAAL,EAA+B;AAAE,SAAKgN,UAAL;AAAoB;AACtD,CAFD,C,CAIA;;;AAEAP,EAAE,CAACQ,kBAAH,GAAwB,YAAW;AACjC,SAAO,KAAKhE,IAAL,KAAc5I,KAAK,CAACI,GAApB,IACL,KAAKwI,IAAL,KAAc5I,KAAK,CAACQ,MADf,IAELiE,SAAS,CAAC9F,IAAV,CAAe,KAAK4H,KAAL,CAAWwD,KAAX,CAAiB,KAAKM,UAAtB,EAAkC,KAAKlE,KAAvC,CAAf,CAFF;AAGD,CAJD;;AAMAiG,EAAE,CAACS,eAAH,GAAqB,YAAW;AAC9B,MAAI,KAAKD,kBAAL,EAAJ,EAA+B;AAC7B,QAAI,KAAK7M,OAAL,CAAaiH,mBAAjB,EACE;AAAE,WAAKjH,OAAL,CAAaiH,mBAAb,CAAiC,KAAKqD,UAAtC,EAAkD,KAAKH,aAAvD;AAAwE;;AAC5E,WAAO,IAAP;AACD;AACF,CAND,C,CAQA;AACA;;;AAEAkC,EAAE,CAACU,SAAH,GAAe,YAAW;AACxB,MAAI,CAAC,KAAKR,GAAL,CAAStM,KAAK,CAACY,IAAf,CAAD,IAAyB,CAAC,KAAKiM,eAAL,EAA9B,EAAsD;AAAE,SAAKF,UAAL;AAAoB;AAC7E,CAFD;;AAIAP,EAAE,CAACW,kBAAH,GAAwB,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;AACjD,MAAI,KAAKrE,IAAL,KAAcoE,OAAlB,EAA2B;AACzB,QAAI,KAAKjN,OAAL,CAAakH,eAAjB,EACE;AAAE,WAAKlH,OAAL,CAAakH,eAAb,CAA6B,KAAKmD,YAAlC,EAAgD,KAAKD,eAArD;AAAwE;;AAC5E,QAAI,CAAC8C,OAAL,EACE;AAAE,WAAKV,IAAL;AAAc;;AAClB,WAAO,IAAP;AACD;AACF,CARD,C,CAUA;AACA;;;AAEAH,EAAE,CAACc,MAAH,GAAY,UAAStE,IAAT,EAAe;AACzB,OAAK0D,GAAL,CAAS1D,IAAT,KAAkB,KAAK+D,UAAL,EAAlB;AACD,CAFD,C,CAIA;;;AAEAP,EAAE,CAACO,UAAH,GAAgB,UAASrO,GAAT,EAAc;AAC5B,OAAK6O,KAAL,CAAW7O,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK6H,KAApC,EAA2C,kBAA3C;AACD,CAFD;;AAIA,SAASiH,mBAAT,GAA+B;AAC7B,OAAKC,eAAL,GACA,KAAKC,aAAL,GACA,KAAKC,mBAAL,GACA,KAAKC,iBAAL,GACA,KAAKC,WAAL,GACE,CAAC,CALH;AAMD;;AAEDrB,EAAE,CAACsB,kBAAH,GAAwB,UAASC,sBAAT,EAAiCrO,QAAjC,EAA2C;AACjE,MAAI,CAACqO,sBAAL,EAA6B;AAAE;AAAQ;;AACvC,MAAIA,sBAAsB,CAACL,aAAvB,GAAuC,CAAC,CAA5C,EACE;AAAE,SAAKM,gBAAL,CAAsBD,sBAAsB,CAACL,aAA7C,EAA4D,+CAA5D;AAA+G;;AACnH,MAAIO,MAAM,GAAGvO,QAAQ,GAAGqO,sBAAsB,CAACJ,mBAA1B,GAAgDI,sBAAsB,CAACH,iBAA5F;;AACA,MAAIK,MAAM,GAAG,CAAC,CAAd,EAAiB;AAAE,SAAKD,gBAAL,CAAsBC,MAAtB,EAA8B,uBAA9B;AAAyD;AAC7E,CAND;;AAQAzB,EAAE,CAAC0B,qBAAH,GAA2B,UAASH,sBAAT,EAAiCI,QAAjC,EAA2C;AACpE,MAAI,CAACJ,sBAAL,EAA6B;AAAE,WAAO,KAAP;AAAc;;AAC7C,MAAIN,eAAe,GAAGM,sBAAsB,CAACN,eAA7C;AACA,MAAII,WAAW,GAAGE,sBAAsB,CAACF,WAAzC;;AACA,MAAI,CAACM,QAAL,EAAe;AAAE,WAAOV,eAAe,IAAI,CAAnB,IAAwBI,WAAW,IAAI,CAA9C;AAAiD;;AAClE,MAAIJ,eAAe,IAAI,CAAvB,EACE;AAAE,SAAKF,KAAL,CAAWE,eAAX,EAA4B,yEAA5B;AAAyG;;AAC7G,MAAII,WAAW,IAAI,CAAnB,EACE;AAAE,SAAKG,gBAAL,CAAsBH,WAAtB,EAAmC,oCAAnC;AAA2E;AAChF,CATD;;AAWArB,EAAE,CAAC4B,8BAAH,GAAoC,YAAW;AAC7C,MAAI,KAAKjD,QAAL,KAAkB,CAAC,KAAKC,QAAN,IAAkB,KAAKD,QAAL,GAAgB,KAAKC,QAAzD,CAAJ,EACE;AAAE,SAAKmC,KAAL,CAAW,KAAKpC,QAAhB,EAA0B,4CAA1B;AAA0E;;AAC9E,MAAI,KAAKC,QAAT,EACE;AAAE,SAAKmC,KAAL,CAAW,KAAKnC,QAAhB,EAA0B,4CAA1B;AAA0E;AAC/E,CALD;;AAOAoB,EAAE,CAAC6B,oBAAH,GAA0B,UAASC,IAAT,EAAe;AACvC,MAAIA,IAAI,CAACtF,IAAL,KAAc,yBAAlB,EACE;AAAE,WAAO,KAAKqF,oBAAL,CAA0BC,IAAI,CAACC,UAA/B,CAAP;AAAmD;;AACvD,SAAOD,IAAI,CAACtF,IAAL,KAAc,YAAd,IAA8BsF,IAAI,CAACtF,IAAL,KAAc,kBAAnD;AACD,CAJD;;AAMA,IAAIwF,IAAI,GAAGjF,MAAM,CAACjE,SAAlB,C,CAEA;AAEA;AACA;AACA;AACA;;AAEAkJ,IAAI,CAACjC,aAAL,GAAqB,UAASH,IAAT,EAAe;AAClC,MAAIJ,MAAM,GAAG,IAAb;AAEA,MAAIyC,OAAO,GAAG,EAAd;;AACA,MAAI,CAACrC,IAAI,CAACsC,IAAV,EAAgB;AAAEtC,IAAAA,IAAI,CAACsC,IAAL,GAAY,EAAZ;AAAiB;;AACnC,SAAO,KAAK1F,IAAL,KAAc5I,KAAK,CAACI,GAA3B,EAAgC;AAC9B,QAAImO,IAAI,GAAG3C,MAAM,CAAC4C,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkCH,OAAlC,CAAX;AACArC,IAAAA,IAAI,CAACsC,IAAL,CAAUlG,IAAV,CAAemG,IAAf;AACD;;AACD,OAAKE,sBAAL,CAA4BzC,IAAI,CAACsC,IAAjC;AACA,OAAK/B,IAAL;;AACA,MAAI,KAAKxM,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjCkF,IAAAA,IAAI,CAACjF,UAAL,GAAkB,KAAKhH,OAAL,CAAagH,UAA/B;AACD;;AACD,SAAO,KAAK2H,UAAL,CAAgB1C,IAAhB,EAAsB,SAAtB,CAAP;AACD,CAfD;;AAiBA,IAAI2C,SAAS,GAAG;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAhB;AACA,IAAIC,WAAW,GAAG;AAACD,EAAAA,IAAI,EAAE;AAAP,CAAlB;;AAEAR,IAAI,CAACU,KAAL,GAAa,YAAW;AACtB,MAAI,KAAK/O,OAAL,CAAa+G,WAAb,GAA2B,CAA3B,IAAgC,CAAC,KAAK0F,YAAL,CAAkB,KAAlB,CAArC,EAA+D;AAAE,WAAO,KAAP;AAAc;;AAC/EzH,EAAAA,cAAc,CAAC0B,SAAf,GAA2B,KAAKnI,GAAhC;AACA,MAAIyQ,IAAI,GAAGhK,cAAc,CAAC4B,IAAf,CAAoB,KAAKJ,KAAzB,CAAX;AACA,MAAIgG,IAAI,GAAG,KAAKjO,GAAL,GAAWyQ,IAAI,CAAC,CAAD,CAAJ,CAAQvQ,MAA9B;AAAA,MAAsCwQ,MAAM,GAAG,KAAKzI,KAAL,CAAW0I,UAAX,CAAsB1C,IAAtB,CAA/C;;AACA,MAAIyC,MAAM,KAAK,EAAX,IAAiBA,MAAM,KAAK,GAAhC,EAAqC;AAAE,WAAO,IAAP;AAAa,GAL9B,CAK+B;;;AACrD,MAAIvQ,iBAAiB,CAACuQ,MAAD,EAAS,IAAT,CAArB,EAAqC;AACnC,QAAI1Q,GAAG,GAAGiO,IAAI,GAAG,CAAjB;;AACA,WAAOzN,gBAAgB,CAAC,KAAKyH,KAAL,CAAW0I,UAAX,CAAsB3Q,GAAtB,CAAD,EAA6B,IAA7B,CAAvB,EAA2D;AAAE,QAAEA,GAAF;AAAQ;;AACrE,QAAI4Q,KAAK,GAAG,KAAK3I,KAAL,CAAWwD,KAAX,CAAiBwC,IAAjB,EAAuBjO,GAAvB,CAAZ;;AACA,QAAI,CAACX,yBAAyB,CAACgB,IAA1B,CAA+BuQ,KAA/B,CAAL,EAA4C;AAAE,aAAO,IAAP;AAAa;AAC5D;;AACD,SAAO,KAAP;AACD,CAbD,C,CAeA;AACA;AACA;;;AACAd,IAAI,CAACe,eAAL,GAAuB,YAAW;AAChC,MAAI,KAAKpP,OAAL,CAAa+G,WAAb,GAA2B,CAA3B,IAAgC,CAAC,KAAK0F,YAAL,CAAkB,OAAlB,CAArC,EACE;AAAE,WAAO,KAAP;AAAc;;AAElBzH,EAAAA,cAAc,CAAC0B,SAAf,GAA2B,KAAKnI,GAAhC;AACA,MAAIyQ,IAAI,GAAGhK,cAAc,CAAC4B,IAAf,CAAoB,KAAKJ,KAAzB,CAAX;AACA,MAAIgG,IAAI,GAAG,KAAKjO,GAAL,GAAWyQ,IAAI,CAAC,CAAD,CAAJ,CAAQvQ,MAA9B;AACA,SAAO,CAACiG,SAAS,CAAC9F,IAAV,CAAe,KAAK4H,KAAL,CAAWwD,KAAX,CAAiB,KAAKzL,GAAtB,EAA2BiO,IAA3B,CAAf,CAAD,IACL,KAAKhG,KAAL,CAAWwD,KAAX,CAAiBwC,IAAjB,EAAuBA,IAAI,GAAG,CAA9B,MAAqC,UADhC,KAEJA,IAAI,GAAG,CAAP,KAAa,KAAKhG,KAAL,CAAW/H,MAAxB,IAAkC,CAACM,gBAAgB,CAAC,KAAKyH,KAAL,CAAW6I,MAAX,CAAkB7C,IAAI,GAAG,CAAzB,CAAD,CAF/C,CAAP;AAGD,CAVD,C,CAYA;AACA;AACA;AACA;AACA;AACA;;;AAEA6B,IAAI,CAACI,cAAL,GAAsB,UAASa,WAAT,EAAsBC,QAAtB,EAAgCjB,OAAhC,EAAyC;AAC7D,MAAIkB,SAAS,GAAG,KAAK3G,IAArB;AAAA,MAA2BoD,IAAI,GAAG,KAAKC,SAAL,EAAlC;AAAA,MAAoD2C,IAApD;;AAEA,MAAI,KAAKE,KAAL,EAAJ,EAAkB;AAChBS,IAAAA,SAAS,GAAGvP,KAAK,CAACsD,IAAlB;AACAsL,IAAAA,IAAI,GAAG,KAAP;AACD,GAN4D,CAQ7D;AACA;AACA;;;AAEA,UAAQW,SAAR;AACA,SAAKvP,KAAK,CAACsC,MAAX;AAAmB,SAAKtC,KAAK,CAACyC,SAAX;AAAsB,aAAO,KAAK+M,2BAAL,CAAiCxD,IAAjC,EAAuCuD,SAAS,CAACrQ,OAAjD,CAAP;;AACzC,SAAKc,KAAK,CAAC0C,SAAX;AAAsB,aAAO,KAAK+M,sBAAL,CAA4BzD,IAA5B,CAAP;;AACtB,SAAKhM,KAAK,CAAC4C,GAAX;AAAgB,aAAO,KAAK8M,gBAAL,CAAsB1D,IAAtB,CAAP;;AAChB,SAAKhM,KAAK,CAAC+C,IAAX;AAAiB,aAAO,KAAK4M,iBAAL,CAAuB3D,IAAvB,CAAP;;AACjB,SAAKhM,KAAK,CAACgD,SAAX;AACE,UAAI,CAACqM,WAAD,IAAgB,KAAKtP,OAAL,CAAa+G,WAAb,IAA4B,CAAhD,EAAmD;AAAE,aAAK6F,UAAL;AAAoB;;AACzE,aAAO,KAAKiD,sBAAL,CAA4B5D,IAA5B,EAAkC,KAAlC,CAAP;;AACF,SAAKhM,KAAK,CAAC6D,MAAX;AACE,UAAI,CAACwL,WAAL,EAAkB;AAAE,aAAK1C,UAAL;AAAoB;;AACxC,aAAO,KAAKkD,UAAL,CAAgB7D,IAAhB,EAAsB,IAAtB,CAAP;;AACF,SAAKhM,KAAK,CAACiD,GAAX;AAAgB,aAAO,KAAK6M,gBAAL,CAAsB9D,IAAtB,CAAP;;AAChB,SAAKhM,KAAK,CAACkD,OAAX;AAAoB,aAAO,KAAK6M,oBAAL,CAA0B/D,IAA1B,CAAP;;AACpB,SAAKhM,KAAK,CAACmD,OAAX;AAAoB,aAAO,KAAK6M,oBAAL,CAA0BhE,IAA1B,CAAP;;AACpB,SAAKhM,KAAK,CAACoD,MAAX;AAAmB,aAAO,KAAK6M,mBAAL,CAAyBjE,IAAzB,CAAP;;AACnB,SAAKhM,KAAK,CAACqD,IAAX;AAAiB,aAAO,KAAK6M,iBAAL,CAAuBlE,IAAvB,CAAP;;AACjB,SAAKhM,KAAK,CAACuD,MAAX;AAAmB,SAAKvD,KAAK,CAACsD,IAAX;AACjBsL,MAAAA,IAAI,GAAGA,IAAI,IAAI,KAAK/F,KAApB;;AACA,UAAI,CAACwG,WAAD,IAAgBT,IAAI,KAAK,KAA7B,EAAoC;AAAE,aAAKjC,UAAL;AAAoB;;AAC1D,aAAO,KAAKwD,iBAAL,CAAuBnE,IAAvB,EAA6B4C,IAA7B,CAAP;;AACF,SAAK5O,KAAK,CAACwD,MAAX;AAAmB,aAAO,KAAK4M,mBAAL,CAAyBpE,IAAzB,CAAP;;AACnB,SAAKhM,KAAK,CAACyD,KAAX;AAAkB,aAAO,KAAK4M,kBAAL,CAAwBrE,IAAxB,CAAP;;AAClB,SAAKhM,KAAK,CAACO,MAAX;AAAmB,aAAO,KAAK+P,UAAL,EAAP;;AACnB,SAAKtQ,KAAK,CAACY,IAAX;AAAiB,aAAO,KAAK2P,mBAAL,CAAyBvE,IAAzB,CAAP;;AACjB,SAAKhM,KAAK,CAAC+D,OAAX;AACA,SAAK/D,KAAK,CAACgE,OAAX;AACE,UAAI,CAAC,KAAKjE,OAAL,CAAaqH,2BAAlB,EAA+C;AAC7C,YAAI,CAACkI,QAAL,EACE;AAAE,eAAKnC,KAAL,CAAW,KAAKhH,KAAhB,EAAuB,wDAAvB;AAAmF;;AACvF,YAAI,CAAC,KAAKsE,QAAV,EACE;AAAE,eAAK0C,KAAL,CAAW,KAAKhH,KAAhB,EAAuB,iEAAvB;AAA4F;AACjG;;AACD,aAAOoJ,SAAS,KAAKvP,KAAK,CAACgE,OAApB,GAA8B,KAAKwM,WAAL,CAAiBxE,IAAjB,CAA9B,GAAuD,KAAKyE,WAAL,CAAiBzE,IAAjB,EAAuBqC,OAAvB,CAA9D;AAEA;AACA;AACA;AACA;AACA;;AACF;AACE,UAAI,KAAKc,eAAL,EAAJ,EAA4B;AAC1B,YAAI,CAACE,WAAL,EAAkB;AAAE,eAAK1C,UAAL;AAAoB;;AACxC,aAAKJ,IAAL;AACA,eAAO,KAAKqD,sBAAL,CAA4B5D,IAA5B,EAAkC,IAAlC,CAAP;AACD;;AAED,UAAI0E,SAAS,GAAG,KAAK7H,KAArB;AAAA,UAA4BqF,IAAI,GAAG,KAAKyC,eAAL,EAAnC;;AACA,UAAIpB,SAAS,KAAKvP,KAAK,CAACL,IAApB,IAA4BuO,IAAI,CAACtF,IAAL,KAAc,YAA1C,IAA0D,KAAK0D,GAAL,CAAStM,KAAK,CAACa,KAAf,CAA9D,EACE;AAAE,eAAO,KAAK+P,qBAAL,CAA2B5E,IAA3B,EAAiC0E,SAAjC,EAA4CxC,IAA5C,CAAP;AAA0D,OAD9D,MAEK;AAAE,eAAO,KAAK2C,wBAAL,CAA8B7E,IAA9B,EAAoCkC,IAApC,CAAP;AAAkD;;AAjD3D;AAmDD,CA/DD;;AAiEAE,IAAI,CAACoB,2BAAL,GAAmC,UAASxD,IAAT,EAAe9M,OAAf,EAAwB;AACzD,MAAI0M,MAAM,GAAG,IAAb;AAEA,MAAIkF,OAAO,GAAG5R,OAAO,KAAK,OAA1B;AACA,OAAKqN,IAAL;;AACA,MAAI,KAAKD,GAAL,CAAStM,KAAK,CAACY,IAAf,KAAwB,KAAKiM,eAAL,EAA5B,EAAoD;AAAEb,IAAAA,IAAI,CAAChN,KAAL,GAAa,IAAb;AAAoB,GAA1E,MACK,IAAI,KAAK4J,IAAL,KAAc5I,KAAK,CAACL,IAAxB,EAA8B;AAAE,SAAKgN,UAAL;AAAoB,GAApD,MACA;AACHX,IAAAA,IAAI,CAAChN,KAAL,GAAa,KAAK+R,UAAL,EAAb;AACA,SAAKjE,SAAL;AACD,GAVwD,CAYzD;AACA;;;AACA,MAAIvO,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAG,KAAK0M,MAAL,CAAYzM,MAAvB,EAA+B,EAAED,CAAjC,EAAoC;AAClC,QAAIyS,GAAG,GAAGpF,MAAM,CAACX,MAAP,CAAc1M,CAAd,CAAV;;AACA,QAAIyN,IAAI,CAAChN,KAAL,IAAc,IAAd,IAAsBgS,GAAG,CAACrR,IAAJ,KAAaqM,IAAI,CAAChN,KAAL,CAAWW,IAAlD,EAAwD;AACtD,UAAIqR,GAAG,CAACpC,IAAJ,IAAY,IAAZ,KAAqBkC,OAAO,IAAIE,GAAG,CAACpC,IAAJ,KAAa,MAA7C,CAAJ,EAA0D;AAAE;AAAO;;AACnE,UAAI5C,IAAI,CAAChN,KAAL,IAAc8R,OAAlB,EAA2B;AAAE;AAAO;AACrC;AACF;;AACD,MAAIvS,CAAC,KAAK,KAAK0M,MAAL,CAAYzM,MAAtB,EAA8B;AAAE,SAAK2O,KAAL,CAAWnB,IAAI,CAAC7F,KAAhB,EAAuB,iBAAiBjH,OAAxC;AAAmD;;AACnF,SAAO,KAAKwP,UAAL,CAAgB1C,IAAhB,EAAsB8E,OAAO,GAAG,gBAAH,GAAsB,mBAAnD,CAAP;AACD,CAxBD;;AA0BA1C,IAAI,CAACqB,sBAAL,GAA8B,UAASzD,IAAT,EAAe;AAC3C,OAAKO,IAAL;AACA,OAAKO,SAAL;AACA,SAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,mBAAtB,CAAP;AACD,CAJD;;AAMAoC,IAAI,CAACsB,gBAAL,GAAwB,UAAS1D,IAAT,EAAe;AACrC,OAAKO,IAAL;AACA,OAAKtB,MAAL,CAAY7C,IAAZ,CAAiBuG,SAAjB;AACA3C,EAAAA,IAAI,CAACsC,IAAL,GAAY,KAAKE,cAAL,CAAoB,KAApB,CAAZ;AACA,OAAKvD,MAAL,CAAYgG,GAAZ;AACA,OAAK/D,MAAL,CAAYlN,KAAK,CAACwD,MAAlB;AACAwI,EAAAA,IAAI,CAACrN,IAAL,GAAY,KAAKuS,oBAAL,EAAZ;;AACA,MAAI,KAAKnR,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EACE;AAAE,SAAKwF,GAAL,CAAStM,KAAK,CAACY,IAAf;AAAuB,GAD3B,MAGE;AAAE,SAAKkM,SAAL;AAAmB;;AACvB,SAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,kBAAtB,CAAP;AACD,CAZD,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAoC,IAAI,CAACuB,iBAAL,GAAyB,UAAS3D,IAAT,EAAe;AACtC,OAAKO,IAAL;AACA,MAAI4E,OAAO,GAAI,KAAKpR,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,KAAkC,KAAKgE,OAAL,IAAiB,CAAC,KAAKF,UAAN,IAAoB,KAAK7K,OAAL,CAAasH,yBAApF,KAAmH,KAAKoF,aAAL,CAAmB,OAAnB,CAApH,GAAmJ,KAAKrC,YAAxJ,GAAuK,CAAC,CAAtL;AACA,OAAKa,MAAL,CAAY7C,IAAZ,CAAiBuG,SAAjB;AACA,OAAKyC,iBAAL;AACA,OAAKlE,MAAL,CAAYlN,KAAK,CAACS,MAAlB;;AACA,MAAI,KAAKmI,IAAL,KAAc5I,KAAK,CAACY,IAAxB,EAA8B;AAC5B,QAAIuQ,OAAO,GAAG,CAAC,CAAf,EAAkB;AAAE,WAAKxE,UAAL,CAAgBwE,OAAhB;AAA2B;;AAC/C,WAAO,KAAKE,QAAL,CAAcrF,IAAd,EAAoB,IAApB,CAAP;AACD;;AACD,MAAI8C,KAAK,GAAG,KAAKA,KAAL,EAAZ;;AACA,MAAI,KAAKlG,IAAL,KAAc5I,KAAK,CAACsD,IAApB,IAA4B,KAAKsF,IAAL,KAAc5I,KAAK,CAACuD,MAAhD,IAA0DuL,KAA9D,EAAqE;AACnE,QAAIwC,MAAM,GAAG,KAAKrF,SAAL,EAAb;AAAA,QAA+B2C,IAAI,GAAGE,KAAK,GAAG,KAAH,GAAW,KAAKjG,KAA3D;AACA,SAAK0D,IAAL;AACA,SAAKgF,QAAL,CAAcD,MAAd,EAAsB,IAAtB,EAA4B1C,IAA5B;AACA,SAAKF,UAAL,CAAgB4C,MAAhB,EAAwB,qBAAxB;;AACA,QAAI,CAAC,KAAK1I,IAAL,KAAc5I,KAAK,CAACoE,GAApB,IAA4B,KAAKrE,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,KAAK0F,YAAL,CAAkB,IAAlB,CAA9D,KAA2F8E,MAAM,CAACE,YAAP,CAAoBhT,MAApB,KAA+B,CAA1H,IACA,EAAEoQ,IAAI,KAAK,KAAT,IAAkB0C,MAAM,CAACE,YAAP,CAAoB,CAApB,EAAuBC,IAA3C,CADJ,EACsD;AACpD,UAAI,KAAK1R,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjC,YAAI,KAAK8B,IAAL,KAAc5I,KAAK,CAACoE,GAAxB,EAA6B;AAC3B,cAAI+M,OAAO,GAAG,CAAC,CAAf,EAAkB;AAAE,iBAAKxE,UAAL,CAAgBwE,OAAhB;AAA2B;AAChD,SAFD,MAEO;AAAEnF,UAAAA,IAAI,CAAC0F,KAAL,GAAaP,OAAO,GAAG,CAAC,CAAxB;AAA4B;AACtC;;AACD,aAAO,KAAKQ,UAAL,CAAgB3F,IAAhB,EAAsBsF,MAAtB,CAAP;AACD;;AACD,QAAIH,OAAO,GAAG,CAAC,CAAf,EAAkB;AAAE,WAAKxE,UAAL,CAAgBwE,OAAhB;AAA2B;;AAC/C,WAAO,KAAKE,QAAL,CAAcrF,IAAd,EAAoBsF,MAApB,CAAP;AACD;;AACD,MAAI3D,sBAAsB,GAAG,IAAIP,mBAAJ,EAA7B;AACA,MAAIqE,IAAI,GAAG,KAAKd,eAAL,CAAqB,IAArB,EAA2BhD,sBAA3B,CAAX;;AACA,MAAI,KAAK/E,IAAL,KAAc5I,KAAK,CAACoE,GAApB,IAA4B,KAAKrE,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,KAAK0F,YAAL,CAAkB,IAAlB,CAAjE,EAA2F;AACzF,QAAI,KAAKzM,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjC,UAAI,KAAK8B,IAAL,KAAc5I,KAAK,CAACoE,GAAxB,EAA6B;AAC3B,YAAI+M,OAAO,GAAG,CAAC,CAAf,EAAkB;AAAE,eAAKxE,UAAL,CAAgBwE,OAAhB;AAA2B;AAChD,OAFD,MAEO;AAAEnF,QAAAA,IAAI,CAAC0F,KAAL,GAAaP,OAAO,GAAG,CAAC,CAAxB;AAA4B;AACtC;;AACD,SAAKS,YAAL,CAAkBH,IAAlB,EAAwB,KAAxB,EAA+B9D,sBAA/B;AACA,SAAKkE,SAAL,CAAeJ,IAAf;AACA,WAAO,KAAKE,UAAL,CAAgB3F,IAAhB,EAAsByF,IAAtB,CAAP;AACD,GATD,MASO;AACL,SAAK3D,qBAAL,CAA2BH,sBAA3B,EAAmD,IAAnD;AACD;;AACD,MAAIwD,OAAO,GAAG,CAAC,CAAf,EAAkB;AAAE,SAAKxE,UAAL,CAAgBwE,OAAhB;AAA2B;;AAC/C,SAAO,KAAKE,QAAL,CAAcrF,IAAd,EAAoByF,IAApB,CAAP;AACD,CA5CD;;AA8CArD,IAAI,CAACwB,sBAAL,GAA8B,UAAS5D,IAAT,EAAe8F,OAAf,EAAwB;AACpD,OAAKvF,IAAL;AACA,SAAO,KAAKwF,aAAL,CAAmB/F,IAAnB,EAAyB,IAAzB,EAA+B,KAA/B,EAAsC8F,OAAtC,CAAP;AACD,CAHD;;AAKA1D,IAAI,CAAC0B,gBAAL,GAAwB,UAAS9D,IAAT,EAAe;AACrC,OAAKO,IAAL;AACAP,EAAAA,IAAI,CAACrN,IAAL,GAAY,KAAKuS,oBAAL,EAAZ,CAFqC,CAGrC;;AACAlF,EAAAA,IAAI,CAACgG,UAAL,GAAkB,KAAKxD,cAAL,CAAoB,CAAC,KAAKjR,MAAN,IAAgB,KAAKqL,IAAL,KAAc5I,KAAK,CAACgD,SAAxD,CAAlB;AACAgJ,EAAAA,IAAI,CAACiG,SAAL,GAAiB,KAAK3F,GAAL,CAAStM,KAAK,CAAC6C,KAAf,IAAwB,KAAK2L,cAAL,CAAoB,CAAC,KAAKjR,MAAN,IAAgB,KAAKqL,IAAL,KAAc5I,KAAK,CAACgD,SAAxD,CAAxB,GAA6F,IAA9G;AACA,SAAO,KAAK0L,UAAL,CAAgB1C,IAAhB,EAAsB,aAAtB,CAAP;AACD,CAPD;;AASAoC,IAAI,CAAC2B,oBAAL,GAA4B,UAAS/D,IAAT,EAAe;AACzC,MAAI,CAAC,KAAKpB,UAAN,IAAoB,CAAC,KAAK7K,OAAL,CAAaoH,0BAAtC,EACE;AAAE,SAAKgG,KAAL,CAAW,KAAKhH,KAAhB,EAAuB,8BAAvB;AAAyD;;AAC7D,OAAKoG,IAAL,GAHyC,CAKzC;AACA;AACA;;AAEA,MAAI,KAAKD,GAAL,CAAStM,KAAK,CAACY,IAAf,KAAwB,KAAKiM,eAAL,EAA5B,EAAoD;AAAEb,IAAAA,IAAI,CAACkG,QAAL,GAAgB,IAAhB;AAAuB,GAA7E,MACK;AAAElG,IAAAA,IAAI,CAACkG,QAAL,GAAgB,KAAKvB,eAAL,EAAhB;AAAwC,SAAK7D,SAAL;AAAmB;;AAClE,SAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,iBAAtB,CAAP;AACD,CAZD;;AAcAoC,IAAI,CAAC4B,oBAAL,GAA4B,UAAShE,IAAT,EAAe;AACzC,MAAIJ,MAAM,GAAG,IAAb;AAEA,OAAKW,IAAL;AACAP,EAAAA,IAAI,CAACmG,YAAL,GAAoB,KAAKjB,oBAAL,EAApB;AACAlF,EAAAA,IAAI,CAACoG,KAAL,GAAa,EAAb;AACA,OAAKlF,MAAL,CAAYlN,KAAK,CAACO,MAAlB;AACA,OAAK0K,MAAL,CAAY7C,IAAZ,CAAiByG,WAAjB;AACA,OAAKuC,iBAAL,GARyC,CAUzC;AACA;AACA;;AAEA,MAAI5K,GAAJ;;AACA,OAAK,IAAI6L,UAAU,GAAG,KAAtB,EAA6B,KAAKzJ,IAAL,KAAc5I,KAAK,CAACQ,MAAjD,GAA0D;AACxD,QAAIoL,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACuC,KAAtB,IAA+BqJ,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAAC2C,QAAzD,EAAmE;AACjE,UAAI2P,MAAM,GAAG1G,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACuC,KAAnC;;AACA,UAAIiE,GAAJ,EAAS;AAAEoF,QAAAA,MAAM,CAAC8C,UAAP,CAAkBlI,GAAlB,EAAuB,YAAvB;AAAuC;;AAClDwF,MAAAA,IAAI,CAACoG,KAAL,CAAWhK,IAAX,CAAgB5B,GAAG,GAAGoF,MAAM,CAACK,SAAP,EAAtB;AACAzF,MAAAA,GAAG,CAACwL,UAAJ,GAAiB,EAAjB;AACApG,MAAAA,MAAM,CAACW,IAAP;;AACA,UAAI+F,MAAJ,EAAY;AACV9L,QAAAA,GAAG,CAAC7H,IAAJ,GAAWiN,MAAM,CAAC+E,eAAP,EAAX;AACD,OAFD,MAEO;AACL,YAAI0B,UAAJ,EAAgB;AAAEzG,UAAAA,MAAM,CAACgC,gBAAP,CAAwBhC,MAAM,CAACxB,YAA/B,EAA6C,0BAA7C;AAA2E;;AAC7FiI,QAAAA,UAAU,GAAG,IAAb;AACA7L,QAAAA,GAAG,CAAC7H,IAAJ,GAAW,IAAX;AACD;;AACDiN,MAAAA,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACa,KAApB;AACD,KAdD,MAcO;AACL,UAAI,CAAC2F,GAAL,EAAU;AAAEoF,QAAAA,MAAM,CAACe,UAAP;AAAsB;;AAClCnG,MAAAA,GAAG,CAACwL,UAAJ,CAAe5J,IAAf,CAAoBwD,MAAM,CAAC4C,cAAP,CAAsB,IAAtB,CAApB;AACD;AACF;;AACD,OAAK+D,gBAAL;;AACA,MAAI/L,GAAJ,EAAS;AAAE,SAAKkI,UAAL,CAAgBlI,GAAhB,EAAqB,YAArB;AAAqC;;AAChD,OAAK+F,IAAL,GArCyC,CAqC5B;;AACb,OAAKtB,MAAL,CAAYgG,GAAZ;AACA,SAAO,KAAKvC,UAAL,CAAgB1C,IAAhB,EAAsB,iBAAtB,CAAP;AACD,CAxCD;;AA0CAoC,IAAI,CAAC6B,mBAAL,GAA2B,UAASjE,IAAT,EAAe;AACxC,OAAKO,IAAL;;AACA,MAAI9H,SAAS,CAAC9F,IAAV,CAAe,KAAK4H,KAAL,CAAWwD,KAAX,CAAiB,KAAKM,UAAtB,EAAkC,KAAKlE,KAAvC,CAAf,CAAJ,EACE;AAAE,SAAKgH,KAAL,CAAW,KAAK9C,UAAhB,EAA4B,6BAA5B;AAA6D;;AACjE2B,EAAAA,IAAI,CAACkG,QAAL,GAAgB,KAAKvB,eAAL,EAAhB;AACA,OAAK7D,SAAL;AACA,SAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,gBAAtB,CAAP;AACD,CAPD,C,CASA;;;AAEA,IAAIwG,KAAK,GAAG,EAAZ;;AAEApE,IAAI,CAAC8B,iBAAL,GAAyB,UAASlE,IAAT,EAAe;AACtC,OAAKO,IAAL;AACAP,EAAAA,IAAI,CAACzD,KAAL,GAAa,KAAK+H,UAAL,EAAb;AACAtE,EAAAA,IAAI,CAACyG,OAAL,GAAe,IAAf;;AACA,MAAI,KAAK7J,IAAL,KAAc5I,KAAK,CAACwC,MAAxB,EAAgC;AAC9B,QAAIkQ,MAAM,GAAG,KAAKzG,SAAL,EAAb;AACA,SAAKM,IAAL;;AACA,QAAI,KAAKD,GAAL,CAAStM,KAAK,CAACS,MAAf,CAAJ,EAA4B;AAC1BiS,MAAAA,MAAM,CAACC,KAAP,GAAe,KAAKC,gBAAL,EAAf;AACA,WAAKxB,iBAAL;AACA,WAAKS,SAAL,CAAea,MAAM,CAACC,KAAtB,EAA6B,KAA7B;AACA,WAAKzF,MAAL,CAAYlN,KAAK,CAACU,MAAlB;AACD,KALD,MAKO;AACL,UAAI,KAAKX,OAAL,CAAa+G,WAAb,GAA2B,EAA/B,EAAmC;AAAE,aAAK6F,UAAL;AAAoB;;AACzD+F,MAAAA,MAAM,CAACC,KAAP,GAAe,IAAf;AACA,WAAKvB,iBAAL;AACD;;AACDsB,IAAAA,MAAM,CAACpE,IAAP,GAAc,KAAKgC,UAAL,CAAgB,KAAhB,CAAd;AACA,SAAKiC,gBAAL;AACAvG,IAAAA,IAAI,CAACyG,OAAL,GAAe,KAAK/D,UAAL,CAAgBgE,MAAhB,EAAwB,aAAxB,CAAf;AACD;;AACD1G,EAAAA,IAAI,CAAC6G,SAAL,GAAiB,KAAKvG,GAAL,CAAStM,KAAK,CAAC8C,QAAf,IAA2B,KAAKwN,UAAL,EAA3B,GAA+C,IAAhE;;AACA,MAAI,CAACtE,IAAI,CAACyG,OAAN,IAAiB,CAACzG,IAAI,CAAC6G,SAA3B,EACE;AAAE,SAAK1F,KAAL,CAAWnB,IAAI,CAAC7F,KAAhB,EAAuB,iCAAvB;AAA4D;;AAChE,SAAO,KAAKuI,UAAL,CAAgB1C,IAAhB,EAAsB,cAAtB,CAAP;AACD,CAzBD;;AA2BAoC,IAAI,CAAC+B,iBAAL,GAAyB,UAASnE,IAAT,EAAe4C,IAAf,EAAqB;AAC5C,OAAKrC,IAAL;AACA,OAAKgF,QAAL,CAAcvF,IAAd,EAAoB,KAApB,EAA2B4C,IAA3B;AACA,OAAK9B,SAAL;AACA,SAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,qBAAtB,CAAP;AACD,CALD;;AAOAoC,IAAI,CAACgC,mBAAL,GAA2B,UAASpE,IAAT,EAAe;AACxC,OAAKO,IAAL;AACAP,EAAAA,IAAI,CAACrN,IAAL,GAAY,KAAKuS,oBAAL,EAAZ;AACA,OAAKjG,MAAL,CAAY7C,IAAZ,CAAiBuG,SAAjB;AACA3C,EAAAA,IAAI,CAACsC,IAAL,GAAY,KAAKE,cAAL,CAAoB,KAApB,CAAZ;AACA,OAAKvD,MAAL,CAAYgG,GAAZ;AACA,SAAO,KAAKvC,UAAL,CAAgB1C,IAAhB,EAAsB,gBAAtB,CAAP;AACD,CAPD;;AASAoC,IAAI,CAACiC,kBAAL,GAA0B,UAASrE,IAAT,EAAe;AACvC,MAAI,KAAKzO,MAAT,EAAiB;AAAE,SAAK4P,KAAL,CAAW,KAAKhH,KAAhB,EAAuB,uBAAvB;AAAkD;;AACrE,OAAKoG,IAAL;AACAP,EAAAA,IAAI,CAAC8G,MAAL,GAAc,KAAK5B,oBAAL,EAAd;AACAlF,EAAAA,IAAI,CAACsC,IAAL,GAAY,KAAKE,cAAL,CAAoB,KAApB,CAAZ;AACA,SAAO,KAAKE,UAAL,CAAgB1C,IAAhB,EAAsB,eAAtB,CAAP;AACD,CAND;;AAQAoC,IAAI,CAACmC,mBAAL,GAA2B,UAASvE,IAAT,EAAe;AACxC,OAAKO,IAAL;AACA,SAAO,KAAKmC,UAAL,CAAgB1C,IAAhB,EAAsB,gBAAtB,CAAP;AACD,CAHD;;AAKAoC,IAAI,CAACwC,qBAAL,GAA6B,UAAS5E,IAAT,EAAe0E,SAAf,EAA0BxC,IAA1B,EAAgC;AAC3D,MAAItC,MAAM,GAAG,IAAb;;AAEA,OAAK,IAAImH,GAAG,GAAG,CAAV,EAAaC,IAAI,GAAGpH,MAAM,CAACX,MAAhC,EAAwC8H,GAAG,GAAGC,IAAI,CAACxU,MAAnD,EAA2DuU,GAAG,IAAI,CAAlE,EACE;AACA,QAAI/T,KAAK,GAAGgU,IAAI,CAACD,GAAD,CAAhB;;AAEA,QAAI/T,KAAK,CAACW,IAAN,KAAe+Q,SAAnB,EACE;AAAE9E,MAAAA,MAAM,CAACuB,KAAP,CAAae,IAAI,CAAC/H,KAAlB,EAAyB,YAAYuK,SAAZ,GAAwB,uBAAjD;AACL;AAAE;;AACH,MAAI9B,IAAI,GAAG,KAAKhG,IAAL,CAAUvJ,MAAV,GAAmB,MAAnB,GAA4B,KAAKuJ,IAAL,KAAc5I,KAAK,CAACmD,OAApB,GAA8B,QAA9B,GAAyC,IAAhF;;AACA,OAAK,IAAI5E,CAAC,GAAG,KAAK0M,MAAL,CAAYzM,MAAZ,GAAqB,CAAlC,EAAqCD,CAAC,IAAI,CAA1C,EAA6CA,CAAC,EAA9C,EAAkD;AAChD,QAAI0U,OAAO,GAAGrH,MAAM,CAACX,MAAP,CAAc1M,CAAd,CAAd;;AACA,QAAI0U,OAAO,CAACC,cAAR,KAA2BlH,IAAI,CAAC7F,KAApC,EAA2C;AACzC;AACA8M,MAAAA,OAAO,CAACC,cAAR,GAAyBtH,MAAM,CAACzF,KAAhC;AACA8M,MAAAA,OAAO,CAACrE,IAAR,GAAeA,IAAf;AACD,KAJD,MAIO;AAAE;AAAO;AACjB;;AACD,OAAK3D,MAAL,CAAY7C,IAAZ,CAAiB;AAACzI,IAAAA,IAAI,EAAE+Q,SAAP;AAAkB9B,IAAAA,IAAI,EAAEA,IAAxB;AAA8BsE,IAAAA,cAAc,EAAE,KAAK/M;AAAnD,GAAjB;AACA6F,EAAAA,IAAI,CAACsC,IAAL,GAAY,KAAKE,cAAL,CAAoB,IAApB,CAAZ;;AACA,MAAIxC,IAAI,CAACsC,IAAL,CAAU1F,IAAV,KAAmB,kBAAnB,IACAoD,IAAI,CAACsC,IAAL,CAAU1F,IAAV,KAAmB,qBAAnB,IAA4CoD,IAAI,CAACsC,IAAL,CAAUM,IAAV,KAAmB,KAD/D,IAEA5C,IAAI,CAACsC,IAAL,CAAU1F,IAAV,KAAmB,qBAAnB,KAA6C,KAAKrL,MAAL,IAAeyO,IAAI,CAACsC,IAAL,CAAU6E,SAAzB,IAAsCnH,IAAI,CAACsC,IAAL,CAAU8E,KAA7F,CAFJ,EAGE;AAAE,SAAKxF,gBAAL,CAAsB5B,IAAI,CAACsC,IAAL,CAAUnI,KAAhC,EAAuC,6BAAvC;AAAwE;;AAC5E,OAAK8E,MAAL,CAAYgG,GAAZ;AACAjF,EAAAA,IAAI,CAAChN,KAAL,GAAakP,IAAb;AACA,SAAO,KAAKQ,UAAL,CAAgB1C,IAAhB,EAAsB,kBAAtB,CAAP;AACD,CA5BD;;AA8BAoC,IAAI,CAACyC,wBAAL,GAAgC,UAAS7E,IAAT,EAAekC,IAAf,EAAqB;AACnDlC,EAAAA,IAAI,CAACmC,UAAL,GAAkBD,IAAlB;AACA,OAAKpB,SAAL;AACA,SAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,qBAAtB,CAAP;AACD,CAJD,C,CAMA;AACA;AACA;;;AAEAoC,IAAI,CAACkC,UAAL,GAAkB,UAAS+C,qBAAT,EAAgC;AAChD,MAAIzH,MAAM,GAAG,IAAb;AACA,MAAKyH,qBAAqB,KAAK,KAAK,CAApC,EAAwCA,qBAAqB,GAAG,IAAxB;AAExC,MAAIrH,IAAI,GAAG,KAAKC,SAAL,EAAX;AACAD,EAAAA,IAAI,CAACsC,IAAL,GAAY,EAAZ;AACA,OAAKpB,MAAL,CAAYlN,KAAK,CAACO,MAAlB;;AACA,MAAI8S,qBAAJ,EAA2B;AACzB,SAAKjC,iBAAL;AACD;;AACD,SAAO,CAAC,KAAK9E,GAAL,CAAStM,KAAK,CAACQ,MAAf,CAAR,EAAgC;AAC9B,QAAI+N,IAAI,GAAG3C,MAAM,CAAC4C,cAAP,CAAsB,IAAtB,CAAX;AACAxC,IAAAA,IAAI,CAACsC,IAAL,CAAUlG,IAAV,CAAemG,IAAf;AACD;;AACD,MAAI8E,qBAAJ,EAA2B;AACzB,SAAKd,gBAAL;AACD;;AACD,SAAO,KAAK7D,UAAL,CAAgB1C,IAAhB,EAAsB,gBAAtB,CAAP;AACD,CAlBD,C,CAoBA;AACA;AACA;;;AAEAoC,IAAI,CAACiD,QAAL,GAAgB,UAASrF,IAAT,EAAeyF,IAAf,EAAqB;AACnCzF,EAAAA,IAAI,CAACyF,IAAL,GAAYA,IAAZ;AACA,OAAKvE,MAAL,CAAYlN,KAAK,CAACY,IAAlB;AACAoL,EAAAA,IAAI,CAACrN,IAAL,GAAY,KAAKiK,IAAL,KAAc5I,KAAK,CAACY,IAApB,GAA2B,IAA3B,GAAkC,KAAK+P,eAAL,EAA9C;AACA,OAAKzD,MAAL,CAAYlN,KAAK,CAACY,IAAlB;AACAoL,EAAAA,IAAI,CAACsH,MAAL,GAAc,KAAK1K,IAAL,KAAc5I,KAAK,CAACU,MAApB,GAA6B,IAA7B,GAAoC,KAAKiQ,eAAL,EAAlD;AACA,OAAKzD,MAAL,CAAYlN,KAAK,CAACU,MAAlB;AACA,OAAK6R,gBAAL;AACAvG,EAAAA,IAAI,CAACsC,IAAL,GAAY,KAAKE,cAAL,CAAoB,KAApB,CAAZ;AACA,OAAKvD,MAAL,CAAYgG,GAAZ;AACA,SAAO,KAAKvC,UAAL,CAAgB1C,IAAhB,EAAsB,cAAtB,CAAP;AACD,CAXD,C,CAaA;AACA;;;AAEAoC,IAAI,CAACuD,UAAL,GAAkB,UAAS3F,IAAT,EAAeyF,IAAf,EAAqB;AACrC,MAAI7I,IAAI,GAAG,KAAKA,IAAL,KAAc5I,KAAK,CAACoE,GAApB,GAA0B,gBAA1B,GAA6C,gBAAxD;AACA,OAAKmI,IAAL;;AACA,MAAI3D,IAAI,KAAK,gBAAb,EAA+B;AAC7B,QAAI6I,IAAI,CAAC7I,IAAL,KAAc,mBAAd,IACD6I,IAAI,CAAC7I,IAAL,KAAc,qBAAd,IAAuC6I,IAAI,CAACD,YAAL,CAAkB,CAAlB,EAAqBC,IAArB,IAA6B,IAApE,KACC,KAAKlU,MAAL,IAAekU,IAAI,CAACD,YAAL,CAAkB,CAAlB,EAAqB+B,EAArB,CAAwB3K,IAAxB,KAAiC,YADjD,CADH,EAGE;AAAE,WAAKuE,KAAL,CAAWsE,IAAI,CAACtL,KAAhB,EAAuB,wCAAvB;AAAmE;AACxE;;AACD6F,EAAAA,IAAI,CAACwH,IAAL,GAAY/B,IAAZ;AACAzF,EAAAA,IAAI,CAACyH,KAAL,GAAa7K,IAAI,KAAK,gBAAT,GAA4B,KAAK+H,eAAL,EAA5B,GAAqD,KAAK+C,gBAAL,EAAlE;AACA,OAAKxG,MAAL,CAAYlN,KAAK,CAACU,MAAlB;AACA,OAAK6R,gBAAL;AACAvG,EAAAA,IAAI,CAACsC,IAAL,GAAY,KAAKE,cAAL,CAAoB,KAApB,CAAZ;AACA,OAAKvD,MAAL,CAAYgG,GAAZ;AACA,SAAO,KAAKvC,UAAL,CAAgB1C,IAAhB,EAAsBpD,IAAtB,CAAP;AACD,CAhBD,C,CAkBA;;;AAEAwF,IAAI,CAACmD,QAAL,GAAgB,UAASvF,IAAT,EAAe2H,KAAf,EAAsB/E,IAAtB,EAA4B;AAC1C,MAAIhD,MAAM,GAAG,IAAb;AAEAI,EAAAA,IAAI,CAACwF,YAAL,GAAoB,EAApB;AACAxF,EAAAA,IAAI,CAAC4C,IAAL,GAAYA,IAAZ;;AACA,WAAS;AACP,QAAIgF,IAAI,GAAGhI,MAAM,CAACK,SAAP,EAAX;AACAL,IAAAA,MAAM,CAACiI,UAAP,CAAkBD,IAAlB,EAAwBhF,IAAxB;;AACA,QAAIhD,MAAM,CAACU,GAAP,CAAWtM,KAAK,CAACsB,EAAjB,CAAJ,EAA0B;AACxBsS,MAAAA,IAAI,CAACnC,IAAL,GAAY7F,MAAM,CAAC8H,gBAAP,CAAwBC,KAAxB,CAAZ;AACD,KAFD,MAEO,IAAI/E,IAAI,KAAK,OAAT,IAAoB,EAAEhD,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACoE,GAAtB,IAA8BwH,MAAM,CAAC7L,OAAP,CAAe+G,WAAf,IAA8B,CAA9B,IAAmC8E,MAAM,CAACY,YAAP,CAAoB,IAApB,CAAnE,CAAxB,EAAwH;AAC7HZ,MAAAA,MAAM,CAACe,UAAP;AACD,KAFM,MAEA,IAAIiH,IAAI,CAACL,EAAL,CAAQ3K,IAAR,KAAiB,YAAjB,IAAiC,EAAE+K,KAAK,KAAK/H,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACoE,GAAtB,IAA6BwH,MAAM,CAACY,YAAP,CAAoB,IAApB,CAAlC,CAAP,CAArC,EAA2G;AAChHZ,MAAAA,MAAM,CAACuB,KAAP,CAAavB,MAAM,CAACvB,UAApB,EAAgC,0DAAhC;AACD,KAFM,MAEA;AACLuJ,MAAAA,IAAI,CAACnC,IAAL,GAAY,IAAZ;AACD;;AACDzF,IAAAA,IAAI,CAACwF,YAAL,CAAkBpJ,IAAlB,CAAuBwD,MAAM,CAAC8C,UAAP,CAAkBkF,IAAlB,EAAwB,oBAAxB,CAAvB;;AACA,QAAI,CAAChI,MAAM,CAACU,GAAP,CAAWtM,KAAK,CAACW,KAAjB,CAAL,EAA8B;AAAE;AAAO;AACxC;;AACD,SAAOqL,IAAP;AACD,CArBD;;AAuBAoC,IAAI,CAACyF,UAAL,GAAkB,UAASD,IAAT,EAAehF,IAAf,EAAqB;AACrCgF,EAAAA,IAAI,CAACL,EAAL,GAAU,KAAKX,gBAAL,CAAsBhE,IAAtB,CAAV;AACA,OAAKiD,SAAL,CAAe+B,IAAI,CAACL,EAApB,EAAwB3E,IAAxB,EAA8B,KAA9B;AACD,CAHD,C,CAKA;AACA;;;AAEAR,IAAI,CAAC2D,aAAL,GAAqB,UAAS/F,IAAT,EAAe8H,WAAf,EAA4BC,mBAA5B,EAAiDjC,OAAjD,EAA0D;AAC7E,OAAKkC,YAAL,CAAkBhI,IAAlB;;AACA,MAAI,KAAKjM,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,KAAK/G,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,CAACgL,OAAvE,EACE;AAAE9F,IAAAA,IAAI,CAACmH,SAAL,GAAiB,KAAK7G,GAAL,CAAStM,KAAK,CAACmC,IAAf,CAAjB;AAAwC;;AAC5C,MAAI,KAAKpC,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EACE;AAAEkF,IAAAA,IAAI,CAACoH,KAAL,GAAa,CAAC,CAACtB,OAAf;AAAyB;;AAE7B,MAAIgC,WAAJ,EAAiB;AACf9H,IAAAA,IAAI,CAACuH,EAAL,GAAUO,WAAW,KAAK,YAAhB,IAAgC,KAAKlL,IAAL,KAAc5I,KAAK,CAACL,IAApD,GAA2D,IAA3D,GAAkE,KAAKoR,UAAL,EAA5E;;AACA,QAAI/E,IAAI,CAACuH,EAAT,EAAa;AACX,WAAK1B,SAAL,CAAe7F,IAAI,CAACuH,EAApB,EAAwB,KAAK9I,QAAL,IAAiB,CAAC,KAAKG,UAAvB,GAAoC,KAApC,GAA4C,KAApE;AACD;AACF;;AAED,MAAIqJ,QAAQ,GAAG,KAAKpJ,WAApB;AAAA,MAAiCqJ,UAAU,GAAG,KAAKpJ,OAAnD;AAAA,MACIqJ,WAAW,GAAG,KAAKpJ,QADvB;AAAA,MACiCqJ,WAAW,GAAG,KAAKpJ,QADpD;AAAA,MAC8DqJ,SAAS,GAAG,KAAKzJ,UAD/E;AAEA,OAAKC,WAAL,GAAmBmB,IAAI,CAACmH,SAAxB;AACA,OAAKrI,OAAL,GAAekB,IAAI,CAACoH,KAApB;AACA,OAAKrI,QAAL,GAAgB,CAAhB;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACA,OAAKJ,UAAL,GAAkB,IAAlB;AACA,OAAKQ,kBAAL;;AAEA,MAAI,CAAC0I,WAAL,EACE;AAAE9H,IAAAA,IAAI,CAACuH,EAAL,GAAU,KAAK3K,IAAL,KAAc5I,KAAK,CAACL,IAApB,GAA2B,KAAKoR,UAAL,EAA3B,GAA+C,IAAzD;AAAgE;;AAEpE,OAAKuD,mBAAL,CAAyBtI,IAAzB;AACA,OAAKuI,iBAAL,CAAuBvI,IAAvB,EAA6B+H,mBAA7B;AAEA,OAAKlJ,WAAL,GAAmBoJ,QAAnB;AACA,OAAKnJ,OAAL,GAAeoJ,UAAf;AACA,OAAKnJ,QAAL,GAAgBoJ,WAAhB;AACA,OAAKnJ,QAAL,GAAgBoJ,WAAhB;AACA,OAAKxJ,UAAL,GAAkByJ,SAAlB;AACA,SAAO,KAAK3F,UAAL,CAAgB1C,IAAhB,EAAsB8H,WAAW,GAAG,qBAAH,GAA2B,oBAA5D,CAAP;AACD,CAnCD;;AAqCA1F,IAAI,CAACkG,mBAAL,GAA2B,UAAStI,IAAT,EAAe;AACxC,OAAKkB,MAAL,CAAYlN,KAAK,CAACS,MAAlB;AACAuL,EAAAA,IAAI,CAACwI,MAAL,GAAc,KAAKC,gBAAL,CAAsBzU,KAAK,CAACU,MAA5B,EAAoC,KAApC,EAA2C,KAAKX,OAAL,CAAa+G,WAAb,IAA4B,CAAvE,CAAd;AACA,OAAKkH,8BAAL;AACD,CAJD,C,CAMA;AACA;;;AAEAI,IAAI,CAACyB,UAAL,GAAkB,UAAS7D,IAAT,EAAe8H,WAAf,EAA4B;AAC5C,MAAIlI,MAAM,GAAG,IAAb;AAEA,OAAKW,IAAL;AAEA,OAAKmI,YAAL,CAAkB1I,IAAlB,EAAwB8H,WAAxB;AACA,OAAKa,eAAL,CAAqB3I,IAArB;AACA,MAAI4I,SAAS,GAAG,KAAK3I,SAAL,EAAhB;AACA,MAAI4I,cAAc,GAAG,KAArB;AACAD,EAAAA,SAAS,CAACtG,IAAV,GAAiB,EAAjB;AACA,OAAKpB,MAAL,CAAYlN,KAAK,CAACO,MAAlB;;AACA,SAAO,CAAC,KAAK+L,GAAL,CAAStM,KAAK,CAACQ,MAAf,CAAR,EAAgC;AAC9B,QAAIsU,MAAM,GAAGlJ,MAAM,CAACmJ,gBAAP,CAAwBH,SAAxB,CAAb;;AACA,QAAIE,MAAM,IAAIA,MAAM,CAAClM,IAAP,KAAgB,kBAA1B,IAAgDkM,MAAM,CAAClG,IAAP,KAAgB,aAApE,EAAmF;AACjF,UAAIiG,cAAJ,EAAoB;AAAEjJ,QAAAA,MAAM,CAACuB,KAAP,CAAa2H,MAAM,CAAC3O,KAApB,EAA2B,yCAA3B;AAAwE;;AAC9F0O,MAAAA,cAAc,GAAG,IAAjB;AACD;AACF;;AACD7I,EAAAA,IAAI,CAACsC,IAAL,GAAY,KAAKI,UAAL,CAAgBkG,SAAhB,EAA2B,WAA3B,CAAZ;AACA,SAAO,KAAKlG,UAAL,CAAgB1C,IAAhB,EAAsB8H,WAAW,GAAG,kBAAH,GAAwB,iBAAzD,CAAP;AACD,CApBD;;AAsBA1F,IAAI,CAAC2G,gBAAL,GAAwB,UAASH,SAAT,EAAoB;AAC1C,MAAIhJ,MAAM,GAAG,IAAb;;AAEA,MAAI,KAAKU,GAAL,CAAStM,KAAK,CAACY,IAAf,CAAJ,EAA0B;AAAE,WAAO,IAAP;AAAa;;AAEzC,MAAIoU,MAAM,GAAG,KAAK/I,SAAL,EAAb;;AACA,MAAIgJ,aAAa,GAAG,UAAUC,CAAV,EAAaC,WAAb,EAA0B;AAC5C,QAAKA,WAAW,KAAK,KAAK,CAA1B,EAA8BA,WAAW,GAAG,KAAd;AAE9B,QAAIhP,KAAK,GAAGyF,MAAM,CAACzF,KAAnB;AAAA,QAA0BsC,QAAQ,GAAGmD,MAAM,CAACnD,QAA5C;;AACA,QAAI,CAACmD,MAAM,CAACa,aAAP,CAAqByI,CAArB,CAAL,EAA8B;AAAE,aAAO,KAAP;AAAc;;AAC9C,QAAItJ,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACS,MAAtB,KAAiC,CAAC0U,WAAD,IAAgB,CAACvJ,MAAM,CAACgB,kBAAP,EAAlD,CAAJ,EAAoF;AAAE,aAAO,IAAP;AAAa;;AACnG,QAAIoI,MAAM,CAACI,GAAX,EAAgB;AAAExJ,MAAAA,MAAM,CAACe,UAAP;AAAsB;;AACxCqI,IAAAA,MAAM,CAACK,QAAP,GAAkB,KAAlB;AACAL,IAAAA,MAAM,CAACI,GAAP,GAAaxJ,MAAM,CAAC0J,WAAP,CAAmBnP,KAAnB,EAA0BsC,QAA1B,CAAb;AACAuM,IAAAA,MAAM,CAACI,GAAP,CAAWzV,IAAX,GAAkBuV,CAAlB;AACAtJ,IAAAA,MAAM,CAAC8C,UAAP,CAAkBsG,MAAM,CAACI,GAAzB,EAA8B,YAA9B;AACA,WAAO,KAAP;AACD,GAZD;;AAcAJ,EAAAA,MAAM,CAACpG,IAAP,GAAc,QAAd;AACAoG,EAAAA,MAAM,CAACO,MAAP,GAAgBN,aAAa,CAAC,QAAD,CAA7B;AACA,MAAIO,WAAW,GAAG,KAAKlJ,GAAL,CAAStM,KAAK,CAACmC,IAAf,CAAlB;AACA,MAAI2P,OAAO,GAAG,KAAd;;AACA,MAAI,CAAC0D,WAAL,EAAkB;AAChB,QAAI,KAAKzV,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiCmO,aAAa,CAAC,OAAD,EAAU,IAAV,CAAlD,EAAmE;AACjEnD,MAAAA,OAAO,GAAG,IAAV;AACA0D,MAAAA,WAAW,GAAG,KAAKzV,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,KAAKwF,GAAL,CAAStM,KAAK,CAACmC,IAAf,CAA/C;AACD,KAHD,MAGO,IAAI8S,aAAa,CAAC,KAAD,CAAjB,EAA0B;AAC/BD,MAAAA,MAAM,CAACpG,IAAP,GAAc,KAAd;AACD,KAFM,MAEA,IAAIqG,aAAa,CAAC,KAAD,CAAjB,EAA0B;AAC/BD,MAAAA,MAAM,CAACpG,IAAP,GAAc,KAAd;AACD;AACF;;AACD,MAAI,CAACoG,MAAM,CAACI,GAAZ,EAAiB;AAAE,SAAKK,iBAAL,CAAuBT,MAAvB;AAAiC;;AACpD,MAAII,GAAG,GAAGJ,MAAM,CAACI,GAAjB;;AACA,MAAI,CAACJ,MAAM,CAACK,QAAR,IAAoB,CAACL,MAAM,CAACO,MAA5B,KAAuCH,GAAG,CAACxM,IAAJ,KAAa,YAAb,IAA6BwM,GAAG,CAACzV,IAAJ,KAAa,aAA1C,IACvCyV,GAAG,CAACxM,IAAJ,KAAa,SAAb,IAA0BwM,GAAG,CAACvM,KAAJ,KAAc,aADxC,CAAJ,EAC4D;AAC1D,QAAImM,MAAM,CAACpG,IAAP,KAAgB,QAApB,EAA8B;AAAE,WAAKzB,KAAL,CAAWiI,GAAG,CAACjP,KAAf,EAAsB,yCAAtB;AAAmE;;AACnG,QAAIqP,WAAJ,EAAiB;AAAE,WAAKrI,KAAL,CAAWiI,GAAG,CAACjP,KAAf,EAAsB,kCAAtB;AAA4D;;AAC/E,QAAI2L,OAAJ,EAAa;AAAE,WAAK3E,KAAL,CAAWiI,GAAG,CAACjP,KAAf,EAAsB,sCAAtB;AAAgE;;AAC/E6O,IAAAA,MAAM,CAACpG,IAAP,GAAc,aAAd;AACD,GAND,MAMO,IAAIoG,MAAM,CAACO,MAAP,IAAiBH,GAAG,CAACxM,IAAJ,KAAa,YAA9B,IAA8CwM,GAAG,CAACzV,IAAJ,KAAa,WAA/D,EAA4E;AACjF,SAAKwN,KAAL,CAAWiI,GAAG,CAACjP,KAAf,EAAsB,wDAAtB;AACD;;AACD,OAAKuP,gBAAL,CAAsBd,SAAtB,EAAiCI,MAAjC,EAAyCQ,WAAzC,EAAsD1D,OAAtD;;AACA,MAAIkD,MAAM,CAACpG,IAAP,KAAgB,KAAhB,IAAyBoG,MAAM,CAACnM,KAAP,CAAa2L,MAAb,CAAoBhW,MAApB,KAA+B,CAA5D,EACE;AAAE,SAAKoP,gBAAL,CAAsBoH,MAAM,CAACnM,KAAP,CAAa1C,KAAnC,EAA0C,8BAA1C;AAA4E;;AAChF,MAAI6O,MAAM,CAACpG,IAAP,KAAgB,KAAhB,IAAyBoG,MAAM,CAACnM,KAAP,CAAa2L,MAAb,CAAoBhW,MAApB,KAA+B,CAA5D,EACE;AAAE,SAAKoP,gBAAL,CAAsBoH,MAAM,CAACnM,KAAP,CAAa1C,KAAnC,EAA0C,sCAA1C;AAAoF;;AACxF,MAAI6O,MAAM,CAACpG,IAAP,KAAgB,KAAhB,IAAyBoG,MAAM,CAACnM,KAAP,CAAa2L,MAAb,CAAoB,CAApB,EAAuB5L,IAAvB,KAAgC,aAA7D,EACE;AAAE,SAAKgF,gBAAL,CAAsBoH,MAAM,CAACnM,KAAP,CAAa2L,MAAb,CAAoB,CAApB,EAAuBrO,KAA7C,EAAoD,+BAApD;AAAuF;;AAC3F,SAAO6O,MAAP;AACD,CArDD;;AAuDA5G,IAAI,CAACsH,gBAAL,GAAwB,UAASd,SAAT,EAAoBI,MAApB,EAA4BQ,WAA5B,EAAyC1D,OAAzC,EAAkD;AACxEkD,EAAAA,MAAM,CAACnM,KAAP,GAAe,KAAK8M,WAAL,CAAiBH,WAAjB,EAA8B1D,OAA9B,CAAf;AACA8C,EAAAA,SAAS,CAACtG,IAAV,CAAelG,IAAf,CAAoB,KAAKsG,UAAL,CAAgBsG,MAAhB,EAAwB,kBAAxB,CAApB;AACD,CAHD;;AAKA5G,IAAI,CAACsG,YAAL,GAAoB,UAAS1I,IAAT,EAAe8H,WAAf,EAA4B;AAC9C9H,EAAAA,IAAI,CAACuH,EAAL,GAAU,KAAK3K,IAAL,KAAc5I,KAAK,CAACL,IAApB,GAA2B,KAAKoR,UAAL,EAA3B,GAA+C+C,WAAW,KAAK,IAAhB,GAAuB,KAAKnH,UAAL,EAAvB,GAA2C,IAApG;AACD,CAFD;;AAIAyB,IAAI,CAACuG,eAAL,GAAuB,UAAS3I,IAAT,EAAe;AACpCA,EAAAA,IAAI,CAAC4J,UAAL,GAAkB,KAAKtJ,GAAL,CAAStM,KAAK,CAAC8D,QAAf,IAA2B,KAAK+R,mBAAL,EAA3B,GAAwD,IAA1E;AACD,CAFD,C,CAIA;;;AAEAzH,IAAI,CAACqC,WAAL,GAAmB,UAASzE,IAAT,EAAeqC,OAAf,EAAwB;AACzC,MAAIzC,MAAM,GAAG,IAAb;AAEA,OAAKW,IAAL,GAHyC,CAIzC;;AACA,MAAI,KAAKD,GAAL,CAAStM,KAAK,CAACmC,IAAf,CAAJ,EAA0B;AACxB,SAAKuK,gBAAL,CAAsB,MAAtB;;AACA,QAAI,KAAK9D,IAAL,KAAc5I,KAAK,CAACG,MAAxB,EAAgC;AAAE,WAAKwM,UAAL;AAAoB;;AACtDX,IAAAA,IAAI,CAACrH,MAAL,GAAc,KAAKmR,aAAL,EAAd;AACA,SAAKhJ,SAAL;AACA,WAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AACD,MAAI,KAAKM,GAAL,CAAStM,KAAK,CAAC2C,QAAf,CAAJ,EAA8B;AAAE;AAC9B,SAAKoT,WAAL,CAAiB1H,OAAjB,EAA0B,SAA1B,EAAqC,KAAKjE,YAA1C;AACA,QAAI0H,OAAJ;;AACA,QAAI,KAAKlJ,IAAL,KAAc5I,KAAK,CAACgD,SAApB,KAAkC8O,OAAO,GAAG,KAAK3C,eAAL,EAA5C,CAAJ,EAAyE;AACvE,UAAI6G,KAAK,GAAG,KAAK/J,SAAL,EAAZ;AACA,WAAKM,IAAL;;AACA,UAAIuF,OAAJ,EAAa;AAAE,aAAKvF,IAAL;AAAc;;AAC7BP,MAAAA,IAAI,CAACqD,WAAL,GAAmB,KAAK0C,aAAL,CAAmBiE,KAAnB,EAA0B,YAA1B,EAAwC,KAAxC,EAA+ClE,OAA/C,CAAnB;AACD,KALD,MAKO,IAAI,KAAKlJ,IAAL,KAAc5I,KAAK,CAAC6D,MAAxB,EAAgC;AACrC,UAAIoS,KAAK,GAAG,KAAKhK,SAAL,EAAZ;AACAD,MAAAA,IAAI,CAACqD,WAAL,GAAmB,KAAKQ,UAAL,CAAgBoG,KAAhB,EAAuB,YAAvB,CAAnB;AACD,KAHM,MAGA;AACLjK,MAAAA,IAAI,CAACqD,WAAL,GAAmB,KAAKqE,gBAAL,EAAnB;AACA,WAAK5G,SAAL;AACD;;AACD,WAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,0BAAtB,CAAP;AACD,GA5BwC,CA6BzC;;;AACA,MAAI,KAAKkK,0BAAL,EAAJ,EAAuC;AACrClK,IAAAA,IAAI,CAACqD,WAAL,GAAmB,KAAKb,cAAL,CAAoB,IAApB,CAAnB;;AACA,QAAIxC,IAAI,CAACqD,WAAL,CAAiBzG,IAAjB,KAA0B,qBAA9B,EACE;AAAE,WAAKuN,mBAAL,CAAyB9H,OAAzB,EAAkCrC,IAAI,CAACqD,WAAL,CAAiBmC,YAAnD;AAAmE,KADvE,MAGE;AAAE,WAAKuE,WAAL,CAAiB1H,OAAjB,EAA0BrC,IAAI,CAACqD,WAAL,CAAiBkE,EAAjB,CAAoB5T,IAA9C,EAAoDqM,IAAI,CAACqD,WAAL,CAAiBkE,EAAjB,CAAoBpN,KAAxE;AAAiF;;AACrF6F,IAAAA,IAAI,CAACoK,UAAL,GAAkB,EAAlB;AACApK,IAAAA,IAAI,CAACrH,MAAL,GAAc,IAAd;AACD,GARD,MAQO;AAAE;AACPqH,IAAAA,IAAI,CAACqD,WAAL,GAAmB,IAAnB;AACArD,IAAAA,IAAI,CAACoK,UAAL,GAAkB,KAAKC,qBAAL,CAA2BhI,OAA3B,CAAlB;;AACA,QAAI,KAAK5B,aAAL,CAAmB,MAAnB,CAAJ,EAAgC;AAC9B,UAAI,KAAK7D,IAAL,KAAc5I,KAAK,CAACG,MAAxB,EAAgC;AAAE,aAAKwM,UAAL;AAAoB;;AACtDX,MAAAA,IAAI,CAACrH,MAAL,GAAc,KAAKmR,aAAL,EAAd;AACD,KAHD,MAGO;AACL;AACA,WAAK,IAAIvX,CAAC,GAAG,CAAR,EAAWyU,IAAI,GAAGhH,IAAI,CAACoK,UAA5B,EAAwC7X,CAAC,GAAGyU,IAAI,CAACxU,MAAjD,EAAyDD,CAAC,IAAI,CAA9D,EAAiE;AAC/D,YAAI+X,IAAI,GAAGtD,IAAI,CAACzU,CAAD,CAAf;AAEAqN,QAAAA,MAAM,CAAC2K,eAAP,CAAuBD,IAAI,CAACE,KAA5B;AACD;;AAEDxK,MAAAA,IAAI,CAACrH,MAAL,GAAc,IAAd;AACD;;AACD,SAAKmI,SAAL;AACD;;AACD,SAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,wBAAtB,CAAP;AACD,CAzDD;;AA2DAoC,IAAI,CAAC2H,WAAL,GAAmB,UAAS1H,OAAT,EAAkB1O,IAAlB,EAAwBrB,GAAxB,EAA6B;AAC9C,MAAI,CAAC+P,OAAL,EAAc;AAAE;AAAQ;;AACxB,MAAIhJ,GAAG,CAACgJ,OAAD,EAAU1O,IAAV,CAAP,EACE;AAAE,SAAKiO,gBAAL,CAAsBtP,GAAtB,EAA2B,uBAAuBqB,IAAvB,GAA8B,GAAzD;AAAgE;;AACpE0O,EAAAA,OAAO,CAAC1O,IAAD,CAAP,GAAgB,IAAhB;AACD,CALD;;AAOAyO,IAAI,CAACqI,kBAAL,GAA0B,UAASpI,OAAT,EAAkBqI,GAAlB,EAAuB;AAC/C,MAAI9K,MAAM,GAAG,IAAb;AAEA,MAAIhD,IAAI,GAAG8N,GAAG,CAAC9N,IAAf;;AACA,MAAIA,IAAI,KAAK,YAAb,EACE;AAAE,SAAKmN,WAAL,CAAiB1H,OAAjB,EAA0BqI,GAAG,CAAC/W,IAA9B,EAAoC+W,GAAG,CAACvQ,KAAxC;AAAiD,GADrD,MAEK,IAAIyC,IAAI,KAAK,eAAb,EACH;AAAE,SAAK,IAAIrK,CAAC,GAAG,CAAR,EAAWyU,IAAI,GAAG0D,GAAG,CAACC,UAA3B,EAAuCpY,CAAC,GAAGyU,IAAI,CAACxU,MAAhD,EAAwDD,CAAC,IAAI,CAA7D,EACA;AACE,UAAIqY,IAAI,GAAG5D,IAAI,CAACzU,CAAD,CAAf;AAEAqN,MAAAA,MAAM,CAAC6K,kBAAP,CAA0BpI,OAA1B,EAAmCuI,IAAnC;AACD;AAAE,GANF,MAOA,IAAIhO,IAAI,KAAK,cAAb,EACH;AAAE,SAAK,IAAImK,GAAG,GAAG,CAAV,EAAa8D,MAAM,GAAGH,GAAG,CAACI,QAA/B,EAAyC/D,GAAG,GAAG8D,MAAM,CAACrY,MAAtD,EAA8DuU,GAAG,IAAI,CAArE,EAAwE;AACxE,UAAIgE,GAAG,GAAGF,MAAM,CAAC9D,GAAD,CAAhB;;AAEE,UAAIgE,GAAJ,EAAS;AAAEnL,QAAAA,MAAM,CAAC6K,kBAAP,CAA0BpI,OAA1B,EAAmC0I,GAAnC;AAA0C;AACxD;AAAE,GALA,MAMA,IAAInO,IAAI,KAAK,UAAb,EACH;AAAE,SAAK6N,kBAAL,CAAwBpI,OAAxB,EAAiCqI,GAAG,CAAC7N,KAArC;AAA8C,GAD7C,MAEA,IAAID,IAAI,KAAK,mBAAb,EACH;AAAE,SAAK6N,kBAAL,CAAwBpI,OAAxB,EAAiCqI,GAAG,CAAClD,IAArC;AAA6C,GAD5C,MAEA,IAAI5K,IAAI,KAAK,aAAb,EACH;AAAE,SAAK6N,kBAAL,CAAwBpI,OAAxB,EAAiCqI,GAAG,CAACxE,QAArC;AAAiD,GADhD,MAEA,IAAItJ,IAAI,KAAK,yBAAb,EACH;AAAE,SAAK6N,kBAAL,CAAwBpI,OAAxB,EAAiCqI,GAAG,CAACvI,UAArC;AAAmD;AACxD,CA3BD;;AA6BAC,IAAI,CAAC+H,mBAAL,GAA2B,UAAS9H,OAAT,EAAkB2I,KAAlB,EAAyB;AAClD,MAAIpL,MAAM,GAAG,IAAb;;AAEA,MAAI,CAACyC,OAAL,EAAc;AAAE;AAAQ;;AACxB,OAAK,IAAI9P,CAAC,GAAG,CAAR,EAAWyU,IAAI,GAAGgE,KAAvB,EAA8BzY,CAAC,GAAGyU,IAAI,CAACxU,MAAvC,EAA+CD,CAAC,IAAI,CAApD,EACE;AACA,QAAIqV,IAAI,GAAGZ,IAAI,CAACzU,CAAD,CAAf;AAEAqN,IAAAA,MAAM,CAAC6K,kBAAP,CAA0BpI,OAA1B,EAAmCuF,IAAI,CAACL,EAAxC;AACD;AACF,CAVD;;AAYAnF,IAAI,CAAC8H,0BAAL,GAAkC,YAAW;AAC3C,SAAO,KAAKtN,IAAL,CAAU1J,OAAV,KAAsB,KAAtB,IACL,KAAK0J,IAAL,CAAU1J,OAAV,KAAsB,OADjB,IAEL,KAAK0J,IAAL,CAAU1J,OAAV,KAAsB,OAFjB,IAGL,KAAK0J,IAAL,CAAU1J,OAAV,KAAsB,UAHjB,IAIL,KAAK4P,KAAL,EAJK,IAKL,KAAKK,eAAL,EALF;AAMD,CAPD,C,CASA;;;AAEAf,IAAI,CAACiI,qBAAL,GAA6B,UAAShI,OAAT,EAAkB;AAC7C,MAAIzC,MAAM,GAAG,IAAb;AAEA,MAAIqL,KAAK,GAAG,EAAZ;AAAA,MAAgBC,KAAK,GAAG,IAAxB,CAH6C,CAI7C;;AACA,OAAKhK,MAAL,CAAYlN,KAAK,CAACO,MAAlB;;AACA,SAAO,CAAC,KAAK+L,GAAL,CAAStM,KAAK,CAACQ,MAAf,CAAR,EAAgC;AAC9B,QAAI,CAAC0W,KAAL,EAAY;AACVtL,MAAAA,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACW,KAApB;;AACA,UAAIiL,MAAM,CAACmB,kBAAP,CAA0B/M,KAAK,CAACQ,MAAhC,CAAJ,EAA6C;AAAE;AAAO;AACvD,KAHD,MAGO;AAAE0W,MAAAA,KAAK,GAAG,KAAR;AAAgB;;AAEzB,QAAIlL,IAAI,GAAGJ,MAAM,CAACK,SAAP,EAAX;AACAD,IAAAA,IAAI,CAACwK,KAAL,GAAa5K,MAAM,CAACmF,UAAP,CAAkB,IAAlB,CAAb;AACA/E,IAAAA,IAAI,CAACmL,QAAL,GAAgBvL,MAAM,CAACa,aAAP,CAAqB,IAArB,IAA6Bb,MAAM,CAACmF,UAAP,CAAkB,IAAlB,CAA7B,GAAuD/E,IAAI,CAACwK,KAA5E;AACA5K,IAAAA,MAAM,CAACmK,WAAP,CAAmB1H,OAAnB,EAA4BrC,IAAI,CAACmL,QAAL,CAAcxX,IAA1C,EAAgDqM,IAAI,CAACmL,QAAL,CAAchR,KAA9D;AACA8Q,IAAAA,KAAK,CAAC7O,IAAN,CAAWwD,MAAM,CAAC8C,UAAP,CAAkB1C,IAAlB,EAAwB,iBAAxB,CAAX;AACD;;AACD,SAAOiL,KAAP;AACD,CAnBD,C,CAqBA;;;AAEA7I,IAAI,CAACoC,WAAL,GAAmB,UAASxE,IAAT,EAAe;AAChC,OAAKO,IAAL,GADgC,CAEhC;;AACA,MAAI,KAAK3D,IAAL,KAAc5I,KAAK,CAACG,MAAxB,EAAgC;AAC9B6L,IAAAA,IAAI,CAACoK,UAAL,GAAkB5D,KAAlB;AACAxG,IAAAA,IAAI,CAACrH,MAAL,GAAc,KAAKmR,aAAL,EAAd;AACD,GAHD,MAGO;AACL9J,IAAAA,IAAI,CAACoK,UAAL,GAAkB,KAAKgB,qBAAL,EAAlB;AACA,SAAK1K,gBAAL,CAAsB,MAAtB;AACAV,IAAAA,IAAI,CAACrH,MAAL,GAAc,KAAKiE,IAAL,KAAc5I,KAAK,CAACG,MAApB,GAA6B,KAAK2V,aAAL,EAA7B,GAAoD,KAAKnJ,UAAL,EAAlE;AACD;;AACD,OAAKG,SAAL;AACA,SAAO,KAAK4B,UAAL,CAAgB1C,IAAhB,EAAsB,mBAAtB,CAAP;AACD,CAbD,C,CAeA;;;AAEAoC,IAAI,CAACgJ,qBAAL,GAA6B,YAAW;AACtC,MAAIxL,MAAM,GAAG,IAAb;AAEA,MAAIqL,KAAK,GAAG,EAAZ;AAAA,MAAgBC,KAAK,GAAG,IAAxB;;AACA,MAAI,KAAKtO,IAAL,KAAc5I,KAAK,CAACL,IAAxB,EAA8B;AAC5B;AACA,QAAIqM,IAAI,GAAG,KAAKC,SAAL,EAAX;AACAD,IAAAA,IAAI,CAACwK,KAAL,GAAa,KAAKzF,UAAL,EAAb;AACA,SAAKc,SAAL,CAAe7F,IAAI,CAACwK,KAApB,EAA2B,KAA3B;AACAS,IAAAA,KAAK,CAAC7O,IAAN,CAAW,KAAKsG,UAAL,CAAgB1C,IAAhB,EAAsB,wBAAtB,CAAX;;AACA,QAAI,CAAC,KAAKM,GAAL,CAAStM,KAAK,CAACW,KAAf,CAAL,EAA4B;AAAE,aAAOsW,KAAP;AAAc;AAC7C;;AACD,MAAI,KAAKrO,IAAL,KAAc5I,KAAK,CAACmC,IAAxB,EAA8B;AAC5B,QAAIkV,MAAM,GAAG,KAAKpL,SAAL,EAAb;AACA,SAAKM,IAAL;AACA,SAAKG,gBAAL,CAAsB,IAAtB;AACA2K,IAAAA,MAAM,CAACb,KAAP,GAAe,KAAKzF,UAAL,EAAf;AACA,SAAKc,SAAL,CAAewF,MAAM,CAACb,KAAtB,EAA6B,KAA7B;AACAS,IAAAA,KAAK,CAAC7O,IAAN,CAAW,KAAKsG,UAAL,CAAgB2I,MAAhB,EAAwB,0BAAxB,CAAX;AACA,WAAOJ,KAAP;AACD;;AACD,OAAK/J,MAAL,CAAYlN,KAAK,CAACO,MAAlB;;AACA,SAAO,CAAC,KAAK+L,GAAL,CAAStM,KAAK,CAACQ,MAAf,CAAR,EAAgC;AAC9B,QAAI,CAAC0W,KAAL,EAAY;AACVtL,MAAAA,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACW,KAApB;;AACA,UAAIiL,MAAM,CAACmB,kBAAP,CAA0B/M,KAAK,CAACQ,MAAhC,CAAJ,EAA6C;AAAE;AAAO;AACvD,KAHD,MAGO;AAAE0W,MAAAA,KAAK,GAAG,KAAR;AAAgB;;AAEzB,QAAII,MAAM,GAAG1L,MAAM,CAACK,SAAP,EAAb;AACAqL,IAAAA,MAAM,CAACC,QAAP,GAAkB3L,MAAM,CAACmF,UAAP,CAAkB,IAAlB,CAAlB;;AACA,QAAInF,MAAM,CAACa,aAAP,CAAqB,IAArB,CAAJ,EAAgC;AAC9B6K,MAAAA,MAAM,CAACd,KAAP,GAAe5K,MAAM,CAACmF,UAAP,EAAf;AACD,KAFD,MAEO;AACLnF,MAAAA,MAAM,CAAC2K,eAAP,CAAuBe,MAAM,CAACC,QAA9B;AACAD,MAAAA,MAAM,CAACd,KAAP,GAAec,MAAM,CAACC,QAAtB;AACD;;AACD3L,IAAAA,MAAM,CAACiG,SAAP,CAAiByF,MAAM,CAACd,KAAxB,EAA+B,KAA/B;AACAS,IAAAA,KAAK,CAAC7O,IAAN,CAAWwD,MAAM,CAAC8C,UAAP,CAAkB4I,MAAlB,EAA0B,iBAA1B,CAAX;AACD;;AACD,SAAOL,KAAP;AACD,CAxCD,C,CA0CA;;;AACA7I,IAAI,CAACK,sBAAL,GAA8B,UAAS+I,UAAT,EAAqB;AACjD,OAAK,IAAIjZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiZ,UAAU,CAAChZ,MAAf,IAAyB,KAAKiZ,oBAAL,CAA0BD,UAAU,CAACjZ,CAAD,CAApC,CAAzC,EAAmF,EAAEA,CAArF,EAAwF;AACtFiZ,IAAAA,UAAU,CAACjZ,CAAD,CAAV,CAAcmZ,SAAd,GAA0BF,UAAU,CAACjZ,CAAD,CAAV,CAAc4P,UAAd,CAAyBwJ,GAAzB,CAA6B5N,KAA7B,CAAmC,CAAnC,EAAsC,CAAC,CAAvC,CAA1B;AACD;AACF,CAJD;;AAKAqE,IAAI,CAACqJ,oBAAL,GAA4B,UAASG,SAAT,EAAoB;AAC9C,SACEA,SAAS,CAAChP,IAAV,KAAmB,qBAAnB,IACAgP,SAAS,CAACzJ,UAAV,CAAqBvF,IAArB,KAA8B,SAD9B,IAEA,OAAOgP,SAAS,CAACzJ,UAAV,CAAqBtF,KAA5B,KAAsC,QAFtC,MAGA;AACC,OAAKtC,KAAL,CAAWqR,SAAS,CAACzR,KAArB,MAAgC,IAAhC,IAAwC,KAAKI,KAAL,CAAWqR,SAAS,CAACzR,KAArB,MAAgC,GAJzE,CADF;AAOD,CARD;;AAUA,IAAI0R,IAAI,GAAG1O,MAAM,CAACjE,SAAlB,C,CAEA;AACA;;AAEA2S,IAAI,CAACjG,YAAL,GAAoB,UAAS5F,IAAT,EAAe8L,SAAf,EAA0BnK,sBAA1B,EAAkD;AACpE,MAAI/B,MAAM,GAAG,IAAb;;AAEA,MAAI,KAAK7L,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiCkF,IAArC,EAA2C;AACzC,YAAQA,IAAI,CAACpD,IAAb;AACA,WAAK,YAAL;AACE,YAAI,KAAKkC,OAAL,IAAgBkB,IAAI,CAACrM,IAAL,KAAc,OAAlC,EACE;AAAE,eAAKwN,KAAL,CAAWnB,IAAI,CAAC7F,KAAhB,EAAuB,4DAAvB;AAAuF;;AAC3F;;AAEF,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,aAAL;AACE;;AAEF,WAAK,kBAAL;AACE6F,QAAAA,IAAI,CAACpD,IAAL,GAAY,eAAZ;;AACA,YAAI+E,sBAAJ,EAA4B;AAAE,eAAKD,kBAAL,CAAwBC,sBAAxB,EAAgD,IAAhD;AAAwD;;AACtF,aAAK,IAAIpP,CAAC,GAAG,CAAR,EAAWyU,IAAI,GAAGhH,IAAI,CAAC2K,UAA5B,EAAwCpY,CAAC,GAAGyU,IAAI,CAACxU,MAAjD,EAAyDD,CAAC,IAAI,CAA9D,EAAiE;AAC/D,cAAIqY,IAAI,GAAG5D,IAAI,CAACzU,CAAD,CAAf;AAEFqN,UAAAA,MAAM,CAACgG,YAAP,CAAoBgF,IAApB,EAA0BkB,SAA1B,EAHiE,CAI/D;AACA;AACA;AACA;AACA;;AACA,cACElB,IAAI,CAAChO,IAAL,KAAc,aAAd,KACCgO,IAAI,CAAC1E,QAAL,CAActJ,IAAd,KAAuB,cAAvB,IAAyCgO,IAAI,CAAC1E,QAAL,CAActJ,IAAd,KAAuB,eADjE,CADF,EAGE;AACAgD,YAAAA,MAAM,CAACuB,KAAP,CAAayJ,IAAI,CAAC1E,QAAL,CAAc/L,KAA3B,EAAkC,kBAAlC;AACD;AACF;;AACD;;AAEF,WAAK,UAAL;AACE;AACA,YAAI6F,IAAI,CAAC4C,IAAL,KAAc,MAAlB,EAA0B;AAAE,eAAKzB,KAAL,CAAWnB,IAAI,CAACoJ,GAAL,CAASjP,KAApB,EAA2B,+CAA3B;AAA8E;;AAC1G,aAAKyL,YAAL,CAAkB5F,IAAI,CAACnD,KAAvB,EAA8BiP,SAA9B;AACA;;AAEF,WAAK,iBAAL;AACE9L,QAAAA,IAAI,CAACpD,IAAL,GAAY,cAAZ;;AACA,YAAI+E,sBAAJ,EAA4B;AAAE,eAAKD,kBAAL,CAAwBC,sBAAxB,EAAgD,IAAhD;AAAwD;;AACtF,aAAKoK,gBAAL,CAAsB/L,IAAI,CAAC8K,QAA3B,EAAqCgB,SAArC;AACA;;AAEF,WAAK,eAAL;AACE9L,QAAAA,IAAI,CAACpD,IAAL,GAAY,aAAZ;AACA,aAAKgJ,YAAL,CAAkB5F,IAAI,CAACkG,QAAvB,EAAiC4F,SAAjC;;AACA,YAAI9L,IAAI,CAACkG,QAAL,CAActJ,IAAd,KAAuB,mBAA3B,EACE;AAAE,eAAKuE,KAAL,CAAWnB,IAAI,CAACkG,QAAL,CAAc/L,KAAzB,EAAgC,2CAAhC;AAA+E;;AACnF;;AAEF,WAAK,sBAAL;AACE,YAAI6F,IAAI,CAACgM,QAAL,KAAkB,GAAtB,EAA2B;AAAE,eAAK7K,KAAL,CAAWnB,IAAI,CAACwH,IAAL,CAAUpN,GAArB,EAA0B,6DAA1B;AAA2F;;AACxH4F,QAAAA,IAAI,CAACpD,IAAL,GAAY,mBAAZ;AACA,eAAOoD,IAAI,CAACgM,QAAZ;AACA,aAAKpG,YAAL,CAAkB5F,IAAI,CAACwH,IAAvB,EAA6BsE,SAA7B;AACA;;AAEF,WAAK,mBAAL;AACE;;AAEF,WAAK,yBAAL;AACE,aAAKlG,YAAL,CAAkB5F,IAAI,CAACmC,UAAvB,EAAmC2J,SAAnC;AACA;;AAEF,WAAK,kBAAL;AACE,YAAI,CAACA,SAAL,EAAgB;AAAE;AAAO;;AAE3B;AACE,aAAK3K,KAAL,CAAWnB,IAAI,CAAC7F,KAAhB,EAAuB,qBAAvB;AArEF;AAuED,GAxED,MAwEO,IAAIwH,sBAAJ,EAA4B;AAAE,SAAKD,kBAAL,CAAwBC,sBAAxB,EAAgD,IAAhD;AAAwD;;AAC7F,SAAO3B,IAAP;AACD,CA7ED,C,CA+EA;;;AAEA6L,IAAI,CAACE,gBAAL,GAAwB,UAASE,QAAT,EAAmBH,SAAnB,EAA8B;AACpD,MAAIlM,MAAM,GAAG,IAAb;AAEA,MAAIxF,GAAG,GAAG6R,QAAQ,CAACzZ,MAAnB;;AACA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6H,GAApB,EAAyB7H,CAAC,EAA1B,EAA8B;AAC5B,QAAIwY,GAAG,GAAGkB,QAAQ,CAAC1Z,CAAD,CAAlB;;AACA,QAAIwY,GAAJ,EAAS;AAAEnL,MAAAA,MAAM,CAACgG,YAAP,CAAoBmF,GAApB,EAAyBe,SAAzB;AAAsC;AAClD;;AACD,MAAI1R,GAAJ,EAAS;AACP,QAAI8R,IAAI,GAAGD,QAAQ,CAAC7R,GAAG,GAAG,CAAP,CAAnB;;AACA,QAAI,KAAKrG,OAAL,CAAa+G,WAAb,KAA6B,CAA7B,IAAkCgR,SAAlC,IAA+CI,IAA/C,IAAuDA,IAAI,CAACtP,IAAL,KAAc,aAArE,IAAsFsP,IAAI,CAAChG,QAAL,CAActJ,IAAd,KAAuB,YAAjH,EACE;AAAE,WAAK+D,UAAL,CAAgBuL,IAAI,CAAChG,QAAL,CAAc/L,KAA9B;AAAuC;AAC5C;;AACD,SAAO8R,QAAP;AACD,CAdD,C,CAgBA;;;AAEAJ,IAAI,CAACM,WAAL,GAAmB,UAASxK,sBAAT,EAAiC;AAClD,MAAI3B,IAAI,GAAG,KAAKC,SAAL,EAAX;AACA,OAAKM,IAAL;AACAP,EAAAA,IAAI,CAACkG,QAAL,GAAgB,KAAKwB,gBAAL,CAAsB,KAAtB,EAA6B/F,sBAA7B,CAAhB;AACA,SAAO,KAAKe,UAAL,CAAgB1C,IAAhB,EAAsB,eAAtB,CAAP;AACD,CALD;;AAOA6L,IAAI,CAACO,gBAAL,GAAwB,YAAW;AACjC,MAAIpM,IAAI,GAAG,KAAKC,SAAL,EAAX;AACA,OAAKM,IAAL,GAFiC,CAIjC;;AACA,MAAI,KAAKxM,OAAL,CAAa+G,WAAb,KAA6B,CAA7B,IAAkC,KAAK8B,IAAL,KAAc5I,KAAK,CAACL,IAA1D,EACE;AAAE,SAAKgN,UAAL;AAAoB;;AAExBX,EAAAA,IAAI,CAACkG,QAAL,GAAgB,KAAKU,gBAAL,EAAhB;AAEA,SAAO,KAAKlE,UAAL,CAAgB1C,IAAhB,EAAsB,aAAtB,CAAP;AACD,CAXD,C,CAaA;;;AAEA6L,IAAI,CAACjF,gBAAL,GAAwB,YAAW;AACjC,MAAI,KAAK7S,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjC,YAAQ,KAAK8B,IAAb;AACA,WAAK5I,KAAK,CAACK,QAAX;AACE,YAAI2L,IAAI,GAAG,KAAKC,SAAL,EAAX;AACA,aAAKM,IAAL;AACAP,QAAAA,IAAI,CAAC8K,QAAL,GAAgB,KAAKrC,gBAAL,CAAsBzU,KAAK,CAACM,QAA5B,EAAsC,IAAtC,EAA4C,IAA5C,CAAhB;AACA,eAAO,KAAKoO,UAAL,CAAgB1C,IAAhB,EAAsB,cAAtB,CAAP;;AAEF,WAAKhM,KAAK,CAACO,MAAX;AACE,eAAO,KAAK8X,QAAL,CAAc,IAAd,CAAP;AARF;AAUD;;AACD,SAAO,KAAKtH,UAAL,EAAP;AACD,CAdD;;AAgBA8G,IAAI,CAACpD,gBAAL,GAAwB,UAAS6D,KAAT,EAAgBC,UAAhB,EAA4BC,kBAA5B,EAAgD;AACtE,MAAI5M,MAAM,GAAG,IAAb;AAEA,MAAI6M,IAAI,GAAG,EAAX;AAAA,MAAevB,KAAK,GAAG,IAAvB;;AACA,SAAO,CAAC,KAAK5K,GAAL,CAASgM,KAAT,CAAR,EAAyB;AACvB,QAAIpB,KAAJ,EAAW;AAAEA,MAAAA,KAAK,GAAG,KAAR;AAAgB,KAA7B,MACK;AAAEtL,MAAAA,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACW,KAApB;AAA6B;;AACpC,QAAI4X,UAAU,IAAI3M,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACW,KAAxC,EAA+C;AAC7C8X,MAAAA,IAAI,CAACrQ,IAAL,CAAU,IAAV;AACD,KAFD,MAEO,IAAIoQ,kBAAkB,IAAI5M,MAAM,CAACmB,kBAAP,CAA0BuL,KAA1B,CAA1B,EAA4D;AACjE;AACD,KAFM,MAEA,IAAI1M,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACmB,QAA1B,EAAoC;AACzC,UAAIuX,IAAI,GAAG9M,MAAM,CAACwM,gBAAP,EAAX;AACAxM,MAAAA,MAAM,CAAC+M,oBAAP,CAA4BD,IAA5B;AACAD,MAAAA,IAAI,CAACrQ,IAAL,CAAUsQ,IAAV;;AACA,UAAI9M,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACW,KAA1B,EAAiC;AAAEiL,QAAAA,MAAM,CAACuB,KAAP,CAAavB,MAAM,CAACzF,KAApB,EAA2B,+CAA3B;AAA8E;;AACjHyF,MAAAA,MAAM,CAACsB,MAAP,CAAcoL,KAAd;AACA;AACD,KAPM,MAOA;AACL,UAAIM,IAAI,GAAGhN,MAAM,CAACiN,iBAAP,CAAyBjN,MAAM,CAACzF,KAAhC,EAAuCyF,MAAM,CAACnD,QAA9C,CAAX;AACAmD,MAAAA,MAAM,CAAC+M,oBAAP,CAA4BC,IAA5B;AACAH,MAAAA,IAAI,CAACrQ,IAAL,CAAUwQ,IAAV;AACD;AACF;;AACD,SAAOH,IAAP;AACD,CAzBD;;AA2BAZ,IAAI,CAACc,oBAAL,GAA4B,UAAShG,KAAT,EAAgB;AAC1C,SAAOA,KAAP;AACD,CAFD,C,CAIA;;;AAEAkF,IAAI,CAACgB,iBAAL,GAAyB,UAASzP,QAAT,EAAmBX,QAAnB,EAA6B+K,IAA7B,EAAmC;AAC1DA,EAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKZ,gBAAL,EAAf;;AACA,MAAI,KAAK7S,OAAL,CAAa+G,WAAb,GAA2B,CAA3B,IAAgC,CAAC,KAAKwF,GAAL,CAAStM,KAAK,CAACsB,EAAf,CAArC,EAAyD;AAAE,WAAOkS,IAAP;AAAa;;AACxE,MAAIxH,IAAI,GAAG,KAAKsJ,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAAX;AACAuD,EAAAA,IAAI,CAACwH,IAAL,GAAYA,IAAZ;AACAxH,EAAAA,IAAI,CAACyH,KAAL,GAAa,KAAKC,gBAAL,EAAb;AACA,SAAO,KAAKhF,UAAL,CAAgB1C,IAAhB,EAAsB,mBAAtB,CAAP;AACD,CAPD,C,CASA;AACA;AACA;AACA;AACA;AACA;;;AAEA6L,IAAI,CAAChG,SAAL,GAAiB,UAAS3D,IAAT,EAAe4K,WAAf,EAA4BC,YAA5B,EAA0C;AACzD,MAAInN,MAAM,GAAG,IAAb;;AAEA,UAAQsC,IAAI,CAACtF,IAAb;AACA,SAAK,YAAL;AACE,UAAI,KAAKrL,MAAL,IAAe,KAAKkM,uBAAL,CAA6B9K,IAA7B,CAAkCuP,IAAI,CAACvO,IAAvC,CAAnB,EACE;AAAE,aAAKiO,gBAAL,CAAsBM,IAAI,CAAC/H,KAA3B,EAAkC,CAAC2S,WAAW,GAAG,UAAH,GAAgB,eAA5B,IAA+C5K,IAAI,CAACvO,IAApD,GAA2D,iBAA7F;AAAkH;;AACtH,UAAIoZ,YAAJ,EAAkB;AAChB,YAAI1T,GAAG,CAAC0T,YAAD,EAAe7K,IAAI,CAACvO,IAApB,CAAP,EACE;AAAE,eAAKiO,gBAAL,CAAsBM,IAAI,CAAC/H,KAA3B,EAAkC,qBAAlC;AAA2D;;AAC/D4S,QAAAA,YAAY,CAAC7K,IAAI,CAACvO,IAAN,CAAZ,GAA0B,IAA1B;AACD;;AACD,UAAImZ,WAAW,IAAIA,WAAW,KAAK,MAAnC,EAA2C;AACzC,YACEA,WAAW,KAAK,KAAhB,IAAyB,CAAC,KAAKE,iBAAL,CAAuB9K,IAAI,CAACvO,IAA5B,CAA1B,IACAmZ,WAAW,KAAK,KAAhB,IAAyB,CAAC,KAAKG,qBAAL,CAA2B/K,IAAI,CAACvO,IAAhC,CAF5B,EAGE;AACA,eAAKiO,gBAAL,CAAsBM,IAAI,CAAC/H,KAA3B,EAAmC,iBAAkB+H,IAAI,CAACvO,IAAvB,GAA+B,6BAAlE;AACD;;AACD,YAAImZ,WAAW,KAAK,KAApB,EAA2B;AACzB,eAAKI,cAAL,CAAoBhL,IAAI,CAACvO,IAAzB;AACD,SAFD,MAEO;AACL,eAAKwZ,kBAAL,CAAwBjL,IAAI,CAACvO,IAA7B;AACD;AACF;;AACD;;AAEF,SAAK,kBAAL;AACE,UAAImZ,WAAJ,EAAiB;AAAE,aAAKlL,gBAAL,CAAsBM,IAAI,CAAC/H,KAA3B,EAAkC,2BAAlC;AAAiE;;AACpF;;AAEF,SAAK,eAAL;AACE,WAAK,IAAI5H,CAAC,GAAG,CAAR,EAAWyU,IAAI,GAAG9E,IAAI,CAACyI,UAA5B,EAAwCpY,CAAC,GAAGyU,IAAI,CAACxU,MAAjD,EAAyDD,CAAC,IAAI,CAA9D,EACE;AACF,YAAIqY,IAAI,GAAG5D,IAAI,CAACzU,CAAD,CAAf;AAEAqN,QAAAA,MAAM,CAACiG,SAAP,CAAiB+E,IAAjB,EAAuBkC,WAAvB,EAAoCC,YAApC;AACD;;AACC;;AAEF,SAAK,UAAL;AACE;AACA,WAAKlH,SAAL,CAAe3D,IAAI,CAACrF,KAApB,EAA2BiQ,WAA3B,EAAwCC,YAAxC;AACA;;AAEF,SAAK,cAAL;AACE,WAAK,IAAIhG,GAAG,GAAG,CAAV,EAAa8D,MAAM,GAAG3I,IAAI,CAAC4I,QAAhC,EAA0C/D,GAAG,GAAG8D,MAAM,CAACrY,MAAvD,EAA+DuU,GAAG,IAAI,CAAtE,EAAyE;AACvE,YAAI6F,IAAI,GAAG/B,MAAM,CAAC9D,GAAD,CAAjB;;AAEF,YAAI6F,IAAJ,EAAU;AAAEhN,UAAAA,MAAM,CAACiG,SAAP,CAAiB+G,IAAjB,EAAuBE,WAAvB,EAAoCC,YAApC;AAAoD;AAC/D;;AACD;;AAEF,SAAK,mBAAL;AACE,WAAKlH,SAAL,CAAe3D,IAAI,CAACsF,IAApB,EAA0BsF,WAA1B,EAAuCC,YAAvC;AACA;;AAEF,SAAK,aAAL;AACE,WAAKlH,SAAL,CAAe3D,IAAI,CAACgE,QAApB,EAA8B4G,WAA9B,EAA2CC,YAA3C;AACA;;AAEF,SAAK,yBAAL;AACE,WAAKlH,SAAL,CAAe3D,IAAI,CAACC,UAApB,EAAgC2K,WAAhC,EAA6CC,YAA7C;AACA;;AAEF;AACE,WAAK5L,KAAL,CAAWe,IAAI,CAAC/H,KAAhB,EAAuB,CAAC2S,WAAW,GAAG,SAAH,GAAe,cAA3B,IAA6C,SAApE;AA/DF;AAiED,CApED,C,CAsEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIM,IAAI,GAAGjQ,MAAM,CAACjE,SAAlB,C,CAEA;AACA;AACA;AACA;;AAEAkU,IAAI,CAACC,cAAL,GAAsB,UAASzC,IAAT,EAAe0C,QAAf,EAAyB3L,sBAAzB,EAAiD;AACrE,MAAI,KAAK5N,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC8P,IAAI,CAAChO,IAAL,KAAc,eAAnD,EACE;AAAE;AAAQ;;AACZ,MAAI,KAAK7I,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,KAAkC8P,IAAI,CAACvB,QAAL,IAAiBuB,IAAI,CAAC5B,MAAtB,IAAgC4B,IAAI,CAAC2C,SAAvE,CAAJ,EACE;AAAE;AAAQ;;AACZ,MAAInE,GAAG,GAAGwB,IAAI,CAACxB,GAAf;AACA,MAAIzV,IAAJ;;AACA,UAAQyV,GAAG,CAACxM,IAAZ;AACA,SAAK,YAAL;AAAmBjJ,MAAAA,IAAI,GAAGyV,GAAG,CAACzV,IAAX;AAAiB;;AACpC,SAAK,SAAL;AAAgBA,MAAAA,IAAI,GAAGf,MAAM,CAACwW,GAAG,CAACvM,KAAL,CAAb;AAA0B;;AAC1C;AAAS;AAHT;;AAKA,MAAI+F,IAAI,GAAGgI,IAAI,CAAChI,IAAhB;;AACA,MAAI,KAAK7O,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjC,QAAInH,IAAI,KAAK,WAAT,IAAwBiP,IAAI,KAAK,MAArC,EAA6C;AAC3C,UAAI0K,QAAQ,CAACE,KAAb,EAAoB;AAClB,YAAI7L,sBAAsB,IAAIA,sBAAsB,CAACF,WAAvB,GAAqC,CAAnE,EAAsE;AAAEE,UAAAA,sBAAsB,CAACF,WAAvB,GAAqC2H,GAAG,CAACjP,KAAzC;AAAiD,SAAzH,CACA;AADA,aAEK;AAAE,iBAAKyH,gBAAL,CAAsBwH,GAAG,CAACjP,KAA1B,EAAiC,oCAAjC;AAAyE;AACjF;;AACDmT,MAAAA,QAAQ,CAACE,KAAT,GAAiB,IAAjB;AACD;;AACD;AACD;;AACD7Z,EAAAA,IAAI,GAAG,MAAMA,IAAb;AACA,MAAI8Z,KAAK,GAAGH,QAAQ,CAAC3Z,IAAD,CAApB;;AACA,MAAI8Z,KAAJ,EAAW;AACT,QAAIC,YAAJ;;AACA,QAAI9K,IAAI,KAAK,MAAb,EAAqB;AACnB8K,MAAAA,YAAY,GAAG,KAAKnc,MAAL,IAAekc,KAAK,CAAChI,IAArB,IAA6BgI,KAAK,CAACE,GAAnC,IAA0CF,KAAK,CAACpb,GAA/D;AACD,KAFD,MAEO;AACLqb,MAAAA,YAAY,GAAGD,KAAK,CAAChI,IAAN,IAAcgI,KAAK,CAAC7K,IAAD,CAAlC;AACD;;AACD,QAAI8K,YAAJ,EACE;AAAE,WAAK9L,gBAAL,CAAsBwH,GAAG,CAACjP,KAA1B,EAAiC,0BAAjC;AAA+D;AACpE,GATD,MASO;AACLsT,IAAAA,KAAK,GAAGH,QAAQ,CAAC3Z,IAAD,CAAR,GAAiB;AACvB8R,MAAAA,IAAI,EAAE,KADiB;AAEvBkI,MAAAA,GAAG,EAAE,KAFkB;AAGvBtb,MAAAA,GAAG,EAAE;AAHkB,KAAzB;AAKD;;AACDob,EAAAA,KAAK,CAAC7K,IAAD,CAAL,GAAc,IAAd;AACD,CA3CD,C,CA6CA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEAwK,IAAI,CAACzI,eAAL,GAAuB,UAASiJ,IAAT,EAAejM,sBAAf,EAAuC;AAC5D,MAAI/B,MAAM,GAAG,IAAb;AAEA,MAAIxC,QAAQ,GAAG,KAAKjD,KAApB;AAAA,MAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;AACA,MAAIyF,IAAI,GAAG,KAAKwF,gBAAL,CAAsBkG,IAAtB,EAA4BjM,sBAA5B,CAAX;;AACA,MAAI,KAAK/E,IAAL,KAAc5I,KAAK,CAACW,KAAxB,EAA+B;AAC7B,QAAIqL,IAAI,GAAG,KAAKsJ,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAAX;AACAuD,IAAAA,IAAI,CAAC6N,WAAL,GAAmB,CAAC3L,IAAD,CAAnB;;AACA,WAAO,KAAK5B,GAAL,CAAStM,KAAK,CAACW,KAAf,CAAP,EAA8B;AAAEqL,MAAAA,IAAI,CAAC6N,WAAL,CAAiBzR,IAAjB,CAAsBwD,MAAM,CAAC8H,gBAAP,CAAwBkG,IAAxB,EAA8BjM,sBAA9B,CAAtB;AAA+E;;AAC/G,WAAO,KAAKe,UAAL,CAAgB1C,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AACD,SAAOkC,IAAP;AACD,CAZD,C,CAcA;AACA;;;AAEAkL,IAAI,CAAC1F,gBAAL,GAAwB,UAASkG,IAAT,EAAejM,sBAAf,EAAuCmM,cAAvC,EAAuD;AAC7E,MAAI,KAAKjP,WAAL,IAAoB,KAAK2B,YAAL,CAAkB,OAAlB,CAAxB,EAAoD;AAAE,WAAO,KAAKuN,UAAL,EAAP;AAA0B;;AAEhF,MAAIC,sBAAsB,GAAG,KAA7B;AAAA,MAAoCC,cAAc,GAAG,CAAC,CAAtD;AAAA,MAAyDC,gBAAgB,GAAG,CAAC,CAA7E;;AACA,MAAIvM,sBAAJ,EAA4B;AAC1BsM,IAAAA,cAAc,GAAGtM,sBAAsB,CAACJ,mBAAxC;AACA2M,IAAAA,gBAAgB,GAAGvM,sBAAsB,CAACL,aAA1C;AACAK,IAAAA,sBAAsB,CAACJ,mBAAvB,GAA6CI,sBAAsB,CAACL,aAAvB,GAAuC,CAAC,CAArF;AACD,GAJD,MAIO;AACLK,IAAAA,sBAAsB,GAAG,IAAIP,mBAAJ,EAAzB;AACA4M,IAAAA,sBAAsB,GAAG,IAAzB;AACD;;AAED,MAAI5Q,QAAQ,GAAG,KAAKjD,KAApB;AAAA,MAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;;AACA,MAAI,KAAKG,IAAL,KAAc5I,KAAK,CAACS,MAApB,IAA8B,KAAKmI,IAAL,KAAc5I,KAAK,CAACL,IAAtD,EACE;AAAE,SAAKgL,gBAAL,GAAwB,KAAKxE,KAA7B;AAAqC;;AACzC,MAAIqN,IAAI,GAAG,KAAK2G,qBAAL,CAA2BP,IAA3B,EAAiCjM,sBAAjC,CAAX;;AACA,MAAImM,cAAJ,EAAoB;AAAEtG,IAAAA,IAAI,GAAGsG,cAAc,CAACtU,IAAf,CAAoB,IAApB,EAA0BgO,IAA1B,EAAgCpK,QAAhC,EAA0CX,QAA1C,CAAP;AAA6D;;AACnF,MAAI,KAAKG,IAAL,CAAUtJ,QAAd,EAAwB;AACtB,QAAI0M,IAAI,GAAG,KAAKsJ,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAAX;AACAuD,IAAAA,IAAI,CAACgM,QAAL,GAAgB,KAAKnP,KAArB;AACAmD,IAAAA,IAAI,CAACwH,IAAL,GAAY,KAAK5K,IAAL,KAAc5I,KAAK,CAACsB,EAApB,GAAyB,KAAKsQ,YAAL,CAAkB4B,IAAlB,EAAwB,KAAxB,EAA+B7F,sBAA/B,CAAzB,GAAkF6F,IAA9F;;AACA,QAAI,CAACwG,sBAAL,EAA6B;AAAE5M,MAAAA,mBAAmB,CAAC5H,IAApB,CAAyBmI,sBAAzB;AAAmD;;AAClFA,IAAAA,sBAAsB,CAACN,eAAvB,GAAyC,CAAC,CAA1C,CALsB,CAKuB;;AAC7C,SAAKwE,SAAL,CAAe2B,IAAf;AACA,SAAKjH,IAAL;AACAP,IAAAA,IAAI,CAACyH,KAAL,GAAa,KAAKC,gBAAL,CAAsBkG,IAAtB,CAAb;AACA,WAAO,KAAKlL,UAAL,CAAgB1C,IAAhB,EAAsB,sBAAtB,CAAP;AACD,GAVD,MAUO;AACL,QAAIgO,sBAAJ,EAA4B;AAAE,WAAKlM,qBAAL,CAA2BH,sBAA3B,EAAmD,IAAnD;AAA2D;AAC1F;;AACD,MAAIsM,cAAc,GAAG,CAAC,CAAtB,EAAyB;AAAEtM,IAAAA,sBAAsB,CAACJ,mBAAvB,GAA6C0M,cAA7C;AAA8D;;AACzF,MAAIC,gBAAgB,GAAG,CAAC,CAAxB,EAA2B;AAAEvM,IAAAA,sBAAsB,CAACL,aAAvB,GAAuC4M,gBAAvC;AAA0D;;AACvF,SAAO1G,IAAP;AACD,CAlCD,C,CAoCA;;;AAEA4F,IAAI,CAACe,qBAAL,GAA6B,UAASP,IAAT,EAAejM,sBAAf,EAAuC;AAClE,MAAIvE,QAAQ,GAAG,KAAKjD,KAApB;AAAA,MAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;AACA,MAAIyF,IAAI,GAAG,KAAKkM,YAAL,CAAkBR,IAAlB,EAAwBjM,sBAAxB,CAAX;;AACA,MAAI,KAAKG,qBAAL,CAA2BH,sBAA3B,CAAJ,EAAwD;AAAE,WAAOO,IAAP;AAAa;;AACvE,MAAI,KAAK5B,GAAL,CAAStM,KAAK,CAACe,QAAf,CAAJ,EAA8B;AAC5B,QAAIiL,IAAI,GAAG,KAAKsJ,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAAX;AACAuD,IAAAA,IAAI,CAACrN,IAAL,GAAYuP,IAAZ;AACAlC,IAAAA,IAAI,CAACgG,UAAL,GAAkB,KAAK0B,gBAAL,EAAlB;AACA,SAAKxG,MAAL,CAAYlN,KAAK,CAACa,KAAlB;AACAmL,IAAAA,IAAI,CAACiG,SAAL,GAAiB,KAAKyB,gBAAL,CAAsBkG,IAAtB,CAAjB;AACA,WAAO,KAAKlL,UAAL,CAAgB1C,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AACD,SAAOkC,IAAP;AACD,CAbD,C,CAeA;;;AAEAkL,IAAI,CAACgB,YAAL,GAAoB,UAASR,IAAT,EAAejM,sBAAf,EAAuC;AACzD,MAAIvE,QAAQ,GAAG,KAAKjD,KAApB;AAAA,MAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;AACA,MAAIyF,IAAI,GAAG,KAAKmM,eAAL,CAAqB1M,sBAArB,EAA6C,KAA7C,CAAX;;AACA,MAAI,KAAKG,qBAAL,CAA2BH,sBAA3B,CAAJ,EAAwD;AAAE,WAAOO,IAAP;AAAa;;AACvE,SAAOA,IAAI,CAAC/H,KAAL,KAAeiD,QAAf,IAA2B8E,IAAI,CAACtF,IAAL,KAAc,yBAAzC,GAAqEsF,IAArE,GAA4E,KAAKoM,WAAL,CAAiBpM,IAAjB,EAAuB9E,QAAvB,EAAiCX,QAAjC,EAA2C,CAAC,CAA5C,EAA+CmR,IAA/C,CAAnF;AACD,CALD,C,CAOA;AACA;AACA;AACA;AACA;;;AAEAR,IAAI,CAACkB,WAAL,GAAmB,UAAS9G,IAAT,EAAe+G,YAAf,EAA6BC,YAA7B,EAA2CC,OAA3C,EAAoDb,IAApD,EAA0D;AAC3E,MAAIha,IAAI,GAAG,KAAKgJ,IAAL,CAAUnJ,KAArB;;AACA,MAAIG,IAAI,IAAI,IAAR,KAAiB,CAACga,IAAD,IAAS,KAAKhR,IAAL,KAAc5I,KAAK,CAACoE,GAA9C,CAAJ,EAAwD;AACtD,QAAIxE,IAAI,GAAG6a,OAAX,EAAoB;AAClB,UAAIC,OAAO,GAAG,KAAK9R,IAAL,KAAc5I,KAAK,CAACyB,SAApB,IAAiC,KAAKmH,IAAL,KAAc5I,KAAK,CAAC0B,UAAnE;AACA,UAAIiZ,EAAE,GAAG,KAAK9R,KAAd;AACA,WAAK0D,IAAL;AACA,UAAInD,QAAQ,GAAG,KAAKjD,KAApB;AAAA,UAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;AACA,UAAIgL,KAAK,GAAG,KAAK6G,WAAL,CAAiB,KAAKD,eAAL,CAAqB,IAArB,EAA2B,KAA3B,CAAjB,EAAoDjR,QAApD,EAA8DX,QAA9D,EAAwE7I,IAAxE,EAA8Ega,IAA9E,CAAZ;AACA,UAAI5N,IAAI,GAAG,KAAK4O,WAAL,CAAiBL,YAAjB,EAA+BC,YAA/B,EAA6ChH,IAA7C,EAAmDC,KAAnD,EAA0DkH,EAA1D,EAA8DD,OAA9D,CAAX;AACA,aAAO,KAAKJ,WAAL,CAAiBtO,IAAjB,EAAuBuO,YAAvB,EAAqCC,YAArC,EAAmDC,OAAnD,EAA4Db,IAA5D,CAAP;AACD;AACF;;AACD,SAAOpG,IAAP;AACD,CAdD;;AAgBA4F,IAAI,CAACwB,WAAL,GAAmB,UAASxR,QAAT,EAAmBX,QAAnB,EAA6B+K,IAA7B,EAAmCC,KAAnC,EAA0CkH,EAA1C,EAA8CD,OAA9C,EAAuD;AACxE,MAAI1O,IAAI,GAAG,KAAKsJ,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAAX;AACAuD,EAAAA,IAAI,CAACwH,IAAL,GAAYA,IAAZ;AACAxH,EAAAA,IAAI,CAACgM,QAAL,GAAgB2C,EAAhB;AACA3O,EAAAA,IAAI,CAACyH,KAAL,GAAaA,KAAb;AACA,SAAO,KAAK/E,UAAL,CAAgB1C,IAAhB,EAAsB0O,OAAO,GAAG,mBAAH,GAAyB,kBAAtD,CAAP;AACD,CAND,C,CAQA;;;AAEAtB,IAAI,CAACiB,eAAL,GAAuB,UAAS1M,sBAAT,EAAiCkN,QAAjC,EAA2C;AAChE,MAAIjP,MAAM,GAAG,IAAb;AAEA,MAAIxC,QAAQ,GAAG,KAAKjD,KAApB;AAAA,MAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;AAAA,MAAqDyF,IAArD;;AACA,MAAI,KAAK1B,YAAL,CAAkB,OAAlB,MAA+B,KAAK1B,OAAL,IAAiB,CAAC,KAAKF,UAAN,IAAoB,KAAK7K,OAAL,CAAasH,yBAAjF,CAAJ,EAAkH;AAChH6G,IAAAA,IAAI,GAAG,KAAK4M,UAAL,EAAP;AACAD,IAAAA,QAAQ,GAAG,IAAX;AACD,GAHD,MAGO,IAAI,KAAKjS,IAAL,CAAUrJ,MAAd,EAAsB;AAC3B,QAAIyM,IAAI,GAAG,KAAKC,SAAL,EAAX;AAAA,QAA6BqH,MAAM,GAAG,KAAK1K,IAAL,KAAc5I,KAAK,CAACwB,MAA1D;AACAwK,IAAAA,IAAI,CAACgM,QAAL,GAAgB,KAAKnP,KAArB;AACAmD,IAAAA,IAAI,CAACzM,MAAL,GAAc,IAAd;AACA,SAAKgN,IAAL;AACAP,IAAAA,IAAI,CAACkG,QAAL,GAAgB,KAAKmI,eAAL,CAAqB,IAArB,EAA2B,IAA3B,CAAhB;AACA,SAAKvM,qBAAL,CAA2BH,sBAA3B,EAAmD,IAAnD;;AACA,QAAI2F,MAAJ,EAAY;AAAE,WAAKzB,SAAL,CAAe7F,IAAI,CAACkG,QAApB;AAAgC,KAA9C,MACK,IAAI,KAAK3U,MAAL,IAAeyO,IAAI,CAACgM,QAAL,KAAkB,QAAjC,IACAhM,IAAI,CAACkG,QAAL,CAActJ,IAAd,KAAuB,YAD3B,EAEH;AAAE,WAAKgF,gBAAL,CAAsB5B,IAAI,CAAC7F,KAA3B,EAAkC,wCAAlC;AAA8E,KAF7E,MAGA;AAAE0U,MAAAA,QAAQ,GAAG,IAAX;AAAkB;;AACzB3M,IAAAA,IAAI,GAAG,KAAKQ,UAAL,CAAgB1C,IAAhB,EAAsBsH,MAAM,GAAG,kBAAH,GAAwB,iBAApD,CAAP;AACD,GAbM,MAaA;AACLpF,IAAAA,IAAI,GAAG,KAAK2H,mBAAL,CAAyBlI,sBAAzB,CAAP;;AACA,QAAI,KAAKG,qBAAL,CAA2BH,sBAA3B,CAAJ,EAAwD;AAAE,aAAOO,IAAP;AAAa;;AACvE,WAAO,KAAKtF,IAAL,CAAUpJ,OAAV,IAAqB,CAAC,KAAKoN,kBAAL,EAA7B,EAAwD;AACtD,UAAIyK,MAAM,GAAGzL,MAAM,CAAC0J,WAAP,CAAmBlM,QAAnB,EAA6BX,QAA7B,CAAb;AACA4O,MAAAA,MAAM,CAACW,QAAP,GAAkBpM,MAAM,CAAC/C,KAAzB;AACAwO,MAAAA,MAAM,CAAC9X,MAAP,GAAgB,KAAhB;AACA8X,MAAAA,MAAM,CAACnF,QAAP,GAAkBhE,IAAlB;AACAtC,MAAAA,MAAM,CAACiG,SAAP,CAAiB3D,IAAjB;AACAtC,MAAAA,MAAM,CAACW,IAAP;AACA2B,MAAAA,IAAI,GAAGtC,MAAM,CAAC8C,UAAP,CAAkB2I,MAAlB,EAA0B,kBAA1B,CAAP;AACD;AACF;;AAED,MAAI,CAACwD,QAAD,IAAa,KAAKvO,GAAL,CAAStM,KAAK,CAACqC,QAAf,CAAjB,EACE;AAAE,WAAO,KAAKuY,WAAL,CAAiBxR,QAAjB,EAA2BX,QAA3B,EAAqCyF,IAArC,EAA2C,KAAKmM,eAAL,CAAqB,IAArB,EAA2B,KAA3B,CAA3C,EAA8E,IAA9E,EAAoF,KAApF,CAAP;AAAmG,GADvG,MAGE;AAAE,WAAOnM,IAAP;AAAa;AAClB,CAtCD,C,CAwCA;;;AAEAkL,IAAI,CAACvD,mBAAL,GAA2B,UAASlI,sBAAT,EAAiC;AAC1D,MAAIvE,QAAQ,GAAG,KAAKjD,KAApB;AAAA,MAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;AACA,MAAIyF,IAAI,GAAG,KAAK4H,aAAL,CAAmBnI,sBAAnB,CAAX;AACA,MAAIoN,mBAAmB,GAAG7M,IAAI,CAACtF,IAAL,KAAc,yBAAd,IAA2C,KAAKrC,KAAL,CAAWwD,KAAX,CAAiB,KAAKK,YAAtB,EAAoC,KAAKC,UAAzC,MAAyD,GAA9H;;AACA,MAAI,KAAKyD,qBAAL,CAA2BH,sBAA3B,KAAsDoN,mBAA1D,EAA+E;AAAE,WAAO7M,IAAP;AAAa;;AAC9F,MAAI8M,MAAM,GAAG,KAAKC,eAAL,CAAqB/M,IAArB,EAA2B9E,QAA3B,EAAqCX,QAArC,CAAb;;AACA,MAAIkF,sBAAsB,IAAIqN,MAAM,CAACpS,IAAP,KAAgB,kBAA9C,EAAkE;AAChE,QAAI+E,sBAAsB,CAACJ,mBAAvB,IAA8CyN,MAAM,CAAC7U,KAAzD,EAAgE;AAAEwH,MAAAA,sBAAsB,CAACJ,mBAAvB,GAA6C,CAAC,CAA9C;AAAkD;;AACpH,QAAII,sBAAsB,CAACH,iBAAvB,IAA4CwN,MAAM,CAAC7U,KAAvD,EAA8D;AAAEwH,MAAAA,sBAAsB,CAACH,iBAAvB,GAA2C,CAAC,CAA5C;AAAgD;AACjH;;AACD,SAAOwN,MAAP;AACD,CAXD;;AAaA5B,IAAI,CAAC6B,eAAL,GAAuB,UAASC,IAAT,EAAe9R,QAAf,EAAyBX,QAAzB,EAAmC0S,OAAnC,EAA4C;AACjE,MAAIvP,MAAM,GAAG,IAAb;AAEA,MAAIwP,eAAe,GAAG,KAAKrb,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiCoU,IAAI,CAACtS,IAAL,KAAc,YAA/C,IAA+DsS,IAAI,CAACvb,IAAL,KAAc,OAA7E,IAClB,KAAK0K,UAAL,KAAoB6Q,IAAI,CAAC9U,GADP,IACc,CAAC,KAAKwG,kBAAL,EADf,IAC4C,KAAKrG,KAAL,CAAWwD,KAAX,CAAiBmR,IAAI,CAAC/U,KAAtB,EAA6B+U,IAAI,CAAC9U,GAAlC,MAA2C,OAD7G;;AAEA,OAAK,IAAIiP,QAAQ,GAAI,KAAK,CAA1B,IAAgC;AAC9B,QAAI,CAACA,QAAQ,GAAGzJ,MAAM,CAACU,GAAP,CAAWtM,KAAK,CAACK,QAAjB,CAAZ,KAA2CuL,MAAM,CAACU,GAAP,CAAWtM,KAAK,CAACc,GAAjB,CAA/C,EAAsE;AACpE,UAAIkL,IAAI,GAAGJ,MAAM,CAAC0J,WAAP,CAAmBlM,QAAnB,EAA6BX,QAA7B,CAAX;AACAuD,MAAAA,IAAI,CAAC8G,MAAL,GAAcoI,IAAd;AACAlP,MAAAA,IAAI,CAACqP,QAAL,GAAgBhG,QAAQ,GAAGzJ,MAAM,CAAC+E,eAAP,EAAH,GAA8B/E,MAAM,CAACmF,UAAP,CAAkB,IAAlB,CAAtD;AACA/E,MAAAA,IAAI,CAACqJ,QAAL,GAAgB,CAAC,CAACA,QAAlB;;AACA,UAAIA,QAAJ,EAAc;AAAEzJ,QAAAA,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACM,QAApB;AAAgC;;AAChD4a,MAAAA,IAAI,GAAGtP,MAAM,CAAC8C,UAAP,CAAkB1C,IAAlB,EAAwB,kBAAxB,CAAP;AACD,KAPD,MAOO,IAAI,CAACmP,OAAD,IAAYvP,MAAM,CAACU,GAAP,CAAWtM,KAAK,CAACS,MAAjB,CAAhB,EAA0C;AAC/C,UAAIkN,sBAAsB,GAAG,IAAIP,mBAAJ,EAA7B;AAAA,UAAsD+G,WAAW,GAAGvI,MAAM,CAACb,QAA3E;AAAA,UAAqFqJ,WAAW,GAAGxI,MAAM,CAACZ,QAA1G;AACAY,MAAAA,MAAM,CAACb,QAAP,GAAkB,CAAlB;AACAa,MAAAA,MAAM,CAACZ,QAAP,GAAkB,CAAlB;AACA,UAAIiN,QAAQ,GAAGrM,MAAM,CAAC0P,aAAP,CAAqBtb,KAAK,CAACU,MAA3B,EAAmCkL,MAAM,CAAC7L,OAAP,CAAe+G,WAAf,IAA8B,CAAjE,EAAoE,KAApE,EAA2E6G,sBAA3E,CAAf;;AACA,UAAIyN,eAAe,IAAI,CAACxP,MAAM,CAACgB,kBAAP,EAApB,IAAmDhB,MAAM,CAACU,GAAP,CAAWtM,KAAK,CAACgB,KAAjB,CAAvD,EAAgF;AAC9E4K,QAAAA,MAAM,CAAC8B,kBAAP,CAA0BC,sBAA1B,EAAkD,KAAlD;AACA/B,QAAAA,MAAM,CAACoC,8BAAP;AACApC,QAAAA,MAAM,CAACb,QAAP,GAAkBoJ,WAAlB;AACAvI,QAAAA,MAAM,CAACZ,QAAP,GAAkBoJ,WAAlB;AACA,eAAOxI,MAAM,CAAC2P,oBAAP,CAA4B3P,MAAM,CAAC0J,WAAP,CAAmBlM,QAAnB,EAA6BX,QAA7B,CAA5B,EAAoEwP,QAApE,EAA8E,IAA9E,CAAP;AACD;;AACDrM,MAAAA,MAAM,CAACkC,qBAAP,CAA6BH,sBAA7B,EAAqD,IAArD;AACA/B,MAAAA,MAAM,CAACb,QAAP,GAAkBoJ,WAAW,IAAIvI,MAAM,CAACb,QAAxC;AACAa,MAAAA,MAAM,CAACZ,QAAP,GAAkBoJ,WAAW,IAAIxI,MAAM,CAACZ,QAAxC;AACA,UAAIqM,MAAM,GAAGzL,MAAM,CAAC0J,WAAP,CAAmBlM,QAAnB,EAA6BX,QAA7B,CAAb;AACA4O,MAAAA,MAAM,CAACmE,MAAP,GAAgBN,IAAhB;AACA7D,MAAAA,MAAM,CAACoE,SAAP,GAAmBxD,QAAnB;AACAiD,MAAAA,IAAI,GAAGtP,MAAM,CAAC8C,UAAP,CAAkB2I,MAAlB,EAA0B,gBAA1B,CAAP;AACD,KAnBM,MAmBA,IAAIzL,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACoB,SAA1B,EAAqC;AAC1C,UAAIkW,MAAM,GAAG1L,MAAM,CAAC0J,WAAP,CAAmBlM,QAAnB,EAA6BX,QAA7B,CAAb;AACA6O,MAAAA,MAAM,CAACoE,GAAP,GAAaR,IAAb;AACA5D,MAAAA,MAAM,CAACqE,KAAP,GAAe/P,MAAM,CAACgQ,aAAP,CAAqB;AAACC,QAAAA,QAAQ,EAAE;AAAX,OAArB,CAAf;AACAX,MAAAA,IAAI,GAAGtP,MAAM,CAAC8C,UAAP,CAAkB4I,MAAlB,EAA0B,0BAA1B,CAAP;AACD,KALM,MAKA;AACL,aAAO4D,IAAP;AACD;AACF;AACF,CAzCD,C,CA2CA;AACA;AACA;AACA;;;AAEA9B,IAAI,CAACtD,aAAL,GAAqB,UAASnI,sBAAT,EAAiC;AACpD,MAAI3B,IAAJ;AAAA,MAAU8P,UAAU,GAAG,KAAKnR,gBAAL,KAA0B,KAAKxE,KAAtD;;AACA,UAAQ,KAAKyC,IAAb;AACA,SAAK5I,KAAK,CAAC4D,MAAX;AACE,UAAI,CAAC,KAAKgH,UAAV,EACE;AAAE,aAAKuC,KAAL,CAAW,KAAKhH,KAAhB,EAAuB,sCAAvB;AAAiE;;AACrE6F,MAAAA,IAAI,GAAG,KAAKC,SAAL,EAAP;AACA,WAAKM,IAAL,GAJF,CAKE;AACA;AACA;AACA;AACA;AACA;;AACA,UAAI,KAAK3D,IAAL,KAAc5I,KAAK,CAACc,GAApB,IAA2B,KAAK8H,IAAL,KAAc5I,KAAK,CAACK,QAA/C,IAA2D,KAAKuI,IAAL,KAAc5I,KAAK,CAACS,MAAnF,EACE;AAAE,aAAKkM,UAAL;AAAoB;;AACxB,aAAO,KAAK+B,UAAL,CAAgB1C,IAAhB,EAAsB,OAAtB,CAAP;;AAEF,SAAKhM,KAAK,CAAC2D,KAAX;AACEqI,MAAAA,IAAI,GAAG,KAAKC,SAAL,EAAP;AACA,WAAKM,IAAL;AACA,aAAO,KAAKmC,UAAL,CAAgB1C,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,SAAKhM,KAAK,CAACL,IAAX;AACE,UAAIyJ,QAAQ,GAAG,KAAKjD,KAApB;AAAA,UAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;AAAA,UAAqDiB,WAAW,GAAG,KAAKA,WAAxE;AACA,UAAI6J,EAAE,GAAG,KAAKxC,UAAL,CAAgB,KAAKnI,IAAL,KAAc5I,KAAK,CAACL,IAApC,CAAT;;AACA,UAAI,KAAKI,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,CAAC4C,WAAlC,IAAiD6J,EAAE,CAAC5T,IAAH,KAAY,OAA7D,IAAwE,CAAC,KAAKiN,kBAAL,EAAzE,IAAsG,KAAKN,GAAL,CAAStM,KAAK,CAACgD,SAAf,CAA1G,EACE;AAAE,eAAO,KAAK+O,aAAL,CAAmB,KAAKuD,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAAnB,EAAyD,KAAzD,EAAgE,KAAhE,EAAuE,IAAvE,CAAP;AAAqF;;AACzF,UAAIqT,UAAU,IAAI,CAAC,KAAKlP,kBAAL,EAAnB,EAA8C;AAC5C,YAAI,KAAKN,GAAL,CAAStM,KAAK,CAACgB,KAAf,CAAJ,EACE;AAAE,iBAAO,KAAKua,oBAAL,CAA0B,KAAKjG,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAA1B,EAAgE,CAAC8K,EAAD,CAAhE,EAAsE,KAAtE,CAAP;AAAqF;;AACzF,YAAI,KAAKxT,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiCyM,EAAE,CAAC5T,IAAH,KAAY,OAA7C,IAAwD,KAAKiJ,IAAL,KAAc5I,KAAK,CAACL,IAA5E,IAAoF,CAAC+J,WAAzF,EAAsG;AACpG6J,UAAAA,EAAE,GAAG,KAAKxC,UAAL,EAAL;;AACA,cAAI,KAAKnE,kBAAL,MAA6B,CAAC,KAAKN,GAAL,CAAStM,KAAK,CAACgB,KAAf,CAAlC,EACE;AAAE,iBAAK2L,UAAL;AAAoB;;AACxB,iBAAO,KAAK4O,oBAAL,CAA0B,KAAKjG,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAA1B,EAAgE,CAAC8K,EAAD,CAAhE,EAAsE,IAAtE,CAAP;AACD;AACF;;AACD,aAAOA,EAAP;;AAEF,SAAKvT,KAAK,CAACE,MAAX;AACE,UAAI2I,KAAK,GAAG,KAAKA,KAAjB;AACAmD,MAAAA,IAAI,GAAG,KAAK+P,YAAL,CAAkBlT,KAAK,CAACA,KAAxB,CAAP;AACAmD,MAAAA,IAAI,CAACgQ,KAAL,GAAa;AAACC,QAAAA,OAAO,EAAEpT,KAAK,CAACoT,OAAhB;AAAyBC,QAAAA,KAAK,EAAErT,KAAK,CAACqT;AAAtC,OAAb;AACA,aAAOlQ,IAAP;;AAEF,SAAKhM,KAAK,CAACC,GAAX;AAAgB,SAAKD,KAAK,CAACG,MAAX;AACd,aAAO,KAAK4b,YAAL,CAAkB,KAAKlT,KAAvB,CAAP;;AAEF,SAAK7I,KAAK,CAACiE,KAAX;AAAkB,SAAKjE,KAAK,CAACkE,KAAX;AAAkB,SAAKlE,KAAK,CAACmE,MAAX;AAClC6H,MAAAA,IAAI,GAAG,KAAKC,SAAL,EAAP;AACAD,MAAAA,IAAI,CAACnD,KAAL,GAAa,KAAKD,IAAL,KAAc5I,KAAK,CAACiE,KAApB,GAA4B,IAA5B,GAAmC,KAAK2E,IAAL,KAAc5I,KAAK,CAACkE,KAApE;AACA8H,MAAAA,IAAI,CAAC2L,GAAL,GAAW,KAAK/O,IAAL,CAAU1J,OAArB;AACA,WAAKqN,IAAL;AACA,aAAO,KAAKmC,UAAL,CAAgB1C,IAAhB,EAAsB,SAAtB,CAAP;;AAEF,SAAKhM,KAAK,CAACS,MAAX;AACE,UAAI0F,KAAK,GAAG,KAAKA,KAAjB;AAAA,UAAwB+H,IAAI,GAAG,KAAKiO,kCAAL,CAAwCL,UAAxC,CAA/B;;AACA,UAAInO,sBAAJ,EAA4B;AAC1B,YAAIA,sBAAsB,CAACJ,mBAAvB,GAA6C,CAA7C,IAAkD,CAAC,KAAKU,oBAAL,CAA0BC,IAA1B,CAAvD,EACE;AAAEP,UAAAA,sBAAsB,CAACJ,mBAAvB,GAA6CpH,KAA7C;AAAqD;;AACzD,YAAIwH,sBAAsB,CAACH,iBAAvB,GAA2C,CAA/C,EACE;AAAEG,UAAAA,sBAAsB,CAACH,iBAAvB,GAA2CrH,KAA3C;AAAmD;AACxD;;AACD,aAAO+H,IAAP;;AAEF,SAAKlO,KAAK,CAACK,QAAX;AACE2L,MAAAA,IAAI,GAAG,KAAKC,SAAL,EAAP;AACA,WAAKM,IAAL;AACAP,MAAAA,IAAI,CAAC8K,QAAL,GAAgB,KAAKwE,aAAL,CAAmBtb,KAAK,CAACM,QAAzB,EAAmC,IAAnC,EAAyC,IAAzC,EAA+CqN,sBAA/C,CAAhB;AACA,aAAO,KAAKe,UAAL,CAAgB1C,IAAhB,EAAsB,iBAAtB,CAAP;;AAEF,SAAKhM,KAAK,CAACO,MAAX;AACE,aAAO,KAAK8X,QAAL,CAAc,KAAd,EAAqB1K,sBAArB,CAAP;;AAEF,SAAK3N,KAAK,CAACgD,SAAX;AACEgJ,MAAAA,IAAI,GAAG,KAAKC,SAAL,EAAP;AACA,WAAKM,IAAL;AACA,aAAO,KAAKwF,aAAL,CAAmB/F,IAAnB,EAAyB,KAAzB,CAAP;;AAEF,SAAKhM,KAAK,CAAC6D,MAAX;AACE,aAAO,KAAKgM,UAAL,CAAgB,KAAK5D,SAAL,EAAhB,EAAkC,KAAlC,CAAP;;AAEF,SAAKjM,KAAK,CAAC0D,IAAX;AACE,aAAO,KAAK0Y,QAAL,EAAP;;AAEF,SAAKpc,KAAK,CAACoB,SAAX;AACE,aAAO,KAAKwa,aAAL,EAAP;;AAEF;AACE,WAAKjP,UAAL;AAxFF;AA0FD,CA5FD;;AA8FAyM,IAAI,CAAC2C,YAAL,GAAoB,UAASlT,KAAT,EAAgB;AAClC,MAAImD,IAAI,GAAG,KAAKC,SAAL,EAAX;AACAD,EAAAA,IAAI,CAACnD,KAAL,GAAaA,KAAb;AACAmD,EAAAA,IAAI,CAAC2L,GAAL,GAAW,KAAKpR,KAAL,CAAWwD,KAAX,CAAiB,KAAK5D,KAAtB,EAA6B,KAAKC,GAAlC,CAAX;AACA,OAAKmG,IAAL;AACA,SAAO,KAAKmC,UAAL,CAAgB1C,IAAhB,EAAsB,SAAtB,CAAP;AACD,CAND;;AAQAoN,IAAI,CAAClI,oBAAL,GAA4B,YAAW;AACrC,OAAKhE,MAAL,CAAYlN,KAAK,CAACS,MAAlB;AACA,MAAI4b,GAAG,GAAG,KAAK1L,eAAL,EAAV;AACA,OAAKzD,MAAL,CAAYlN,KAAK,CAACU,MAAlB;AACA,SAAO2b,GAAP;AACD,CALD;;AAOAjD,IAAI,CAAC+C,kCAAL,GAA0C,UAASL,UAAT,EAAqB;AAC7D,MAAIlQ,MAAM,GAAG,IAAb;AAEA,MAAIxC,QAAQ,GAAG,KAAKjD,KAApB;AAAA,MAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;AAAA,MAAqD4T,GAArD;AAAA,MAA0D7D,kBAAkB,GAAG,KAAKzY,OAAL,CAAa+G,WAAb,IAA4B,CAA3G;;AACA,MAAI,KAAK/G,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjC,SAAKyF,IAAL;AAEA,QAAI+P,aAAa,GAAG,KAAKnW,KAAzB;AAAA,QAAgCoW,aAAa,GAAG,KAAK9T,QAArD;AACA,QAAIwP,QAAQ,GAAG,EAAf;AAAA,QAAmBf,KAAK,GAAG,IAA3B;AAAA,QAAiCsF,WAAW,GAAG,KAA/C;AACA,QAAI7O,sBAAsB,GAAG,IAAIP,mBAAJ,EAA7B;AAAA,QAAsD+G,WAAW,GAAG,KAAKpJ,QAAzE;AAAA,QAAmFqJ,WAAW,GAAG,KAAKpJ,QAAtG;AAAA,QAAgHyR,WAAhH;AACA,SAAK1R,QAAL,GAAgB,CAAhB;AACA,SAAKC,QAAL,GAAgB,CAAhB;;AACA,WAAO,KAAKpC,IAAL,KAAc5I,KAAK,CAACU,MAA3B,EAAmC;AACjCwW,MAAAA,KAAK,GAAGA,KAAK,GAAG,KAAX,GAAmBtL,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACW,KAApB,CAAxB;;AACA,UAAI6X,kBAAkB,IAAI5M,MAAM,CAACmB,kBAAP,CAA0B/M,KAAK,CAACU,MAAhC,EAAwC,IAAxC,CAA1B,EAAyE;AACvE8b,QAAAA,WAAW,GAAG,IAAd;AACA;AACD,OAHD,MAGO,IAAI5Q,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACmB,QAA1B,EAAoC;AACzCsb,QAAAA,WAAW,GAAG7Q,MAAM,CAACzF,KAArB;AACA8R,QAAAA,QAAQ,CAAC7P,IAAT,CAAcwD,MAAM,CAAC8Q,cAAP,CAAsB9Q,MAAM,CAACwM,gBAAP,EAAtB,CAAd;;AACA,YAAIxM,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACW,KAA1B,EAAiC;AAAEiL,UAAAA,MAAM,CAACuB,KAAP,CAAavB,MAAM,CAACzF,KAApB,EAA2B,+CAA3B;AAA8E;;AACjH;AACD,OALM,MAKA;AACL8R,QAAAA,QAAQ,CAAC7P,IAAT,CAAcwD,MAAM,CAAC8H,gBAAP,CAAwB,KAAxB,EAA+B/F,sBAA/B,EAAuD/B,MAAM,CAAC8Q,cAA9D,CAAd;AACD;AACF;;AACD,QAAIC,WAAW,GAAG,KAAKxW,KAAvB;AAAA,QAA8ByW,WAAW,GAAG,KAAKnU,QAAjD;AACA,SAAKyE,MAAL,CAAYlN,KAAK,CAACU,MAAlB;;AAEA,QAAIob,UAAU,IAAI,CAAC,KAAKlP,kBAAL,EAAf,IAA4C,KAAKN,GAAL,CAAStM,KAAK,CAACgB,KAAf,CAAhD,EAAuE;AACrE,WAAK0M,kBAAL,CAAwBC,sBAAxB,EAAgD,KAAhD;AACA,WAAKK,8BAAL;AACA,WAAKjD,QAAL,GAAgBoJ,WAAhB;AACA,WAAKnJ,QAAL,GAAgBoJ,WAAhB;AACA,aAAO,KAAKyI,mBAAL,CAAyBzT,QAAzB,EAAmCX,QAAnC,EAA6CwP,QAA7C,CAAP;AACD;;AAED,QAAI,CAACA,QAAQ,CAACzZ,MAAV,IAAoBge,WAAxB,EAAqC;AAAE,WAAK7P,UAAL,CAAgB,KAAKvC,YAArB;AAAqC;;AAC5E,QAAIqS,WAAJ,EAAiB;AAAE,WAAK9P,UAAL,CAAgB8P,WAAhB;AAA+B;;AAClD,SAAK3O,qBAAL,CAA2BH,sBAA3B,EAAmD,IAAnD;AACA,SAAK5C,QAAL,GAAgBoJ,WAAW,IAAI,KAAKpJ,QAApC;AACA,SAAKC,QAAL,GAAgBoJ,WAAW,IAAI,KAAKpJ,QAApC;;AAEA,QAAIiN,QAAQ,CAACzZ,MAAT,GAAkB,CAAtB,EAAyB;AACvB6d,MAAAA,GAAG,GAAG,KAAK/G,WAAL,CAAiBgH,aAAjB,EAAgCC,aAAhC,CAAN;AACAF,MAAAA,GAAG,CAACxC,WAAJ,GAAkB5B,QAAlB;AACA,WAAK6E,YAAL,CAAkBT,GAAlB,EAAuB,oBAAvB,EAA6CM,WAA7C,EAA0DC,WAA1D;AACD,KAJD,MAIO;AACLP,MAAAA,GAAG,GAAGpE,QAAQ,CAAC,CAAD,CAAd;AACD;AACF,GA9CD,MA8CO;AACLoE,IAAAA,GAAG,GAAG,KAAKnL,oBAAL,EAAN;AACD;;AAED,MAAI,KAAKnR,OAAL,CAAa8H,cAAjB,EAAiC;AAC/B,QAAIkV,GAAG,GAAG,KAAKzH,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAAV;AACAsU,IAAAA,GAAG,CAAC5O,UAAJ,GAAiBkO,GAAjB;AACA,WAAO,KAAK3N,UAAL,CAAgBqO,GAAhB,EAAqB,yBAArB,CAAP;AACD,GAJD,MAIO;AACL,WAAOV,GAAP;AACD;AACF,CA7DD;;AA+DAjD,IAAI,CAACsD,cAAL,GAAsB,UAASM,IAAT,EAAe;AACnC,SAAOA,IAAP;AACD,CAFD;;AAIA5D,IAAI,CAACyD,mBAAL,GAA2B,UAASzT,QAAT,EAAmBX,QAAnB,EAA6BwP,QAA7B,EAAuC;AAChE,SAAO,KAAKsD,oBAAL,CAA0B,KAAKjG,WAAL,CAAiBlM,QAAjB,EAA2BX,QAA3B,CAA1B,EAAgEwP,QAAhE,CAAP;AACD,CAFD,C,CAIA;AACA;AACA;AACA;AACA;;;AAEA,IAAIgF,OAAO,GAAG,EAAd;;AAEA7D,IAAI,CAACgD,QAAL,GAAgB,YAAW;AACzB,MAAIpQ,IAAI,GAAG,KAAKC,SAAL,EAAX;AACA,MAAIiR,IAAI,GAAG,KAAKnM,UAAL,CAAgB,IAAhB,CAAX;;AACA,MAAI,KAAKhR,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,KAAKwF,GAAL,CAAStM,KAAK,CAACc,GAAf,CAArC,EAA0D;AACxDkL,IAAAA,IAAI,CAACkR,IAAL,GAAYA,IAAZ;AACA,QAAIxT,WAAW,GAAG,KAAKA,WAAvB;AACAsC,IAAAA,IAAI,CAACqP,QAAL,GAAgB,KAAKtK,UAAL,CAAgB,IAAhB,CAAhB;;AACA,QAAI/E,IAAI,CAACqP,QAAL,CAAc1b,IAAd,KAAuB,QAAvB,IAAmC+J,WAAvC,EACE;AAAE,WAAKkE,gBAAL,CAAsB5B,IAAI,CAACqP,QAAL,CAAclV,KAApC,EAA2C,oDAA3C;AAAmG;;AACvG,QAAI,CAAC,KAAKyE,UAAV,EACE;AAAE,WAAKgD,gBAAL,CAAsB5B,IAAI,CAAC7F,KAA3B,EAAkC,0CAAlC;AAAgF;;AACpF,WAAO,KAAKuI,UAAL,CAAgB1C,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AACD,MAAI5C,QAAQ,GAAG,KAAKjD,KAApB;AAAA,MAA2BsC,QAAQ,GAAG,KAAKA,QAA3C;AACAuD,EAAAA,IAAI,CAACwP,MAAL,GAAc,KAAKP,eAAL,CAAqB,KAAKnF,aAAL,EAArB,EAA2C1M,QAA3C,EAAqDX,QAArD,EAA+D,IAA/D,CAAd;;AACA,MAAI,KAAK6D,GAAL,CAAStM,KAAK,CAACS,MAAf,CAAJ,EAA4B;AAAEuL,IAAAA,IAAI,CAACyP,SAAL,GAAiB,KAAKH,aAAL,CAAmBtb,KAAK,CAACU,MAAzB,EAAiC,KAAKX,OAAL,CAAa+G,WAAb,IAA4B,CAA7D,EAAgE,KAAhE,CAAjB;AAA0F,GAAxH,MACK;AAAEkF,IAAAA,IAAI,CAACyP,SAAL,GAAiBwB,OAAjB;AAA2B;;AAClC,SAAO,KAAKvO,UAAL,CAAgB1C,IAAhB,EAAsB,eAAtB,CAAP;AACD,CAlBD,C,CAoBA;;;AAEAoN,IAAI,CAAC+D,oBAAL,GAA4B,UAASnY,GAAT,EAAc;AACxC,MAAI6W,QAAQ,GAAG7W,GAAG,CAAC6W,QAAnB;AAEA,MAAIjD,IAAI,GAAG,KAAK3M,SAAL,EAAX;;AACA,MAAI,KAAKrD,IAAL,KAAc5I,KAAK,CAACkB,eAAxB,EAAyC;AACvC,QAAI,CAAC2a,QAAL,EAAe;AACb,WAAKjO,gBAAL,CAAsB,KAAKzH,KAA3B,EAAkC,kDAAlC;AACD;;AACDyS,IAAAA,IAAI,CAAC/P,KAAL,GAAa;AACX8O,MAAAA,GAAG,EAAE,KAAK9O,KADC;AAEXuU,MAAAA,MAAM,EAAE;AAFG,KAAb;AAID,GARD,MAQO;AACLxE,IAAAA,IAAI,CAAC/P,KAAL,GAAa;AACX8O,MAAAA,GAAG,EAAE,KAAKpR,KAAL,CAAWwD,KAAX,CAAiB,KAAK5D,KAAtB,EAA6B,KAAKC,GAAlC,EAAuC8C,OAAvC,CAA+C,QAA/C,EAAyD,IAAzD,CADM;AAEXkU,MAAAA,MAAM,EAAE,KAAKvU;AAFF,KAAb;AAID;;AACD,OAAK0D,IAAL;AACAqM,EAAAA,IAAI,CAACyE,IAAL,GAAY,KAAKzU,IAAL,KAAc5I,KAAK,CAACoB,SAAhC;AACA,SAAO,KAAKsN,UAAL,CAAgBkK,IAAhB,EAAsB,iBAAtB,CAAP;AACD,CArBD;;AAuBAQ,IAAI,CAACwC,aAAL,GAAqB,UAAS5W,GAAT,EAAc;AACjC,MAAI4G,MAAM,GAAG,IAAb;AACA,MAAK5G,GAAG,KAAK,KAAK,CAAlB,EAAsBA,GAAG,GAAG,EAAN;AACtB,MAAI6W,QAAQ,GAAG7W,GAAG,CAAC6W,QAAnB;AAA6B,MAAKA,QAAQ,KAAK,KAAK,CAAvB,EAA2BA,QAAQ,GAAG,KAAX;AAExD,MAAI7P,IAAI,GAAG,KAAKC,SAAL,EAAX;AACA,OAAKM,IAAL;AACAP,EAAAA,IAAI,CAAC6N,WAAL,GAAmB,EAAnB;AACA,MAAIyD,MAAM,GAAG,KAAKH,oBAAL,CAA0B;AAACtB,IAAAA,QAAQ,EAAEA;AAAX,GAA1B,CAAb;AACA7P,EAAAA,IAAI,CAACuR,MAAL,GAAc,CAACD,MAAD,CAAd;;AACA,SAAO,CAACA,MAAM,CAACD,IAAf,EAAqB;AACnB,QAAIzR,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACI,GAA1B,EAA+B;AAAEwL,MAAAA,MAAM,CAACuB,KAAP,CAAavB,MAAM,CAACtN,GAApB,EAAyB,+BAAzB;AAA4D;;AAC7FsN,IAAAA,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACqB,YAApB;AACA2K,IAAAA,IAAI,CAAC6N,WAAL,CAAiBzR,IAAjB,CAAsBwD,MAAM,CAAC+E,eAAP,EAAtB;AACA/E,IAAAA,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACQ,MAApB;AACAwL,IAAAA,IAAI,CAACuR,MAAL,CAAYnV,IAAZ,CAAiBkV,MAAM,GAAG1R,MAAM,CAACuR,oBAAP,CAA4B;AAACtB,MAAAA,QAAQ,EAAEA;AAAX,KAA5B,CAA1B;AACD;;AACD,OAAKtP,IAAL;AACA,SAAO,KAAKmC,UAAL,CAAgB1C,IAAhB,EAAsB,iBAAtB,CAAP;AACD,CAnBD;;AAqBAoN,IAAI,CAACoE,WAAL,GAAmB,UAAS5G,IAAT,EAAe;AAChC,SAAO,CAACA,IAAI,CAACvB,QAAN,IAAkBuB,IAAI,CAACxB,GAAL,CAASxM,IAAT,KAAkB,YAApC,IAAoDgO,IAAI,CAACxB,GAAL,CAASzV,IAAT,KAAkB,OAAtE,KACJ,KAAKiJ,IAAL,KAAc5I,KAAK,CAACL,IAApB,IAA4B,KAAKiJ,IAAL,KAAc5I,KAAK,CAACC,GAAhD,IAAuD,KAAK2I,IAAL,KAAc5I,KAAK,CAACG,MAA3E,IAAqF,KAAKyI,IAAL,KAAc5I,KAAK,CAACK,QAAzG,IAAqH,KAAKuI,IAAL,CAAU1J,OAA/H,IAA2I,KAAKa,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,KAAK8B,IAAL,KAAc5I,KAAK,CAACmC,IAD5L,KAEL,CAACsC,SAAS,CAAC9F,IAAV,CAAe,KAAK4H,KAAL,CAAWwD,KAAX,CAAiB,KAAKM,UAAtB,EAAkC,KAAKlE,KAAvC,CAAf,CAFH;AAGD,CAJD,C,CAMA;;;AAEAiT,IAAI,CAACf,QAAL,GAAgB,UAASoF,SAAT,EAAoB9P,sBAApB,EAA4C;AAC1D,MAAI/B,MAAM,GAAG,IAAb;AAEA,MAAII,IAAI,GAAG,KAAKC,SAAL,EAAX;AAAA,MAA6BiL,KAAK,GAAG,IAArC;AAAA,MAA2CoC,QAAQ,GAAG,EAAtD;AACAtN,EAAAA,IAAI,CAAC2K,UAAL,GAAkB,EAAlB;AACA,OAAKpK,IAAL;;AACA,SAAO,CAAC,KAAKD,GAAL,CAAStM,KAAK,CAACQ,MAAf,CAAR,EAAgC;AAC9B,QAAI,CAAC0W,KAAL,EAAY;AACVtL,MAAAA,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACW,KAApB;;AACA,UAAIiL,MAAM,CAACmB,kBAAP,CAA0B/M,KAAK,CAACQ,MAAhC,CAAJ,EAA6C;AAAE;AAAO;AACvD,KAHD,MAGO;AAAE0W,MAAAA,KAAK,GAAG,KAAR;AAAgB;;AAEzB,QAAIN,IAAI,GAAGhL,MAAM,CAAC8R,aAAP,CAAqBD,SAArB,EAAgC9P,sBAAhC,CAAX;;AACA,QAAI,CAAC8P,SAAL,EAAgB;AAAE7R,MAAAA,MAAM,CAACyN,cAAP,CAAsBzC,IAAtB,EAA4B0C,QAA5B,EAAsC3L,sBAAtC;AAAgE;;AAClF3B,IAAAA,IAAI,CAAC2K,UAAL,CAAgBvO,IAAhB,CAAqBwO,IAArB;AACD;;AACD,SAAO,KAAKlI,UAAL,CAAgB1C,IAAhB,EAAsByR,SAAS,GAAG,eAAH,GAAqB,kBAApD,CAAP;AACD,CAjBD;;AAmBArE,IAAI,CAACsE,aAAL,GAAqB,UAASD,SAAT,EAAoB9P,sBAApB,EAA4C;AAC/D,MAAIiJ,IAAI,GAAG,KAAK3K,SAAL,EAAX;AAAA,MAA6BuJ,WAA7B;AAAA,MAA0C1D,OAA1C;AAAA,MAAmD1I,QAAnD;AAAA,MAA6DX,QAA7D;;AACA,MAAI,KAAK1I,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,KAAKwF,GAAL,CAAStM,KAAK,CAACmB,QAAf,CAArC,EAA+D;AAC7D,QAAIsc,SAAJ,EAAe;AACb7G,MAAAA,IAAI,CAAC1E,QAAL,GAAgB,KAAKnB,UAAL,CAAgB,KAAhB,CAAhB;;AACA,UAAI,KAAKnI,IAAL,KAAc5I,KAAK,CAACW,KAAxB,EAA+B;AAC7B,aAAKwM,KAAL,CAAW,KAAKhH,KAAhB,EAAuB,+CAAvB;AACD;;AACD,aAAO,KAAKuI,UAAL,CAAgBkI,IAAhB,EAAsB,aAAtB,CAAP;AACD,KAP4D,CAQ7D;;;AACA,QAAI,KAAKhO,IAAL,KAAc5I,KAAK,CAACS,MAApB,IAA8BkN,sBAAlC,EAA0D;AACxD,UAAIA,sBAAsB,CAACJ,mBAAvB,GAA6C,CAAjD,EAAoD;AAClDI,QAAAA,sBAAsB,CAACJ,mBAAvB,GAA6C,KAAKpH,KAAlD;AACD;;AACD,UAAIwH,sBAAsB,CAACH,iBAAvB,GAA2C,CAA/C,EAAkD;AAChDG,QAAAA,sBAAsB,CAACH,iBAAvB,GAA2C,KAAKrH,KAAhD;AACD;AACF,KAhB4D,CAiB7D;;;AACAyQ,IAAAA,IAAI,CAAC1E,QAAL,GAAgB,KAAKwB,gBAAL,CAAsB,KAAtB,EAA6B/F,sBAA7B,CAAhB,CAlB6D,CAmB7D;;AACA,QAAI,KAAK/E,IAAL,KAAc5I,KAAK,CAACW,KAApB,IAA6BgN,sBAA7B,IAAuDA,sBAAsB,CAACL,aAAvB,GAAuC,CAAlG,EAAqG;AACnGK,MAAAA,sBAAsB,CAACL,aAAvB,GAAuC,KAAKnH,KAA5C;AACD,KAtB4D,CAuB7D;;;AACA,WAAO,KAAKuI,UAAL,CAAgBkI,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AACD,MAAI,KAAK7W,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjC8P,IAAAA,IAAI,CAAC5B,MAAL,GAAc,KAAd;AACA4B,IAAAA,IAAI,CAAC2C,SAAL,GAAiB,KAAjB;;AACA,QAAIkE,SAAS,IAAI9P,sBAAjB,EAAyC;AACvCvE,MAAAA,QAAQ,GAAG,KAAKjD,KAAhB;AACAsC,MAAAA,QAAQ,GAAG,KAAKA,QAAhB;AACD;;AACD,QAAI,CAACgV,SAAL,EACE;AAAEjI,MAAAA,WAAW,GAAG,KAAKlJ,GAAL,CAAStM,KAAK,CAACmC,IAAf,CAAd;AAAqC;AAC1C;;AACD,MAAIuH,WAAW,GAAG,KAAKA,WAAvB;AACA,OAAK+L,iBAAL,CAAuBmB,IAAvB;;AACA,MAAI,CAAC6G,SAAD,IAAc,CAAC/T,WAAf,IAA8B,KAAK3J,OAAL,CAAa+G,WAAb,IAA4B,CAA1D,IAA+D,CAAC0O,WAAhE,IAA+E,KAAKgI,WAAL,CAAiB5G,IAAjB,CAAnF,EAA2G;AACzG9E,IAAAA,OAAO,GAAG,IAAV;AACA0D,IAAAA,WAAW,GAAG,KAAKzV,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,KAAKwF,GAAL,CAAStM,KAAK,CAACmC,IAAf,CAA/C;AACA,SAAKsT,iBAAL,CAAuBmB,IAAvB,EAA6BjJ,sBAA7B;AACD,GAJD,MAIO;AACLmE,IAAAA,OAAO,GAAG,KAAV;AACD;;AACD,OAAK6L,kBAAL,CAAwB/G,IAAxB,EAA8B6G,SAA9B,EAAyCjI,WAAzC,EAAsD1D,OAAtD,EAA+D1I,QAA/D,EAAyEX,QAAzE,EAAmFkF,sBAAnF,EAA2GjE,WAA3G;AACA,SAAO,KAAKgF,UAAL,CAAgBkI,IAAhB,EAAsB,UAAtB,CAAP;AACD,CAjDD;;AAmDAwC,IAAI,CAACuE,kBAAL,GAA0B,UAAS/G,IAAT,EAAe6G,SAAf,EAA0BjI,WAA1B,EAAuC1D,OAAvC,EAAgD1I,QAAhD,EAA0DX,QAA1D,EAAoEkF,sBAApE,EAA4FjE,WAA5F,EAAyG;AACjI,MAAI,CAAC8L,WAAW,IAAI1D,OAAhB,KAA4B,KAAKlJ,IAAL,KAAc5I,KAAK,CAACa,KAApD,EACE;AAAE,SAAK8L,UAAL;AAAoB;;AAExB,MAAI,KAAKL,GAAL,CAAStM,KAAK,CAACa,KAAf,CAAJ,EAA2B;AACzB+V,IAAAA,IAAI,CAAC/N,KAAL,GAAa4U,SAAS,GAAG,KAAK5E,iBAAL,CAAuB,KAAK1S,KAA5B,EAAmC,KAAKsC,QAAxC,CAAH,GAAuD,KAAKiL,gBAAL,CAAsB,KAAtB,EAA6B/F,sBAA7B,CAA7E;AACAiJ,IAAAA,IAAI,CAAChI,IAAL,GAAY,MAAZ;AACD,GAHD,MAGO,IAAI,KAAK7O,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,KAAK8B,IAAL,KAAc5I,KAAK,CAACS,MAAzD,EAAiE;AACtE,QAAIgd,SAAJ,EAAe;AAAE,WAAK9Q,UAAL;AAAoB;;AACrCiK,IAAAA,IAAI,CAAChI,IAAL,GAAY,MAAZ;AACAgI,IAAAA,IAAI,CAAC5B,MAAL,GAAc,IAAd;AACA4B,IAAAA,IAAI,CAAC/N,KAAL,GAAa,KAAK8M,WAAL,CAAiBH,WAAjB,EAA8B1D,OAA9B,CAAb;AACD,GALM,MAKA,IAAI,CAAC2L,SAAD,IAAc,CAAC/T,WAAf,IACA,KAAK3J,OAAL,CAAa+G,WAAb,IAA4B,CAD5B,IACiC,CAAC8P,IAAI,CAACvB,QADvC,IACmDuB,IAAI,CAACxB,GAAL,CAASxM,IAAT,KAAkB,YADrE,KAECgO,IAAI,CAACxB,GAAL,CAASzV,IAAT,KAAkB,KAAlB,IAA2BiX,IAAI,CAACxB,GAAL,CAASzV,IAAT,KAAkB,KAF9C,KAGC,KAAKiJ,IAAL,KAAc5I,KAAK,CAACW,KAApB,IAA6B,KAAKiI,IAAL,KAAc5I,KAAK,CAACQ,MAHtD,EAG+D;AACpE,QAAIgV,WAAW,IAAI1D,OAAnB,EAA4B;AAAE,WAAKnF,UAAL;AAAoB;;AAClDiK,IAAAA,IAAI,CAAChI,IAAL,GAAYgI,IAAI,CAACxB,GAAL,CAASzV,IAArB;AACA,SAAK8V,iBAAL,CAAuBmB,IAAvB;AACAA,IAAAA,IAAI,CAAC/N,KAAL,GAAa,KAAK8M,WAAL,CAAiB,KAAjB,CAAb;AACA,QAAIiI,UAAU,GAAGhH,IAAI,CAAChI,IAAL,KAAc,KAAd,GAAsB,CAAtB,GAA0B,CAA3C;;AACA,QAAIgI,IAAI,CAAC/N,KAAL,CAAW2L,MAAX,CAAkBhW,MAAlB,KAA6Bof,UAAjC,EAA6C;AAC3C,UAAIzX,KAAK,GAAGyQ,IAAI,CAAC/N,KAAL,CAAW1C,KAAvB;;AACA,UAAIyQ,IAAI,CAAChI,IAAL,KAAc,KAAlB,EACE;AAAE,aAAKhB,gBAAL,CAAsBzH,KAAtB,EAA6B,8BAA7B;AAA+D,OADnE,MAGE;AAAE,aAAKyH,gBAAL,CAAsBzH,KAAtB,EAA6B,sCAA7B;AAAuE;AAC5E,KAND,MAMO;AACL,UAAIyQ,IAAI,CAAChI,IAAL,KAAc,KAAd,IAAuBgI,IAAI,CAAC/N,KAAL,CAAW2L,MAAX,CAAkB,CAAlB,EAAqB5L,IAArB,KAA8B,aAAzD,EACE;AAAE,aAAKgF,gBAAL,CAAsBgJ,IAAI,CAAC/N,KAAL,CAAW2L,MAAX,CAAkB,CAAlB,EAAqBrO,KAA3C,EAAkD,+BAAlD;AAAqF;AAC1F;AACF,GAnBM,MAmBA,IAAI,KAAKpG,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,CAAC8P,IAAI,CAACvB,QAAvC,IAAmDuB,IAAI,CAACxB,GAAL,CAASxM,IAAT,KAAkB,YAAzE,EAAuF;AAC5F,SAAK2N,eAAL,CAAqBK,IAAI,CAACxB,GAA1B;AACAwB,IAAAA,IAAI,CAAChI,IAAL,GAAY,MAAZ;;AACA,QAAI6O,SAAJ,EAAe;AACb7G,MAAAA,IAAI,CAAC/N,KAAL,GAAa,KAAKgQ,iBAAL,CAAuBzP,QAAvB,EAAiCX,QAAjC,EAA2CmO,IAAI,CAACxB,GAAhD,CAAb;AACD,KAFD,MAEO,IAAI,KAAKxM,IAAL,KAAc5I,KAAK,CAACsB,EAApB,IAA0BqM,sBAA9B,EAAsD;AAC3D,UAAIA,sBAAsB,CAACN,eAAvB,GAAyC,CAA7C,EACE;AAAEM,QAAAA,sBAAsB,CAACN,eAAvB,GAAyC,KAAKlH,KAA9C;AAAsD;;AAC1DyQ,MAAAA,IAAI,CAAC/N,KAAL,GAAa,KAAKgQ,iBAAL,CAAuBzP,QAAvB,EAAiCX,QAAjC,EAA2CmO,IAAI,CAACxB,GAAhD,CAAb;AACD,KAJM,MAIA;AACLwB,MAAAA,IAAI,CAAC/N,KAAL,GAAa+N,IAAI,CAACxB,GAAlB;AACD;;AACDwB,IAAAA,IAAI,CAAC2C,SAAL,GAAiB,IAAjB;AACD,GAbM,MAaA;AAAE,SAAK5M,UAAL;AAAoB;AAC9B,CA7CD;;AA+CAyM,IAAI,CAAC3D,iBAAL,GAAyB,UAASmB,IAAT,EAAe;AACtC,MAAI,KAAK7W,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjC,QAAI,KAAKwF,GAAL,CAAStM,KAAK,CAACK,QAAf,CAAJ,EAA8B;AAC5BuW,MAAAA,IAAI,CAACvB,QAAL,GAAgB,IAAhB;AACAuB,MAAAA,IAAI,CAACxB,GAAL,GAAW,KAAK1B,gBAAL,EAAX;AACA,WAAKxG,MAAL,CAAYlN,KAAK,CAACM,QAAlB;AACA,aAAOsW,IAAI,CAACxB,GAAZ;AACD,KALD,MAKO;AACLwB,MAAAA,IAAI,CAACvB,QAAL,GAAgB,KAAhB;AACD;AACF;;AACD,SAAOuB,IAAI,CAACxB,GAAL,GAAW,KAAKxM,IAAL,KAAc5I,KAAK,CAACC,GAApB,IAA2B,KAAK2I,IAAL,KAAc5I,KAAK,CAACG,MAA/C,GAAwD,KAAK2V,aAAL,EAAxD,GAA+E,KAAK/E,UAAL,CAAgB,IAAhB,CAAjG;AACD,CAZD,C,CAcA;;;AAEAqI,IAAI,CAACpF,YAAL,GAAoB,UAAShI,IAAT,EAAe;AACjCA,EAAAA,IAAI,CAACuH,EAAL,GAAU,IAAV;;AACA,MAAI,KAAKxT,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjCkF,IAAAA,IAAI,CAACmH,SAAL,GAAiB,KAAjB;AACAnH,IAAAA,IAAI,CAACmC,UAAL,GAAkB,KAAlB;AACD;;AACD,MAAI,KAAKpO,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EACE;AAAEkF,IAAAA,IAAI,CAACoH,KAAL,GAAa,KAAb;AAAqB;AAC1B,CARD,C,CAUA;;;AAEAgG,IAAI,CAACzD,WAAL,GAAmB,UAASH,WAAT,EAAsB1D,OAAtB,EAA+B;AAChD,MAAI9F,IAAI,GAAG,KAAKC,SAAL,EAAX;AAAA,MAA6BgI,QAAQ,GAAG,KAAKpJ,WAA7C;AAAA,MAA0DqJ,UAAU,GAAG,KAAKpJ,OAA5E;AAAA,MACIqJ,WAAW,GAAG,KAAKpJ,QADvB;AAAA,MACiCqJ,WAAW,GAAG,KAAKpJ,QADpD;AAAA,MAC8DqJ,SAAS,GAAG,KAAKzJ,UAD/E;AAGA,OAAKoJ,YAAL,CAAkBhI,IAAlB;;AACA,MAAI,KAAKjM,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EACE;AAAEkF,IAAAA,IAAI,CAACmH,SAAL,GAAiBqC,WAAjB;AAA+B;;AACnC,MAAI,KAAKzV,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EACE;AAAEkF,IAAAA,IAAI,CAACoH,KAAL,GAAa,CAAC,CAACtB,OAAf;AAAyB;;AAE7B,OAAKjH,WAAL,GAAmBmB,IAAI,CAACmH,SAAxB;AACA,OAAKrI,OAAL,GAAekB,IAAI,CAACoH,KAApB;AACA,OAAKrI,QAAL,GAAgB,CAAhB;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACA,OAAKJ,UAAL,GAAkB,IAAlB;AACA,OAAKQ,kBAAL;AAEA,OAAK8B,MAAL,CAAYlN,KAAK,CAACS,MAAlB;AACAuL,EAAAA,IAAI,CAACwI,MAAL,GAAc,KAAKC,gBAAL,CAAsBzU,KAAK,CAACU,MAA5B,EAAoC,KAApC,EAA2C,KAAKX,OAAL,CAAa+G,WAAb,IAA4B,CAAvE,CAAd;AACA,OAAKkH,8BAAL;AACA,OAAKuG,iBAAL,CAAuBvI,IAAvB,EAA6B,KAA7B;AAEA,OAAKnB,WAAL,GAAmBoJ,QAAnB;AACA,OAAKnJ,OAAL,GAAeoJ,UAAf;AACA,OAAKnJ,QAAL,GAAgBoJ,WAAhB;AACA,OAAKnJ,QAAL,GAAgBoJ,WAAhB;AACA,OAAKxJ,UAAL,GAAkByJ,SAAlB;AACA,SAAO,KAAK3F,UAAL,CAAgB1C,IAAhB,EAAsB,oBAAtB,CAAP;AACD,CA5BD,C,CA8BA;;;AAEAoN,IAAI,CAACmC,oBAAL,GAA4B,UAASvP,IAAT,EAAewI,MAAf,EAAuB1C,OAAvB,EAAgC;AAC1D,MAAImC,QAAQ,GAAG,KAAKpJ,WAApB;AAAA,MAAiCqJ,UAAU,GAAG,KAAKpJ,OAAnD;AAAA,MACIqJ,WAAW,GAAG,KAAKpJ,QADvB;AAAA,MACiCqJ,WAAW,GAAG,KAAKpJ,QADpD;AAAA,MAC8DqJ,SAAS,GAAG,KAAKzJ,UAD/E;AAGA,OAAKQ,kBAAL;AACA,OAAK4I,YAAL,CAAkBhI,IAAlB;;AACA,MAAI,KAAKjM,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EACE;AAAEkF,IAAAA,IAAI,CAACoH,KAAL,GAAa,CAAC,CAACtB,OAAf;AAAyB;;AAE7B,OAAKjH,WAAL,GAAmB,KAAnB;AACA,OAAKC,OAAL,GAAekB,IAAI,CAACoH,KAApB;AACA,OAAKrI,QAAL,GAAgB,CAAhB;AACA,OAAKC,QAAL,GAAgB,CAAhB;AACA,OAAKJ,UAAL,GAAkB,IAAlB;AAEAoB,EAAAA,IAAI,CAACwI,MAAL,GAAc,KAAKuD,gBAAL,CAAsBvD,MAAtB,EAA8B,IAA9B,CAAd;AACA,OAAKD,iBAAL,CAAuBvI,IAAvB,EAA6B,IAA7B;AAEA,OAAKnB,WAAL,GAAmBoJ,QAAnB;AACA,OAAKnJ,OAAL,GAAeoJ,UAAf;AACA,OAAKnJ,QAAL,GAAgBoJ,WAAhB;AACA,OAAKnJ,QAAL,GAAgBoJ,WAAhB;AACA,OAAKxJ,UAAL,GAAkByJ,SAAlB;AACA,SAAO,KAAK3F,UAAL,CAAgB1C,IAAhB,EAAsB,yBAAtB,CAAP;AACD,CAxBD,C,CA0BA;;;AAEAoN,IAAI,CAAC7E,iBAAL,GAAyB,UAASvI,IAAT,EAAe6R,eAAf,EAAgC;AACvD,MAAIC,YAAY,GAAGD,eAAe,IAAI,KAAKjV,IAAL,KAAc5I,KAAK,CAACO,MAA1D;AACA,MAAIwd,SAAS,GAAG,KAAKxgB,MAArB;AAAA,MAA6BygB,SAAS,GAAG,KAAzC;;AAEA,MAAIF,YAAJ,EAAkB;AAChB9R,IAAAA,IAAI,CAACsC,IAAL,GAAY,KAAKoF,gBAAL,EAAZ;AACA1H,IAAAA,IAAI,CAACmC,UAAL,GAAkB,IAAlB;AACA,SAAK8P,WAAL,CAAiBjS,IAAjB,EAAuB,KAAvB;AACD,GAJD,MAIO;AACL,QAAIkS,SAAS,GAAG,KAAKne,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC,CAAC,KAAKqX,iBAAL,CAAuBnS,IAAI,CAACwI,MAA5B,CAAlD;;AACA,QAAI,CAACuJ,SAAD,IAAcG,SAAlB,EAA6B;AAC3BF,MAAAA,SAAS,GAAG,KAAKtT,eAAL,CAAqB,KAAKtE,GAA1B,CAAZ,CAD2B,CAE3B;AACA;AACA;;AACA,UAAI4X,SAAS,IAAIE,SAAjB,EACE;AAAE,aAAKtQ,gBAAL,CAAsB5B,IAAI,CAAC7F,KAA3B,EAAkC,2EAAlC;AAAiH;AACtH,KATI,CAUL;AACA;;;AACA,QAAIiY,SAAS,GAAG,KAAKnT,MAArB;AACA,SAAKA,MAAL,GAAc,EAAd;;AACA,QAAI+S,SAAJ,EAAe;AAAE,WAAKzgB,MAAL,GAAc,IAAd;AAAqB,KAdjC,CAgBL;AACA;;;AACA,SAAK0gB,WAAL,CAAiBjS,IAAjB,EAAuB,CAAC+R,SAAD,IAAc,CAACC,SAAf,IAA4B,CAACH,eAA7B,IAAgD,KAAKM,iBAAL,CAAuBnS,IAAI,CAACwI,MAA5B,CAAvE;AACAxI,IAAAA,IAAI,CAACsC,IAAL,GAAY,KAAKgC,UAAL,CAAgB,KAAhB,CAAZ;AACAtE,IAAAA,IAAI,CAACmC,UAAL,GAAkB,KAAlB;AACA,SAAKM,sBAAL,CAA4BzC,IAAI,CAACsC,IAAL,CAAUA,IAAtC;AACA,SAAKrD,MAAL,GAAcmT,SAAd;AACD;;AACD,OAAKC,iBAAL;;AAEA,MAAI,KAAK9gB,MAAL,IAAeyO,IAAI,CAACuH,EAAxB,EAA4B;AAC1B;AACA,SAAK1B,SAAL,CAAe7F,IAAI,CAACuH,EAApB,EAAwB,MAAxB;AACD;;AACD,OAAKhW,MAAL,GAAcwgB,SAAd;AACD,CAvCD;;AAyCA3E,IAAI,CAAC+E,iBAAL,GAAyB,UAAS3J,MAAT,EAAiB;AACxC,OAAK,IAAIjW,CAAC,GAAG,CAAR,EAAWyU,IAAI,GAAGwB,MAAvB,EAA+BjW,CAAC,GAAGyU,IAAI,CAACxU,MAAxC,EAAgDD,CAAC,IAAI,CAArD,EACE;AACA,QAAIoU,KAAK,GAAGK,IAAI,CAACzU,CAAD,CAAhB;;AAEA,QAAIoU,KAAK,CAAC/J,IAAN,KAAe,YAAnB,EAAiC;AAAE,aAAO,KAAP;AACpC;AAAE;;AACH,SAAO,IAAP;AACD,CARD,C,CAUA;AACA;;;AAEAwQ,IAAI,CAAC6E,WAAL,GAAmB,UAASjS,IAAT,EAAesS,eAAf,EAAgC;AACjD,MAAI1S,MAAM,GAAG,IAAb;AAEA,MAAI2S,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIhgB,CAAC,GAAG,CAAR,EAAWyU,IAAI,GAAGhH,IAAI,CAACwI,MAA5B,EAAoCjW,CAAC,GAAGyU,IAAI,CAACxU,MAA7C,EAAqDD,CAAC,IAAI,CAA1D,EACE;AACA,QAAIoU,KAAK,GAAGK,IAAI,CAACzU,CAAD,CAAhB;AAEAqN,IAAAA,MAAM,CAACiG,SAAP,CAAiBc,KAAjB,EAAwB,KAAxB,EAA+B2L,eAAe,GAAG,IAAH,GAAUC,QAAxD;AACD;AACF,CAVD,C,CAYA;AACA;AACA;AACA;AACA;;;AAEAnF,IAAI,CAACkC,aAAL,GAAqB,UAAShD,KAAT,EAAgBE,kBAAhB,EAAoCD,UAApC,EAAgD5K,sBAAhD,EAAwE;AAC3F,MAAI/B,MAAM,GAAG,IAAb;AAEA,MAAI6M,IAAI,GAAG,EAAX;AAAA,MAAevB,KAAK,GAAG,IAAvB;;AACA,SAAO,CAAC,KAAK5K,GAAL,CAASgM,KAAT,CAAR,EAAyB;AACvB,QAAI,CAACpB,KAAL,EAAY;AACVtL,MAAAA,MAAM,CAACsB,MAAP,CAAclN,KAAK,CAACW,KAApB;;AACA,UAAI6X,kBAAkB,IAAI5M,MAAM,CAACmB,kBAAP,CAA0BuL,KAA1B,CAA1B,EAA4D;AAAE;AAAO;AACtE,KAHD,MAGO;AAAEpB,MAAAA,KAAK,GAAG,KAAR;AAAgB;;AAEzB,QAAIH,GAAG,GAAI,KAAK,CAAhB;;AACA,QAAIwB,UAAU,IAAI3M,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACW,KAAxC,EACE;AAAEoW,MAAAA,GAAG,GAAG,IAAN;AAAa,KADjB,MAEK,IAAInL,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACmB,QAA1B,EAAoC;AACvC4V,MAAAA,GAAG,GAAGnL,MAAM,CAACuM,WAAP,CAAmBxK,sBAAnB,CAAN;;AACA,UAAIA,sBAAsB,IAAI/B,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACW,KAAhD,IAAyDgN,sBAAsB,CAACL,aAAvB,GAAuC,CAApG,EACE;AAAEK,QAAAA,sBAAsB,CAACL,aAAvB,GAAuC1B,MAAM,CAACzF,KAA9C;AAAsD;AAC3D,KAJI,MAIE;AACL4Q,MAAAA,GAAG,GAAGnL,MAAM,CAAC8H,gBAAP,CAAwB,KAAxB,EAA+B/F,sBAA/B,CAAN;AACD;;AACD8K,IAAAA,IAAI,CAACrQ,IAAL,CAAU2O,GAAV;AACD;;AACD,SAAO0B,IAAP;AACD,CAvBD;;AAyBAW,IAAI,CAAC7C,eAAL,GAAuB,UAASvR,GAAT,EAAc;AACnC,MAAImB,KAAK,GAAGnB,GAAG,CAACmB,KAAhB;AACA,MAAIC,GAAG,GAAGpB,GAAG,CAACoB,GAAd;AACA,MAAIzG,IAAI,GAAGqF,GAAG,CAACrF,IAAf;;AAEA,MAAI,KAAKkL,WAAL,IAAoBlL,IAAI,KAAK,OAAjC,EACE;AAAE,SAAKiO,gBAAL,CAAsBzH,KAAtB,EAA6B,sDAA7B;AAAuF;;AAC3F,MAAI,KAAK2E,OAAL,IAAgBnL,IAAI,KAAK,OAA7B,EACE;AAAE,SAAKiO,gBAAL,CAAsBzH,KAAtB,EAA6B,4DAA7B;AAA6F;;AACjG,MAAI,KAAKmF,SAAL,CAAe3L,IAAf,CAAJ,EACE;AAAE,SAAKwN,KAAL,CAAWhH,KAAX,EAAmB,yBAAyBxG,IAAzB,GAAgC,GAAnD;AAA2D;;AAC/D,MAAI,KAAKI,OAAL,CAAa+G,WAAb,GAA2B,CAA3B,IACF,KAAKP,KAAL,CAAWwD,KAAX,CAAiB5D,KAAjB,EAAwBC,GAAxB,EAA6BoY,OAA7B,CAAqC,IAArC,MAA+C,CAAC,CADlD,EACqD;AAAE;AAAQ;;AAC/D,MAAIC,EAAE,GAAG,KAAKlhB,MAAL,GAAc,KAAKiM,mBAAnB,GAAyC,KAAKlM,aAAvD;;AACA,MAAImhB,EAAE,CAAC9f,IAAH,CAAQgB,IAAR,CAAJ,EAAmB;AACjB,QAAI,CAAC,KAAKmL,OAAN,IAAiBnL,IAAI,KAAK,OAA9B,EACE;AAAE,WAAKiO,gBAAL,CAAsBzH,KAAtB,EAA6B,uDAA7B;AAAwF;;AAC5F,SAAKyH,gBAAL,CAAsBzH,KAAtB,EAA8B,kBAAkBxG,IAAlB,GAAyB,eAAvD;AACD;AACF,CAnBD,C,CAqBA;AACA;AACA;;;AAEAyZ,IAAI,CAACrI,UAAL,GAAkB,UAAS2N,OAAT,EAAkB5G,SAAlB,EAA6B;AAC7C,MAAI9L,IAAI,GAAG,KAAKC,SAAL,EAAX;;AACA,MAAIyS,OAAO,IAAI,KAAK3e,OAAL,CAAamH,aAAb,KAA+B,OAA9C,EAAuD;AAAEwX,IAAAA,OAAO,GAAG,KAAV;AAAkB;;AAC3E,MAAI,KAAK9V,IAAL,KAAc5I,KAAK,CAACL,IAAxB,EAA8B;AAC5BqM,IAAAA,IAAI,CAACrM,IAAL,GAAY,KAAKkJ,KAAjB;AACD,GAFD,MAEO,IAAI,KAAKD,IAAL,CAAU1J,OAAd,EAAuB;AAC5B8M,IAAAA,IAAI,CAACrM,IAAL,GAAY,KAAKiJ,IAAL,CAAU1J,OAAtB,CAD4B,CAG5B;AACA;AACA;AACA;;AACA,QAAI,CAAC8M,IAAI,CAACrM,IAAL,KAAc,OAAd,IAAyBqM,IAAI,CAACrM,IAAL,KAAc,UAAxC,MACC,KAAK0K,UAAL,KAAoB,KAAKD,YAAL,GAAoB,CAAxC,IAA6C,KAAK7D,KAAL,CAAW0I,UAAX,CAAsB,KAAK7E,YAA3B,MAA6C,EAD3F,CAAJ,EACoG;AAClG,WAAKE,OAAL,CAAa2G,GAAb;AACD;AACF,GAXM,MAWA;AACL,SAAKtE,UAAL;AACD;;AACD,OAAKJ,IAAL;AACA,OAAKmC,UAAL,CAAgB1C,IAAhB,EAAsB,YAAtB;;AACA,MAAI,CAAC0S,OAAL,EAAc;AAAE,SAAKnI,eAAL,CAAqBvK,IAArB;AAA6B;;AAC7C,SAAOA,IAAP;AACD,CAvBD,C,CAyBA;;;AAEAoN,IAAI,CAACW,UAAL,GAAkB,YAAW;AAC3B,MAAI,CAAC,KAAKhP,QAAV,EAAoB;AAAE,SAAKA,QAAL,GAAgB,KAAK5E,KAArB;AAA6B;;AAEnD,MAAI6F,IAAI,GAAG,KAAKC,SAAL,EAAX;AACA,OAAKM,IAAL;;AACA,MAAI,KAAK3D,IAAL,KAAc5I,KAAK,CAACY,IAApB,IAA4B,KAAKgM,kBAAL,EAA5B,IAA0D,KAAKhE,IAAL,KAAc5I,KAAK,CAACmC,IAApB,IAA4B,CAAC,KAAKyG,IAAL,CAAUxJ,UAArG,EAAkH;AAChH4M,IAAAA,IAAI,CAAC2S,QAAL,GAAgB,KAAhB;AACA3S,IAAAA,IAAI,CAACkG,QAAL,GAAgB,IAAhB;AACD,GAHD,MAGO;AACLlG,IAAAA,IAAI,CAAC2S,QAAL,GAAgB,KAAKrS,GAAL,CAAStM,KAAK,CAACmC,IAAf,CAAhB;AACA6J,IAAAA,IAAI,CAACkG,QAAL,GAAgB,KAAKwB,gBAAL,EAAhB;AACD;;AACD,SAAO,KAAKhF,UAAL,CAAgB1C,IAAhB,EAAsB,iBAAtB,CAAP;AACD,CAbD;;AAeAoN,IAAI,CAAC0B,UAAL,GAAkB,YAAW;AAC3B,MAAI,CAAC,KAAK9P,QAAV,EAAoB;AAAE,SAAKA,QAAL,GAAgB,KAAK7E,KAArB;AAA6B;;AAEnD,MAAI6F,IAAI,GAAG,KAAKC,SAAL,EAAX;AACA,OAAKM,IAAL;AACAP,EAAAA,IAAI,CAACkG,QAAL,GAAgB,KAAKmI,eAAL,CAAqB,IAArB,EAA2B,IAA3B,CAAhB;AACA,SAAO,KAAK3L,UAAL,CAAgB1C,IAAhB,EAAsB,iBAAtB,CAAP;AACD,CAPD;;AASA,IAAI4S,IAAI,GAAGzV,MAAM,CAACjE,SAAlB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA0Z,IAAI,CAACzR,KAAL,GAAa,UAAS7O,GAAT,EAAcugB,OAAd,EAAuB;AAClC,MAAI/V,GAAG,GAAGxC,WAAW,CAAC,KAAKC,KAAN,EAAajI,GAAb,CAArB;AACAugB,EAAAA,OAAO,IAAI,OAAO/V,GAAG,CAAClD,IAAX,GAAkB,GAAlB,GAAwBkD,GAAG,CAAChD,MAA5B,GAAqC,GAAhD;AACA,MAAIgZ,GAAG,GAAG,IAAIC,WAAJ,CAAgBF,OAAhB,CAAV;AACAC,EAAAA,GAAG,CAACxgB,GAAJ,GAAUA,GAAV;AAAewgB,EAAAA,GAAG,CAAChW,GAAJ,GAAUA,GAAV;AAAegW,EAAAA,GAAG,CAACE,QAAJ,GAAe,KAAK1gB,GAApB;AAC9B,QAAMwgB,GAAN;AACD,CAND;;AAQAF,IAAI,CAAChR,gBAAL,GAAwBgR,IAAI,CAACzR,KAA7B;;AAEAyR,IAAI,CAAC3U,WAAL,GAAmB,YAAW;AAC5B,MAAI,KAAKlK,OAAL,CAAawH,SAAjB,EAA4B;AAC1B,WAAO,IAAI5B,QAAJ,CAAa,KAAKmE,OAAlB,EAA2B,KAAKxL,GAAL,GAAW,KAAKsL,SAA3C,CAAP;AACD;AACF,CAJD;;AAMA,IAAIqV,IAAI,GAAG9V,MAAM,CAACjE,SAAlB,C,CAEA;;AACA,IAAI3D,MAAM,GAAG0D,MAAM,CAAC1D,MAAP,IAAiB,UAAS2d,MAAT,EAAiB;AAC7C,MAAIC,OAAO,GAAG,EAAd;AAAA,MAAkBC,GAAG,GAAG3D,SAAS,CAACjd,MAAV,GAAmB,CAA3C;;AACA,SAAQ4gB,GAAG,KAAK,CAAhB,EAAoBD,OAAO,CAAEC,GAAF,CAAP,GAAiB3D,SAAS,CAAE2D,GAAG,GAAG,CAAR,CAA1B;;AAEpB,OAAK,IAAI7gB,CAAC,GAAG,CAAR,EAAWyU,IAAI,GAAGmM,OAAvB,EAAgC5gB,CAAC,GAAGyU,IAAI,CAACxU,MAAzC,EAAiDD,CAAC,IAAI,CAAtD,EAAyD;AACvD,QAAIoG,MAAM,GAAGqO,IAAI,CAACzU,CAAD,CAAjB;;AAEA,SAAK,IAAI6W,GAAT,IAAgBzQ,MAAhB,EAAwB;AACtB,UAAIU,GAAG,CAACV,MAAD,EAASyQ,GAAT,CAAP,EAAsB;AACpB8J,QAAAA,MAAM,CAAC9J,GAAD,CAAN,GAAczQ,MAAM,CAACyQ,GAAD,CAApB;AACD;AACF;AACF;;AACD,SAAO8J,MAAP;AACD,CAdD,C,CAgBA;;;AAEAD,IAAI,CAAC7T,kBAAL,GAA0B,YAAW;AACnC;AACA;AACA;AACA;AACA,OAAKD,UAAL,CAAgB/C,IAAhB,CAAqB;AAACiX,IAAAA,GAAG,EAAE,EAAN;AAAUC,IAAAA,OAAO,EAAE,EAAnB;AAAuBC,IAAAA,QAAQ,EAAE,EAAjC;AAAqCC,IAAAA,aAAa,EAAE;AAApD,GAArB;AACD,CAND;;AAQAP,IAAI,CAACZ,iBAAL,GAAyB,YAAW;AAClC,OAAKlT,UAAL,CAAgB8F,GAAhB;AACD,CAFD;;AAIAgO,IAAI,CAAC7N,iBAAL,GAAyB,YAAW;AAClC,MAAIqO,WAAW,GAAG,KAAKtU,UAAL,CAAgB,KAAKA,UAAL,CAAgB3M,MAAhB,GAAyB,CAAzC,CAAlB;AACA,MAAIkhB,UAAU,GAAG;AAACL,IAAAA,GAAG,EAAE,EAAN;AAAUC,IAAAA,OAAO,EAAE,EAAnB;AAAuBC,IAAAA,QAAQ,EAAE,EAAjC;AAAqCC,IAAAA,aAAa,EAAE;AAApD,GAAjB;AAEA,OAAKrU,UAAL,CAAgB/C,IAAhB,CAAqBsX,UAArB;AACAne,EAAAA,MAAM,CAACme,UAAU,CAACF,aAAZ,EAA2BC,WAAW,CAACH,OAAvC,EAAgDG,WAAW,CAACD,aAA5D,CAAN;AACD,CAND;;AAQAP,IAAI,CAAC1M,gBAAL,GAAwB,YAAW;AACjC,MAAImN,UAAU,GAAG,KAAKvU,UAAL,CAAgB8F,GAAhB,EAAjB;AACA,MAAIwO,WAAW,GAAG,KAAKtU,UAAL,CAAgB,KAAKA,UAAL,CAAgB3M,MAAhB,GAAyB,CAAzC,CAAlB;AAEA+C,EAAAA,MAAM,CAACke,WAAW,CAACF,QAAb,EAAuBG,UAAU,CAACL,GAAlC,EAAuCK,UAAU,CAACH,QAAlD,CAAN;AACD,CALD;AAOA;;;;;;AAIAN,IAAI,CAACjG,iBAAL,GAAyB,UAASrZ,IAAT,EAAe;AACtC,MAAIggB,YAAY,GAAG,KAAKxU,UAAL,CAAgB,KAAKA,UAAL,CAAgB3M,MAAhB,GAAyB,CAAzC,CAAnB;AAEA,SAAO,CAAC6G,GAAG,CAACsa,YAAY,CAACL,OAAd,EAAuB3f,IAAvB,CAAJ,IAAoC,CAAC0F,GAAG,CAACsa,YAAY,CAACH,aAAd,EAA6B7f,IAA7B,CAA/C;AACD,CAJD;AAMA;;;;;;;AAKAsf,IAAI,CAAChG,qBAAL,GAA6B,UAAStZ,IAAT,EAAe;AAC1C,MAAIggB,YAAY,GAAG,KAAKxU,UAAL,CAAgB,KAAKA,UAAL,CAAgB3M,MAAhB,GAAyB,CAAzC,CAAnB;AAEA,SAAO,CAAC6G,GAAG,CAACsa,YAAY,CAACL,OAAd,EAAuB3f,IAAvB,CAAJ,IAAoC,CAAC0F,GAAG,CAACsa,YAAY,CAACN,GAAd,EAAmB1f,IAAnB,CAAxC,IAAoE,CAAC0F,GAAG,CAACsa,YAAY,CAACJ,QAAd,EAAwB5f,IAAxB,CAA/E;AACD,CAJD;;AAMAsf,IAAI,CAAC/F,cAAL,GAAsB,UAASvZ,IAAT,EAAe;AACnC,OAAKwL,UAAL,CAAgB,KAAKA,UAAL,CAAgB3M,MAAhB,GAAyB,CAAzC,EAA4C6gB,GAA5C,CAAgD1f,IAAhD,IAAwD,IAAxD;AACD,CAFD;;AAIAsf,IAAI,CAAC9F,kBAAL,GAA0B,UAASxZ,IAAT,EAAe;AACvC,OAAKwL,UAAL,CAAgB,KAAKA,UAAL,CAAgB3M,MAAhB,GAAyB,CAAzC,EAA4C8gB,OAA5C,CAAoD3f,IAApD,IAA4D,IAA5D;AACD,CAFD;;AAIA,IAAIigB,IAAI,GAAG,SAASA,IAAT,CAAcC,MAAd,EAAsBvhB,GAAtB,EAA2BwK,GAA3B,EAAgC;AACzC,OAAKF,IAAL,GAAY,EAAZ;AACA,OAAKzC,KAAL,GAAa7H,GAAb;AACA,OAAK8H,GAAL,GAAW,CAAX;;AACA,MAAIyZ,MAAM,CAAC9f,OAAP,CAAewH,SAAnB,EACE;AAAE,SAAKuB,GAAL,GAAW,IAAI7C,cAAJ,CAAmB4Z,MAAnB,EAA2B/W,GAA3B,CAAX;AAA6C;;AACjD,MAAI+W,MAAM,CAAC9f,OAAP,CAAe6H,gBAAnB,EACE;AAAE,SAAKvB,UAAL,GAAkBwZ,MAAM,CAAC9f,OAAP,CAAe6H,gBAAjC;AAAoD;;AACxD,MAAIiY,MAAM,CAAC9f,OAAP,CAAe2H,MAAnB,EACE;AAAE,SAAKqB,KAAL,GAAa,CAACzK,GAAD,EAAM,CAAN,CAAb;AAAwB;AAC7B,CAVD,C,CAYA;;;AAEA,IAAIwhB,IAAI,GAAG3W,MAAM,CAACjE,SAAlB;;AAEA4a,IAAI,CAAC7T,SAAL,GAAiB,YAAW;AAC1B,SAAO,IAAI2T,IAAJ,CAAS,IAAT,EAAe,KAAKzZ,KAApB,EAA2B,KAAKsC,QAAhC,CAAP;AACD,CAFD;;AAIAqX,IAAI,CAACxK,WAAL,GAAmB,UAAShX,GAAT,EAAcwK,GAAd,EAAmB;AACpC,SAAO,IAAI8W,IAAJ,CAAS,IAAT,EAAethB,GAAf,EAAoBwK,GAApB,CAAP;AACD,CAFD,C,CAIA;;;AAEA,SAASgU,YAAT,CAAsB9Q,IAAtB,EAA4BpD,IAA5B,EAAkCtK,GAAlC,EAAuCwK,GAAvC,EAA4C;AAC1CkD,EAAAA,IAAI,CAACpD,IAAL,GAAYA,IAAZ;AACAoD,EAAAA,IAAI,CAAC5F,GAAL,GAAW9H,GAAX;;AACA,MAAI,KAAKyB,OAAL,CAAawH,SAAjB,EACE;AAAEyE,IAAAA,IAAI,CAAClD,GAAL,CAAS1C,GAAT,GAAe0C,GAAf;AAAqB;;AACzB,MAAI,KAAK/I,OAAL,CAAa2H,MAAjB,EACE;AAAEsE,IAAAA,IAAI,CAACjD,KAAL,CAAW,CAAX,IAAgBzK,GAAhB;AAAsB;;AAC1B,SAAO0N,IAAP;AACD;;AAED8T,IAAI,CAACpR,UAAL,GAAkB,UAAS1C,IAAT,EAAepD,IAAf,EAAqB;AACrC,SAAOkU,YAAY,CAACtX,IAAb,CAAkB,IAAlB,EAAwBwG,IAAxB,EAA8BpD,IAA9B,EAAoC,KAAKyB,UAAzC,EAAqD,KAAKH,aAA1D,CAAP;AACD,CAFD,C,CAIA;;;AAEA4V,IAAI,CAAChD,YAAL,GAAoB,UAAS9Q,IAAT,EAAepD,IAAf,EAAqBtK,GAArB,EAA0BwK,GAA1B,EAA+B;AACjD,SAAOgU,YAAY,CAACtX,IAAb,CAAkB,IAAlB,EAAwBwG,IAAxB,EAA8BpD,IAA9B,EAAoCtK,GAApC,EAAyCwK,GAAzC,CAAP;AACD,CAFD,C,CAIA;AACA;AACA;;;AAEA,IAAIiX,UAAU,GAAG,SAASA,UAAT,CAAoB5X,KAApB,EAA2B6X,MAA3B,EAAmCC,aAAnC,EAAkDC,QAAlD,EAA4D/M,SAA5D,EAAuE;AACtF,OAAKhL,KAAL,GAAaA,KAAb;AACA,OAAK6X,MAAL,GAAc,CAAC,CAACA,MAAhB;AACA,OAAKC,aAAL,GAAqB,CAAC,CAACA,aAAvB;AACA,OAAKC,QAAL,GAAgBA,QAAhB;AACA,OAAK/M,SAAL,GAAiB,CAAC,CAACA,SAAnB;AACD,CAND;;AAQA,IAAIgN,OAAO,GAAG;AACZC,EAAAA,MAAM,EAAE,IAAIL,UAAJ,CAAe,GAAf,EAAoB,KAApB,CADI;AAEZM,EAAAA,MAAM,EAAE,IAAIN,UAAJ,CAAe,GAAf,EAAoB,IAApB,CAFI;AAGZO,EAAAA,MAAM,EAAE,IAAIP,UAAJ,CAAe,IAAf,EAAqB,KAArB,CAHI;AAIZQ,EAAAA,MAAM,EAAE,IAAIR,UAAJ,CAAe,GAAf,EAAoB,KAApB,CAJI;AAKZS,EAAAA,MAAM,EAAE,IAAIT,UAAJ,CAAe,GAAf,EAAoB,IAApB,CALI;AAMZU,EAAAA,MAAM,EAAE,IAAIV,UAAJ,CAAe,GAAf,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,UAAU7Z,CAAV,EAAa;AAAE,WAAOA,CAAC,CAACwa,oBAAF,EAAP;AAAkC,GAAjF,CANI;AAOZC,EAAAA,MAAM,EAAE,IAAIZ,UAAJ,CAAe,UAAf,EAA2B,KAA3B,CAPI;AAQZa,EAAAA,MAAM,EAAE,IAAIb,UAAJ,CAAe,UAAf,EAA2B,IAA3B,CARI;AASZc,EAAAA,UAAU,EAAE,IAAId,UAAJ,CAAe,UAAf,EAA2B,IAA3B,EAAiC,KAAjC,EAAwC,IAAxC,EAA8C,IAA9C,CATA;AAUZe,EAAAA,KAAK,EAAE,IAAIf,UAAJ,CAAe,UAAf,EAA2B,KAA3B,EAAkC,KAAlC,EAAyC,IAAzC,EAA+C,IAA/C;AAVK,CAAd;AAaA,IAAIgB,IAAI,GAAG5X,MAAM,CAACjE,SAAlB;;AAEA6b,IAAI,CAACxW,cAAL,GAAsB,YAAW;AAC/B,SAAO,CAAC4V,OAAO,CAACC,MAAT,CAAP;AACD,CAFD;;AAIAW,IAAI,CAACC,YAAL,GAAoB,UAASC,QAAT,EAAmB;AACrC,MAAIC,MAAM,GAAG,KAAKC,UAAL,EAAb;;AACA,MAAID,MAAM,KAAKf,OAAO,CAACS,MAAnB,IAA6BM,MAAM,KAAKf,OAAO,CAACQ,MAApD,EACE;AAAE,WAAO,IAAP;AAAa;;AACjB,MAAIM,QAAQ,KAAKjhB,KAAK,CAACa,KAAnB,KAA6BqgB,MAAM,KAAKf,OAAO,CAACC,MAAnB,IAA6Bc,MAAM,KAAKf,OAAO,CAACE,MAA7E,CAAJ,EACE;AAAE,WAAO,CAACa,MAAM,CAAClB,MAAf;AAAuB,GALU,CAOrC;AACA;AACA;;;AACA,MAAIiB,QAAQ,KAAKjhB,KAAK,CAACkD,OAAnB,IAA8B+d,QAAQ,KAAKjhB,KAAK,CAACL,IAAnB,IAA2B,KAAK6K,WAAlE,EACE;AAAE,WAAO/F,SAAS,CAAC9F,IAAV,CAAe,KAAK4H,KAAL,CAAWwD,KAAX,CAAiB,KAAKM,UAAtB,EAAkC,KAAKlE,KAAvC,CAAf,CAAP;AAAsE;;AAC1E,MAAI8a,QAAQ,KAAKjhB,KAAK,CAAC6C,KAAnB,IAA4Boe,QAAQ,KAAKjhB,KAAK,CAACY,IAA/C,IAAuDqgB,QAAQ,KAAKjhB,KAAK,CAACI,GAA1E,IAAiF6gB,QAAQ,KAAKjhB,KAAK,CAACU,MAApG,IAA8GugB,QAAQ,KAAKjhB,KAAK,CAACgB,KAArI,EACE;AAAE,WAAO,IAAP;AAAa;;AACjB,MAAIigB,QAAQ,KAAKjhB,KAAK,CAACO,MAAvB,EACE;AAAE,WAAO2gB,MAAM,KAAKf,OAAO,CAACC,MAA1B;AAAkC;;AACtC,MAAIa,QAAQ,KAAKjhB,KAAK,CAACsD,IAAnB,IAA2B2d,QAAQ,KAAKjhB,KAAK,CAACL,IAAlD,EACE;AAAE,WAAO,KAAP;AAAc;;AAClB,SAAO,CAAC,KAAK6K,WAAb;AACD,CAnBD;;AAqBAuW,IAAI,CAACK,kBAAL,GAA0B,YAAW;AACnC,MAAIxV,MAAM,GAAG,IAAb;;AAEA,OAAK,IAAIrN,CAAC,GAAG,KAAK+L,OAAL,CAAa9L,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjD,QAAI+L,OAAO,GAAGsB,MAAM,CAACtB,OAAP,CAAe/L,CAAf,CAAd;;AACA,QAAI+L,OAAO,CAACnC,KAAR,KAAkB,UAAtB,EACE;AAAE,aAAOmC,OAAO,CAAC6I,SAAf;AAA0B;AAC/B;;AACD,SAAO,KAAP;AACD,CATD;;AAWA4N,IAAI,CAACrhB,aAAL,GAAqB,UAASuhB,QAAT,EAAmB;AACtC,MAAI3N,MAAJ;AAAA,MAAY1K,IAAI,GAAG,KAAKA,IAAxB;;AACA,MAAIA,IAAI,CAAC1J,OAAL,IAAgB+hB,QAAQ,KAAKjhB,KAAK,CAACc,GAAvC,EACE;AAAE,SAAK0J,WAAL,GAAmB,KAAnB;AAA2B,GAD/B,MAEK,IAAI8I,MAAM,GAAG1K,IAAI,CAAClJ,aAAlB,EACH;AAAE4T,IAAAA,MAAM,CAAC9N,IAAP,CAAY,IAAZ,EAAkByb,QAAlB;AAA8B,GAD7B,MAGH;AAAE,SAAKzW,WAAL,GAAmB5B,IAAI,CAACzJ,UAAxB;AAAqC;AAC1C,CARD,C,CAUA;;;AAEAa,KAAK,CAACU,MAAN,CAAahB,aAAb,GAA6BM,KAAK,CAACQ,MAAN,CAAad,aAAb,GAA6B,YAAW;AACnE,MAAI,KAAK4K,OAAL,CAAa9L,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,SAAKgM,WAAL,GAAmB,IAAnB;AACA;AACD;;AACD,MAAI6W,GAAG,GAAG,KAAK/W,OAAL,CAAa2G,GAAb,EAAV;;AACA,MAAIoQ,GAAG,KAAKlB,OAAO,CAACC,MAAhB,IAA0B,KAAKe,UAAL,GAAkBhZ,KAAlB,KAA4B,UAA1D,EAAsE;AACpEkZ,IAAAA,GAAG,GAAG,KAAK/W,OAAL,CAAa2G,GAAb,EAAN;AACD;;AACD,OAAKzG,WAAL,GAAmB,CAAC6W,GAAG,CAACrB,MAAxB;AACD,CAVD;;AAYAhgB,KAAK,CAACO,MAAN,CAAab,aAAb,GAA6B,UAASuhB,QAAT,EAAmB;AAC9C,OAAK3W,OAAL,CAAalC,IAAb,CAAkB,KAAK4Y,YAAL,CAAkBC,QAAlB,IAA8Bd,OAAO,CAACC,MAAtC,GAA+CD,OAAO,CAACE,MAAzE;AACA,OAAK7V,WAAL,GAAmB,IAAnB;AACD,CAHD;;AAKAxK,KAAK,CAACqB,YAAN,CAAmB3B,aAAnB,GAAmC,YAAW;AAC5C,OAAK4K,OAAL,CAAalC,IAAb,CAAkB+X,OAAO,CAACG,MAA1B;AACA,OAAK9V,WAAL,GAAmB,IAAnB;AACD,CAHD;;AAKAxK,KAAK,CAACS,MAAN,CAAaf,aAAb,GAA6B,UAASuhB,QAAT,EAAmB;AAC9C,MAAIK,eAAe,GAAGL,QAAQ,KAAKjhB,KAAK,CAACiD,GAAnB,IAA0Bge,QAAQ,KAAKjhB,KAAK,CAAC+C,IAA7C,IAAqDke,QAAQ,KAAKjhB,KAAK,CAACyD,KAAxE,IAAiFwd,QAAQ,KAAKjhB,KAAK,CAACwD,MAA1H;AACA,OAAK8G,OAAL,CAAalC,IAAb,CAAkBkZ,eAAe,GAAGnB,OAAO,CAACI,MAAX,GAAoBJ,OAAO,CAACK,MAA7D;AACA,OAAKhW,WAAL,GAAmB,IAAnB;AACD,CAJD;;AAMAxK,KAAK,CAACwB,MAAN,CAAa9B,aAAb,GAA6B,YAAW,CACtC;AACD,CAFD;;AAIAM,KAAK,CAACgD,SAAN,CAAgBtD,aAAhB,GAAgCM,KAAK,CAAC6D,MAAN,CAAanE,aAAb,GAA6B,UAASuhB,QAAT,EAAmB;AAC9E,MAAIA,QAAQ,CAAC9hB,UAAT,IAAuB8hB,QAAQ,KAAKjhB,KAAK,CAACY,IAA1C,IAAkDqgB,QAAQ,KAAKjhB,KAAK,CAAC6C,KAArE,IACA,EAAE,CAACoe,QAAQ,KAAKjhB,KAAK,CAACa,KAAnB,IAA4BogB,QAAQ,KAAKjhB,KAAK,CAACO,MAAhD,KAA2D,KAAK4gB,UAAL,OAAsBhB,OAAO,CAACC,MAA3F,CADJ,EAEE;AAAE,SAAK9V,OAAL,CAAalC,IAAb,CAAkB+X,OAAO,CAACS,MAA1B;AAAoC,GAFxC,MAIE;AAAE,SAAKtW,OAAL,CAAalC,IAAb,CAAkB+X,OAAO,CAACQ,MAA1B;AAAoC;;AACxC,OAAKnW,WAAL,GAAmB,KAAnB;AACD,CAPD;;AASAxK,KAAK,CAACoB,SAAN,CAAgB1B,aAAhB,GAAgC,YAAW;AACzC,MAAI,KAAKyhB,UAAL,OAAsBhB,OAAO,CAACM,MAAlC,EACE;AAAE,SAAKnW,OAAL,CAAa2G,GAAb;AAAqB,GADzB,MAGE;AAAE,SAAK3G,OAAL,CAAalC,IAAb,CAAkB+X,OAAO,CAACM,MAA1B;AAAoC;;AACxC,OAAKjW,WAAL,GAAmB,KAAnB;AACD,CAND;;AAQAxK,KAAK,CAACmC,IAAN,CAAWzC,aAAX,GAA2B,UAASuhB,QAAT,EAAmB;AAC5C,MAAIA,QAAQ,KAAKjhB,KAAK,CAACgD,SAAvB,EAAkC;AAChC,QAAI4D,KAAK,GAAG,KAAK0D,OAAL,CAAa9L,MAAb,GAAsB,CAAlC;;AACA,QAAI,KAAK8L,OAAL,CAAa1D,KAAb,MAAwBuZ,OAAO,CAACS,MAApC,EACE;AAAE,WAAKtW,OAAL,CAAa1D,KAAb,IAAsBuZ,OAAO,CAACU,UAA9B;AAA2C,KAD/C,MAGE;AAAE,WAAKvW,OAAL,CAAa1D,KAAb,IAAsBuZ,OAAO,CAACW,KAA9B;AAAsC;AAC3C;;AACD,OAAKtW,WAAL,GAAmB,IAAnB;AACD,CATD;;AAWAxK,KAAK,CAACL,IAAN,CAAWD,aAAX,GAA2B,UAASuhB,QAAT,EAAmB;AAC5C,MAAIM,OAAO,GAAG,KAAd;;AACA,MAAI,KAAKxhB,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiCma,QAAQ,KAAKjhB,KAAK,CAACc,GAAxD,EAA6D;AAC3D,QAAI,KAAK+H,KAAL,KAAe,IAAf,IAAuB,CAAC,KAAK2B,WAA7B,IACA,KAAK3B,KAAL,KAAe,OAAf,IAA0B,KAAKuY,kBAAL,EAD9B,EAEE;AAAEG,MAAAA,OAAO,GAAG,IAAV;AAAiB;AACtB;;AACD,OAAK/W,WAAL,GAAmB+W,OAAnB;AACD,CARD;;AAUA,IAAIC,IAAI,GAAG;AACT,WAAS,CACP,OADO,EAEP,iBAFO,EAGP,MAHO,EAIP,YAJO,EAKP,OALO,EAMP,KANO,EAOP,UAPO,EAQP,cARO,EASP,QATO,EAUP,eAVO,EAWP,QAXO,EAYP,gBAZO,EAaP,IAbO,EAcP,OAdO,EAeP,yBAfO,EAgBP,MAhBO,EAiBP,yBAjBO,EAkBP,MAlBO,EAmBP,yBAnBO,EAoBP,KApBO,EAqBP,8BArBO,EAsBP,OAtBO,EAuBP,yBAvBO,EAwBP,KAxBO,EAyBP,yBAzBO,EA0BP,KA1BO,EA2BP,MA3BO,EA4BP,8BA5BO,EA6BP,IA7BO,EA8BP,YA9BO,EA+BP,KA/BO,EAgCP,WAhCO,EAiCP,KAjCO,EAkCP,OAlCO,EAmCP,iBAnCO,EAoCP,gBApCO,EAqCP,qBArCO,EAsCP,oBAtCO,EAuCP,UAvCO,EAwCP,KAxCO,EAyCP,eAzCO,EA0CP,SA1CO,EA2CP,iBA3CO,EA4CP,QA5CO,EA6CP,WA7CO,EA8CP,KA9CO,EA+CP,qBA/CO,EAgDP,MAhDO,EAiDP,sBAjDO,EAkDP,MAlDO,EAmDP,aAnDO,EAoDP,KApDO,EAqDP,UArDO,EAsDP,KAtDO,EAuDP,aAvDO,EAwDP,MAxDO,EAyDP,cAzDO,EA0DP,QA1DO,EA2DP,yBA3DO,EA4DP,KA5DO,EA6DP,WA7DO,EA8DP,OA9DO,EA+DP,MA/DO,EAgEP,yBAhEO,EAiEP,OAjEO,EAkEP,gBAlEO,EAmEP,SAnEO,EAoEP,qBApEO,EAqEP,QArEO,EAsEP,gBAtEO,EAuEP,OAvEO,EAwEP,SAxEO,EAyEP,oBAzEO,EA0EP,IA1EO,EA2EP,mBA3EO,EA4EP,OA5EO,EA6EP,aA7EO,EA8EP,IA9EO,EA+EP,sBA/EO,EAgFP,MAhFO,EAiFP,mBAjFO,EAkFP,OAlFO,EAmFP,WAnFO,EAoFP,OApFO,EAqFP,oBArFO,EAsFP,IAtFO,EAuFP,aAvFO,EAwFP,OAxFO,EAyFP,cAzFO,EA0FP,MA1FO,EA2FP,WA3FO,EA4FP,MA5FO,CADA;AA+FT,sBAAoB,CAClB,cADkB,EAElB,IAFkB,EAGlB,mBAHkB,EAIlB,IAJkB,EAKlB,uBALkB,EAMlB,IANkB,EAOlB,SAPkB,EAQlB,IARkB,EASlB,OATkB,EAUlB,iBAVkB,EAWlB,IAXkB,EAYlB,kBAZkB,EAalB,IAbkB,EAclB,gBAdkB,EAelB,IAfkB,EAgBlB,OAhBkB,EAiBlB,gBAjBkB,EAkBlB,IAlBkB,EAmBlB,mBAnBkB,EAoBlB,IApBkB,EAqBlB,QArBkB,EAsBlB,IAtBkB,EAuBlB,qBAvBkB,EAwBlB,IAxBkB,EAyBlB,QAzBkB,EA0BlB,GA1BkB,EA2BlB,eA3BkB,EA4BlB,IA5BkB,EA6BlB,gBA7BkB,EA8BlB,IA9BkB,EA+BlB,kBA/BkB,EAgClB,IAhCkB,EAiClB,MAjCkB,EAkClB,GAlCkB,EAmClB,gBAnCkB,EAoClB,aApCkB,EAqClB,IArCkB,EAsClB,iBAtCkB,EAuClB,IAvCkB,EAwClB,iBAxCkB,EAyClB,IAzCkB,EA0ClB,iBA1CkB,EA2ClB,IA3CkB,EA4ClB,QA5CkB,EA6ClB,GA7CkB,EA8ClB,kBA9CkB,EA+ClB,IA/CkB,EAgDlB,OAhDkB,EAiDlB,GAjDkB,EAkDlB,cAlDkB,EAmDlB,IAnDkB,EAoDlB,cApDkB,EAqDlB,IArDkB,EAsDlB,mBAtDkB,EAuDlB,IAvDkB,EAwDlB,cAxDkB,EAyDlB,IAzDkB,EA0DlB,qBA1DkB,EA2DlB,IA3DkB,EA4DlB,aA5DkB,EA6DlB,IA7DkB,EA8DlB,aA9DkB,EA+DlB,GA/DkB,EAgElB,OAhEkB,EAiElB,WAjEkB,EAkElB,GAlEkB,EAmElB,iBAnEkB,EAoElB,IApEkB,EAqElB,cArEkB,EAsElB,IAtEkB,EAuElB,WAvEkB,EAwElB,IAxEkB,EAyElB,QAzEkB,EA0ElB,GA1EkB,EA2ElB,kBA3EkB,EA4ElB,IA5EkB,EA6ElB,YA7EkB,EA8ElB,IA9EkB,EA+ElB,kBA/EkB,EAgFlB,IAhFkB,CA/FX;AAiLT,YAAU,CACR,OADQ,EAER,MAFQ,EAGR,MAHQ,EAIR,uBAJQ,EAKR,MALQ,EAMR,QANQ,EAOR,MAPQ,EAQR,UARQ,EASR,MATQ,EAUR,SAVQ,EAWR,MAXQ,EAYR,UAZQ,EAaR,MAbQ,EAcR,OAdQ,EAeR,MAfQ,EAgBR,WAhBQ,EAiBR,MAjBQ,EAkBR,OAlBQ,EAmBR,MAnBQ,EAoBR,SApBQ,EAqBR,MArBQ,EAsBR,WAtBQ,EAuBR,MAvBQ,EAwBR,UAxBQ,EAyBR,MAzBQ,EA0BR,QA1BQ,EA2BR,MA3BQ,EA4BR,SA5BQ,EA6BR,MA7BQ,EA8BR,UA9BQ,EA+BR,MA/BQ,EAgCR,OAhCQ,EAiCR,MAjCQ,EAkCR,qBAlCQ,EAmCR,MAnCQ,EAoCR,QApCQ,EAqCR,MArCQ,EAsCR,oBAtCQ,EAuCR,MAvCQ,EAwCR,QAxCQ,EAyCR,MAzCQ,EA0CR,MA1CQ,EA2CR,UA3CQ,EA4CR,MA5CQ,EA6CR,QA7CQ,EA8CR,MA9CQ,EA+CR,QA/CQ,EAgDR,MAhDQ,EAiDR,MAjDQ,EAkDR,WAlDQ,EAmDR,MAnDQ,EAoDR,SApDQ,EAqDR,MArDQ,EAsDR,UAtDQ,EAuDR,MAvDQ,EAwDR,SAxDQ,EAyDR,MAzDQ,EA0DR,YA1DQ,EA2DR,MA3DQ,EA4DR,UA5DQ,EA6DR,MA7DQ,EA8DR,sBA9DQ,EA+DR,MA/DQ,EAgER,SAhEQ,EAiER,MAjEQ,EAkER,UAlEQ,EAmER,MAnEQ,EAoER,UApEQ,EAqER,MArEQ,EAsER,YAtEQ,EAuER,MAvEQ,EAwER,QAxEQ,EAyER,MAzEQ,EA0ER,SA1EQ,EA2ER,MA3EQ,EA4ER,OA5EQ,EA6ER,MA7EQ,EA8ER,UA9EQ,EA+ER,MA/EQ,EAgFR,UAhFQ,EAiFR,MAjFQ,EAkFR,KAlFQ,EAmFR,MAnFQ,EAoFR,QApFQ,EAqFR,MArFQ,EAsFR,SAtFQ,EAuFR,MAvFQ,EAwFR,QAxFQ,EAyFR,MAzFQ,EA0FR,QA1FQ,EA2FR,MA3FQ,EA4FR,UA5FQ,EA6FR,MA7FQ,EA8FR,kBA9FQ,EA+FR,MA/FQ,EAgGR,WAhGQ,EAiGR,MAjGQ,EAkGR,MAlGQ,EAmGR,uBAnGQ,EAoGR,MApGQ,EAqGR,wBArGQ,EAsGR,MAtGQ,EAuGR,UAvGQ,EAwGR,MAxGQ,EAyGR,QAzGQ,EA0GR,MA1GQ,EA2GR,SA3GQ,EA4GR,MA5GQ,EA6GR,UA7GQ,EA8GR,MA9GQ,EA+GR,UA/GQ,EAgHR,MAhHQ,EAiHR,YAjHQ,EAkHR,MAlHQ,EAmHR,OAnHQ,EAoHR,MApHQ,EAqHR,QArHQ,EAsHR,MAtHQ,EAuHR,WAvHQ,EAwHR,MAxHQ,EAyHR,KAzHQ,EA0HR,MA1HQ,EA2HR,OA3HQ,EA4HR,MA5HQ,EA6HR,QA7HQ,EA8HR,MA9HQ,EA+HR,OA/HQ,EAgIR,MAhIQ,EAiIR,UAjIQ,EAkIR,MAlIQ,EAmIR,UAnIQ,EAoIR,MApIQ,EAqIR,MArIQ,EAsIR,QAtIQ,EAuIR,MAvIQ,EAwIR,QAxIQ,EAyIR,MAzIQ,EA0IR,UA1IQ,EA2IR,MA3IQ,EA4IR,WA5IQ,EA6IR,MA7IQ,EA8IR,SA9IQ,EA+IR,MA/IQ,EAgJR,YAhJQ,EAiJR,MAjJQ,EAkJR,SAlJQ,EAmJR,MAnJQ,EAoJR,eApJQ,EAqJR,MArJQ,EAsJR,cAtJQ,EAuJR,MAvJQ,EAwJR,eAxJQ,EAyJR,MAzJQ,EA0JR,kBA1JQ,EA2JR,MA3JQ,EA4JR,sBA5JQ,EA6JR,MA7JQ,EA8JR,MA9JQ,EA+JR,MA/JQ,EAgKR,MAhKQ,EAiKR,WAjKQ,EAkKR,MAlKQ,EAmKR,KAnKQ,EAoKR,MApKQ,EAqKR,SArKQ,EAsKR,MAtKQ,EAuKR,SAvKQ,EAwKR,MAxKQ,EAyKR,WAzKQ,EA0KR,MA1KQ,EA2KR,aA3KQ,EA4KR,MA5KQ,EA6KR,MA7KQ,EA8KR,KA9KQ,EA+KR,MA/KQ,EAgLR,OAhLQ,EAiLR,MAjLQ,EAkLR,OAlLQ,EAmLR,MAnLQ,EAoLR,UApLQ,EAqLR,MArLQ,EAsLR,eAtLQ,EAuLR,MAvLQ,EAwLR,YAxLQ,EAyLR,MAzLQ,EA0LR,mBA1LQ,EA2LR,MA3LQ,EA4LR,YA5LQ,EA6LR,MA7LQ,EA8LR,aA9LQ,EA+LR,MA/LQ,EAgMR,mBAhMQ,EAiMR,MAjMQ,EAkMR,YAlMQ,EAmMR,MAnMQ,EAoMR,OApMQ,EAqMR,MArMQ,EAsMR,OAtMQ,EAuMR,MAvMQ,EAwMR,SAxMQ,EAyMR,MAzMQ,EA0MR,cA1MQ,EA2MR,MA3MQ,EA4MR,WA5MQ,EA6MR,MA7MQ,EA8MR,aA9MQ,EA+MR,MA/MQ,EAgNR,UAhNQ,EAiNR,MAjNQ,EAkNR,YAlNQ,EAmNR,MAnNQ,EAoNR,iBApNQ,EAqNR,MArNQ,EAsNR,QAtNQ,EAuNR,MAvNQ,EAwNR,OAxNQ,EAyNR,MAzNQ,EA0NR,WA1NQ,EA2NR,MA3NQ,EA4NR,YA5NQ,EA6NR,MA7NQ,EA8NR,SA9NQ,EA+NR,MA/NQ,EAgOR,SAhOQ,EAiOR,MAjOQ,EAkOR,SAlOQ,EAmOR,MAnOQ,EAoOR,aApOQ,EAqOR,MArOQ,EAsOR,SAtOQ,EAuOR,MAvOQ,EAwOR,cAxOQ,EAyOR,MAzOQ,EA0OR,SA1OQ,EA2OR,MA3OQ,EA4OR,WA5OQ,EA6OR,MA7OQ,EA8OR,cA9OQ,EA+OR,MA/OQ,EAgPR,QAhPQ,EAiPR,MAjPQ,EAkPR,SAlPQ,EAmPR,MAnPQ,EAoPR,UApPQ,EAqPR,MArPQ,EAsPR,QAtPQ,EAuPR,MAvPQ,EAwPR,UAxPQ,EAyPR,MAzPQ,EA0PR,UA1PQ,EA2PR,MA3PQ,EA4PR,OA5PQ,EA6PR,MA7PQ,EA8PR,OA9PQ,EA+PR,MA/PQ,EAgQR,QAhQQ,EAiQR,MAjQQ,EAkQR,QAlQQ,EAmQR,MAnQQ,EAoQR,QApQQ,EAqQR,MArQQ,EAsQR,MAtQQ,EAuQR,SAvQQ,EAwQR,MAxQQ,EAyQR,UAzQQ,EA0QR,MA1QQ,EA2QR,SA3QQ,EA4QR,MA5QQ,EA6QR,UA7QQ,EA8QR,MA9QQ,EA+QR,KA/QQ,EAgRR,MAhRQ,EAiRR,aAjRQ,EAkRR,MAlRQ,EAmRR,IAnRQ,EAoRR,MApRQ,EAqRR,kBArRQ,EAsRR,MAtRQ;AAjLD,CAAX;AA0cA9b,KAAK,CAACR,SAAN,CAAgBkD,IAAhB,CAAqBqZ,KAArB,CAA2BD,IAAI,CAACE,KAAhC,EAAuCF,IAAI,CAACG,gBAA5C;AACAH,IAAI,CAACI,EAAL,GAAUJ,IAAI,CAACG,gBAAf;AACAH,IAAI,CAACK,EAAL,GAAUL,IAAI,CAACM,iBAAL,GAAyBN,IAAI,CAACO,GAAL,GAAWP,IAAI,CAACQ,MAAnD;AAEA,IAAIC,IAAI,GAAG9Y,MAAM,CAACjE,SAAlB;;AAEA,IAAIgd,qBAAqB,GAAG,SAASA,qBAAT,CAA+BrC,MAA/B,EAAuC;AACjE,OAAKA,MAAL,GAAcA,MAAd;AACA,OAAKsC,UAAL,GAAkB,SAAStC,MAAM,CAAC9f,OAAP,CAAe+G,WAAf,IAA8B,CAA9B,GAAkC,IAAlC,GAAyC,EAAlD,KAAyD+Y,MAAM,CAAC9f,OAAP,CAAe+G,WAAf,IAA8B,CAA9B,GAAkC,GAAlC,GAAwC,EAAjG,CAAlB;AACA,OAAKnC,MAAL,GAAc,EAAd;AACA,OAAKuX,KAAL,GAAa,EAAb;AACA,OAAK/V,KAAL,GAAa,CAAb;AACA,OAAKic,OAAL,GAAe,KAAf;AACA,OAAKC,OAAL,GAAe,KAAf;AACA,OAAK/jB,GAAL,GAAW,CAAX;AACA,OAAKgkB,YAAL,GAAoB,CAApB;AACA,OAAKC,eAAL,GAAuB,EAAvB;AACA,OAAKC,2BAAL,GAAmC,KAAnC;AACA,OAAKC,kBAAL,GAA0B,CAA1B;AACA,OAAKC,gBAAL,GAAwB,CAAxB;AACA,OAAKC,UAAL,GAAkB,EAAlB;AACA,OAAKC,kBAAL,GAA0B,EAA1B;AACD,CAhBD;;AAkBAV,qBAAqB,CAAChd,SAAtB,CAAgC2d,KAAhC,GAAwC,SAASA,KAAT,CAAgB1c,KAAhB,EAAuB8V,OAAvB,EAAgCC,KAAhC,EAAuC;AAC7E,MAAI4G,OAAO,GAAG5G,KAAK,CAACsC,OAAN,CAAc,GAAd,MAAuB,CAAC,CAAtC;AACA,OAAKrY,KAAL,GAAaA,KAAK,GAAG,CAArB;AACA,OAAKxB,MAAL,GAAcsX,OAAO,GAAG,EAAxB;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKkG,OAAL,GAAeU,OAAO,IAAI,KAAKjD,MAAL,CAAY9f,OAAZ,CAAoB+G,WAApB,IAAmC,CAA7D;AACA,OAAKub,OAAL,GAAeS,OAAO,IAAI,KAAKjD,MAAL,CAAY9f,OAAZ,CAAoB+G,WAApB,IAAmC,CAA7D;AACD,CAPD;;AASAob,qBAAqB,CAAChd,SAAtB,CAAgCiI,KAAhC,GAAwC,SAASA,KAAT,CAAgB0R,OAAhB,EAAyB;AAC/D,OAAKgB,MAAL,CAAYjS,gBAAZ,CAA6B,KAAKzH,KAAlC,EAA0C,kCAAmC,KAAKxB,MAAxC,GAAkD,KAAlD,GAA0Dka,OAApG;AACD,CAFD,C,CAIA;AACA;;;AACAqD,qBAAqB,CAAChd,SAAtB,CAAgC6d,EAAhC,GAAqC,SAASA,EAAT,CAAaxkB,CAAb,EAAgB;AACnD,MAAIykB,CAAC,GAAG,KAAKre,MAAb;AACA,MAAIse,CAAC,GAAGD,CAAC,CAACxkB,MAAV;;AACA,MAAID,CAAC,IAAI0kB,CAAT,EAAY;AACV,WAAO,CAAC,CAAR;AACD;;AACD,MAAIC,CAAC,GAAGF,CAAC,CAAC/T,UAAF,CAAa1Q,CAAb,CAAR;;AACA,MAAI,CAAC,KAAK6jB,OAAN,IAAiBc,CAAC,IAAI,MAAtB,IAAgCA,CAAC,IAAI,MAArC,IAA+C3kB,CAAC,GAAG,CAAJ,IAAS0kB,CAA5D,EAA+D;AAC7D,WAAOC,CAAP;AACD;;AACD,SAAO,CAACA,CAAC,IAAI,EAAN,IAAYF,CAAC,CAAC/T,UAAF,CAAa1Q,CAAC,GAAG,CAAjB,CAAZ,GAAkC,SAAzC;AACD,CAXD;;AAaA2jB,qBAAqB,CAAChd,SAAtB,CAAgCie,SAAhC,GAA4C,SAASA,SAAT,CAAoB5kB,CAApB,EAAuB;AACjE,MAAIykB,CAAC,GAAG,KAAKre,MAAb;AACA,MAAIse,CAAC,GAAGD,CAAC,CAACxkB,MAAV;;AACA,MAAID,CAAC,IAAI0kB,CAAT,EAAY;AACV,WAAOA,CAAP;AACD;;AACD,MAAIC,CAAC,GAAGF,CAAC,CAAC/T,UAAF,CAAa1Q,CAAb,CAAR;;AACA,MAAI,CAAC,KAAK6jB,OAAN,IAAiBc,CAAC,IAAI,MAAtB,IAAgCA,CAAC,IAAI,MAArC,IAA+C3kB,CAAC,GAAG,CAAJ,IAAS0kB,CAA5D,EAA+D;AAC7D,WAAO1kB,CAAC,GAAG,CAAX;AACD;;AACD,SAAOA,CAAC,GAAG,CAAX;AACD,CAXD;;AAaA2jB,qBAAqB,CAAChd,SAAtB,CAAgCke,OAAhC,GAA0C,SAASA,OAAT,GAAoB;AAC5D,SAAO,KAAKL,EAAL,CAAQ,KAAKzkB,GAAb,CAAP;AACD,CAFD;;AAIA4jB,qBAAqB,CAAChd,SAAtB,CAAgCme,SAAhC,GAA4C,SAASA,SAAT,GAAsB;AAChE,SAAO,KAAKN,EAAL,CAAQ,KAAKI,SAAL,CAAe,KAAK7kB,GAApB,CAAR,CAAP;AACD,CAFD;;AAIA4jB,qBAAqB,CAAChd,SAAtB,CAAgCoe,OAAhC,GAA0C,SAASA,OAAT,GAAoB;AAC5D,OAAKhlB,GAAL,GAAW,KAAK6kB,SAAL,CAAe,KAAK7kB,GAApB,CAAX;AACD,CAFD;;AAIA4jB,qBAAqB,CAAChd,SAAtB,CAAgCoH,GAAhC,GAAsC,SAASA,GAAT,CAAciX,EAAd,EAAkB;AACtD,MAAI,KAAKH,OAAL,OAAmBG,EAAvB,EAA2B;AACzB,SAAKD,OAAL;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAND;;AAQA,SAASE,mBAAT,CAA6BD,EAA7B,EAAiC;AAC/B,MAAIA,EAAE,IAAI,MAAV,EAAkB;AAAE,WAAO3kB,MAAM,CAACC,YAAP,CAAoB0kB,EAApB,CAAP;AAAgC;;AACpDA,EAAAA,EAAE,IAAI,OAAN;AACA,SAAO3kB,MAAM,CAACC,YAAP,CAAoB,CAAC0kB,EAAE,IAAI,EAAP,IAAa,MAAjC,EAAyC,CAACA,EAAE,GAAG,MAAN,IAAgB,MAAzD,CAAP;AACD;AAED;;;;;;;;AAMAtB,IAAI,CAACwB,mBAAL,GAA2B,UAASC,KAAT,EAAgB;AACzC,MAAI9X,MAAM,GAAG,IAAb;AAEA,MAAIuW,UAAU,GAAGuB,KAAK,CAACvB,UAAvB;AACA,MAAIjG,KAAK,GAAGwH,KAAK,CAACxH,KAAlB;;AAEA,OAAK,IAAI3d,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2d,KAAK,CAAC1d,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIolB,IAAI,GAAGzH,KAAK,CAAC9M,MAAN,CAAa7Q,CAAb,CAAX;;AACA,QAAI4jB,UAAU,CAAC3D,OAAX,CAAmBmF,IAAnB,MAA6B,CAAC,CAAlC,EAAqC;AACnC/X,MAAAA,MAAM,CAACuB,KAAP,CAAauW,KAAK,CAACvd,KAAnB,EAA0B,iCAA1B;AACD;;AACD,QAAI+V,KAAK,CAACsC,OAAN,CAAcmF,IAAd,EAAoBplB,CAAC,GAAG,CAAxB,IAA6B,CAAC,CAAlC,EAAqC;AACnCqN,MAAAA,MAAM,CAACuB,KAAP,CAAauW,KAAK,CAACvd,KAAnB,EAA0B,mCAA1B;AACD;AACF;AACF,CAfD;AAiBA;;;;;;;;AAMA8b,IAAI,CAAC2B,qBAAL,GAA6B,UAASF,KAAT,EAAgB;AAC3C,OAAKG,cAAL,CAAoBH,KAApB,EAD2C,CAG3C;AACA;AACA;AACA;AACA;;AACA,MAAI,CAACA,KAAK,CAACrB,OAAP,IAAkB,KAAKtiB,OAAL,CAAa+G,WAAb,IAA4B,CAA9C,IAAmD4c,KAAK,CAACf,UAAN,CAAiBnkB,MAAjB,GAA0B,CAAjF,EAAoF;AAClFklB,IAAAA,KAAK,CAACrB,OAAN,GAAgB,IAAhB;AACA,SAAKwB,cAAL,CAAoBH,KAApB;AACD;AACF,CAZD,C,CAcA;;;AACAzB,IAAI,CAAC4B,cAAL,GAAsB,UAASH,KAAT,EAAgB;AACpCA,EAAAA,KAAK,CAACplB,GAAN,GAAY,CAAZ;AACAolB,EAAAA,KAAK,CAACpB,YAAN,GAAqB,CAArB;AACAoB,EAAAA,KAAK,CAACnB,eAAN,GAAwB,EAAxB;AACAmB,EAAAA,KAAK,CAAClB,2BAAN,GAAoC,KAApC;AACAkB,EAAAA,KAAK,CAACjB,kBAAN,GAA2B,CAA3B;AACAiB,EAAAA,KAAK,CAAChB,gBAAN,GAAyB,CAAzB;AACAgB,EAAAA,KAAK,CAACf,UAAN,CAAiBnkB,MAAjB,GAA0B,CAA1B;AACAklB,EAAAA,KAAK,CAACd,kBAAN,CAAyBpkB,MAAzB,GAAkC,CAAlC;AAEA,OAAKslB,kBAAL,CAAwBJ,KAAxB;;AAEA,MAAIA,KAAK,CAACplB,GAAN,KAAcolB,KAAK,CAAC/e,MAAN,CAAanG,MAA/B,EAAuC;AACrC;AACA,QAAIklB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAAJ,EAA6B;AAC3BoX,MAAAA,KAAK,CAACvW,KAAN,CAAY,eAAZ;AACD;;AACD,QAAIuW,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,SAA2BoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAA/B,EAAwD;AACtDoX,MAAAA,KAAK,CAACvW,KAAN,CAAY,0BAAZ;AACD;AACF;;AACD,MAAIuW,KAAK,CAAChB,gBAAN,GAAyBgB,KAAK,CAACjB,kBAAnC,EAAuD;AACrDiB,IAAAA,KAAK,CAACvW,KAAN,CAAY,gBAAZ;AACD;;AACD,OAAK,IAAI5O,CAAC,GAAG,CAAR,EAAWyU,IAAI,GAAG0Q,KAAK,CAACd,kBAA7B,EAAiDrkB,CAAC,GAAGyU,IAAI,CAACxU,MAA1D,EAAkED,CAAC,IAAI,CAAvE,EAA0E;AACxE,QAAIoB,IAAI,GAAGqT,IAAI,CAACzU,CAAD,CAAf;;AAEA,QAAImlB,KAAK,CAACf,UAAN,CAAiBnE,OAAjB,CAAyB7e,IAAzB,MAAmC,CAAC,CAAxC,EAA2C;AACzC+jB,MAAAA,KAAK,CAACvW,KAAN,CAAY,kCAAZ;AACD;AACF;AACF,CA/BD,C,CAiCA;;;AACA8U,IAAI,CAAC6B,kBAAL,GAA0B,UAASJ,KAAT,EAAgB;AACxC,MAAI9X,MAAM,GAAG,IAAb;AAEA,OAAKmY,kBAAL,CAAwBL,KAAxB;;AACA,SAAOA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAP,EAAgC;AAC9BV,IAAAA,MAAM,CAACmY,kBAAP,CAA0BL,KAA1B;AACD,GANuC,CAQxC;;;AACA,MAAI,KAAKM,oBAAL,CAA0BN,KAA1B,EAAiC,IAAjC,CAAJ,EAA4C;AAC1CA,IAAAA,KAAK,CAACvW,KAAN,CAAY,mBAAZ;AACD;;AACD,MAAIuW,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3BoX,IAAAA,KAAK,CAACvW,KAAN,CAAY,0BAAZ;AACD;AACF,CAfD,C,CAiBA;;;AACA8U,IAAI,CAAC8B,kBAAL,GAA0B,UAASL,KAAT,EAAgB;AACxC,SAAOA,KAAK,CAACplB,GAAN,GAAYolB,KAAK,CAAC/e,MAAN,CAAanG,MAAzB,IAAmC,KAAKylB,cAAL,CAAoBP,KAApB,CAA1C,EACE,CAAI;AACP,CAHD,C,CAKA;;;AACAzB,IAAI,CAACgC,cAAL,GAAsB,UAASP,KAAT,EAAgB;AACpC,MAAI,KAAKQ,mBAAL,CAAyBR,KAAzB,CAAJ,EAAqC;AACnC;AACA;AACA;AACA,QAAIA,KAAK,CAAClB,2BAAN,IAAqC,KAAKwB,oBAAL,CAA0BN,KAA1B,CAAzC,EAA2E;AACzE;AACA,UAAIA,KAAK,CAACtB,OAAV,EAAmB;AACjBsB,QAAAA,KAAK,CAACvW,KAAN,CAAY,oBAAZ;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAED,MAAIuW,KAAK,CAACtB,OAAN,GAAgB,KAAK+B,cAAL,CAAoBT,KAApB,CAAhB,GAA6C,KAAKU,sBAAL,CAA4BV,KAA5B,CAAjD,EAAqF;AACnF,SAAKM,oBAAL,CAA0BN,KAA1B;AACA,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CApBD,C,CAsBA;;;AACAzB,IAAI,CAACiC,mBAAL,GAA2B,UAASR,KAAT,EAAgB;AACzC,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;AACAolB,EAAAA,KAAK,CAAClB,2BAAN,GAAoC,KAApC,CAFyC,CAIzC;;AACA,MAAIkB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,OAA2BoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAA/B,EAAwD;AACtD,WAAO,IAAP;AACD,GAPwC,CASzC;;;AACA,MAAIoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAIoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,SAA2BoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAA/B,EAAwD;AACtD,aAAO,IAAP;AACD;;AACDoX,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD,GAfwC,CAiBzC;;;AACA,MAAIud,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,OAA2BoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAA/B,EAAwD;AACtD,QAAI+X,UAAU,GAAG,KAAjB;;AACA,QAAI,KAAKtkB,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjCud,MAAAA,UAAU,GAAGX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,OAAb;AACD;;AACD,QAAIoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,SAA2BoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAA/B,EAAwD;AACtD,WAAKwX,kBAAL,CAAwBJ,KAAxB;;AACA,UAAI,CAACA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,OAAL,EAA8B;AAC5BoX,QAAAA,KAAK,CAACvW,KAAN,CAAY,oBAAZ;AACD;;AACDuW,MAAAA,KAAK,CAAClB,2BAAN,GAAoC,CAAC6B,UAArC;AACA,aAAO,IAAP;AACD;AACF;;AAEDX,EAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACA,SAAO,KAAP;AACD,CAnCD,C,CAqCA;;;AACA8b,IAAI,CAAC+B,oBAAL,GAA4B,UAASN,KAAT,EAAgBY,OAAhB,EAAyB;AACnD,MAAKA,OAAO,KAAK,KAAK,CAAtB,EAA0BA,OAAO,GAAG,KAAV;;AAE1B,MAAI,KAAKC,0BAAL,CAAgCb,KAAhC,EAAuCY,OAAvC,CAAJ,EAAqD;AACnDZ,IAAAA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CARD,C,CAUA;;;AACA2V,IAAI,CAACsC,0BAAL,GAAkC,UAASb,KAAT,EAAgBY,OAAhB,EAAyB;AACzD,SACEZ,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,OACAoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GADA,IAEAoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAFA,IAGA,KAAKkY,0BAAL,CAAgCd,KAAhC,EAAuCY,OAAvC,CAJF;AAMD,CAPD;;AAQArC,IAAI,CAACuC,0BAAL,GAAkC,UAASd,KAAT,EAAgBY,OAAhB,EAAyB;AACzD,MAAIne,KAAK,GAAGud,KAAK,CAACplB,GAAlB;;AACA,MAAIolB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAImY,GAAG,GAAG,CAAV;AAAA,QAAaC,GAAG,GAAG,CAAC,CAApB;;AACA,QAAI,KAAKC,uBAAL,CAA6BjB,KAA7B,CAAJ,EAAyC;AACvCe,MAAAA,GAAG,GAAGf,KAAK,CAACpB,YAAZ;;AACA,UAAIoB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,WAA2B,KAAKqY,uBAAL,CAA6BjB,KAA7B,CAA/B,EAAoE;AAClEgB,QAAAA,GAAG,GAAGhB,KAAK,CAACpB,YAAZ;AACD;;AACD,UAAIoB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,OAAJ,EAA6B;AAC3B;AACA,YAAIoY,GAAG,KAAK,CAAC,CAAT,IAAcA,GAAG,GAAGD,GAApB,IAA2B,CAACH,OAAhC,EAAyC;AACvCZ,UAAAA,KAAK,CAACvW,KAAN,CAAY,uCAAZ;AACD;;AACD,eAAO,IAAP;AACD;AACF;;AACD,QAAIuW,KAAK,CAACtB,OAAN,IAAiB,CAACkC,OAAtB,EAA+B;AAC7BZ,MAAAA,KAAK,CAACvW,KAAN,CAAY,uBAAZ;AACD;;AACDuW,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD;;AACD,SAAO,KAAP;AACD,CAvBD,C,CAyBA;;;AACA8b,IAAI,CAACkC,cAAL,GAAsB,UAAST,KAAT,EAAgB;AACpC,SACE,KAAKkB,2BAAL,CAAiClB,KAAjC,KACAA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GADA,IAEA,KAAKuY,kCAAL,CAAwCnB,KAAxC,CAFA,IAGA,KAAKoB,wBAAL,CAA8BpB,KAA9B,CAHA,IAIA,KAAKqB,0BAAL,CAAgCrB,KAAhC,CAJA,IAKA,KAAKsB,wBAAL,CAA8BtB,KAA9B,CANF;AAQD,CATD;;AAUAzB,IAAI,CAAC4C,kCAAL,GAA0C,UAASnB,KAAT,EAAgB;AACxD,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;;AACA,MAAIolB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAI,KAAK2Y,oBAAL,CAA0BvB,KAA1B,CAAJ,EAAsC;AACpC,aAAO,IAAP;AACD;;AACDA,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD;;AACD,SAAO,KAAP;AACD,CATD;;AAUA8b,IAAI,CAAC8C,0BAAL,GAAkC,UAASrB,KAAT,EAAgB;AAChD,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;;AACA,MAAIolB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAIoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,SAA2BoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAA/B,EAAwD;AACtD,WAAKwX,kBAAL,CAAwBJ,KAAxB;;AACA,UAAIA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,OAAJ,EAA6B;AAC3B,eAAO,IAAP;AACD;;AACDoX,MAAAA,KAAK,CAACvW,KAAN,CAAY,oBAAZ;AACD;;AACDuW,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD;;AACD,SAAO,KAAP;AACD,CAbD;;AAcA8b,IAAI,CAAC+C,wBAAL,GAAgC,UAAStB,KAAT,EAAgB;AAC9C,MAAIA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAI,KAAKvM,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjC,WAAKoe,qBAAL,CAA2BxB,KAA3B;AACD,KAFD,MAEO,IAAIA,KAAK,CAACN,OAAN,OAAoB;AAAK;AAA7B,MAAsC;AAC3CM,QAAAA,KAAK,CAACvW,KAAN,CAAY,eAAZ;AACD;;AACD,SAAK2W,kBAAL,CAAwBJ,KAAxB;;AACA,QAAIA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAAJ,EAA6B;AAC3BoX,MAAAA,KAAK,CAACjB,kBAAN,IAA4B,CAA5B;AACA,aAAO,IAAP;AACD;;AACDiB,IAAAA,KAAK,CAACvW,KAAN,CAAY,oBAAZ;AACD;;AACD,SAAO,KAAP;AACD,CAfD,C,CAiBA;;;AACA8U,IAAI,CAACmC,sBAAL,GAA8B,UAASV,KAAT,EAAgB;AAC5C,SACEA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,OACA,KAAKuY,kCAAL,CAAwCnB,KAAxC,CADA,IAEA,KAAKoB,wBAAL,CAA8BpB,KAA9B,CAFA,IAGA,KAAKqB,0BAAL,CAAgCrB,KAAhC,CAHA,IAIA,KAAKsB,wBAAL,CAA8BtB,KAA9B,CAJA,IAKA,KAAKyB,iCAAL,CAAuCzB,KAAvC,CALA,IAMA,KAAK0B,kCAAL,CAAwC1B,KAAxC,CAPF;AASD,CAVD,C,CAYA;;;AACAzB,IAAI,CAACkD,iCAAL,GAAyC,UAASzB,KAAT,EAAgB;AACvD,MAAI,KAAKc,0BAAL,CAAgCd,KAAhC,EAAuC,IAAvC,CAAJ,EAAkD;AAChDA,IAAAA,KAAK,CAACvW,KAAN,CAAY,mBAAZ;AACD;;AACD,SAAO,KAAP;AACD,CALD,C,CAOA;;;AACA8U,IAAI,CAACoD,yBAAL,GAAiC,UAAS3B,KAAT,EAAgB;AAC/C,MAAIH,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,MAAIkC,iBAAiB,CAAC/B,EAAD,CAArB,EAA2B;AACzBG,IAAAA,KAAK,CAACpB,YAAN,GAAqBiB,EAArB;AACAG,IAAAA,KAAK,CAACJ,OAAN;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CARD;;AASA,SAASgC,iBAAT,CAA2B/B,EAA3B,EAA+B;AAC7B,SACEA,EAAE,KAAK;AAAK;AAAZ,KACAA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AADjC,KAEAA,EAAE,KAAK;AAAK;AAFZ,KAGAA,EAAE,KAAK;AAAK;AAHZ,KAIAA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AAJjC,KAKAA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AANnC;AAQD,C,CAED;AACA;;;AACAtB,IAAI,CAAC2C,2BAAL,GAAmC,UAASlB,KAAT,EAAgB;AACjD,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;AACA,MAAIilB,EAAE,GAAG,CAAT;;AACA,SAAO,CAACA,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAN,MAA2B,CAAC,CAA5B,IAAiC,CAACkC,iBAAiB,CAAC/B,EAAD,CAA1D,EAAgE;AAC9DG,IAAAA,KAAK,CAACJ,OAAN;AACD;;AACD,SAAOI,KAAK,CAACplB,GAAN,KAAc6H,KAArB;AACD,CAPD,C,CASA;;;AACA8b,IAAI,CAACmD,kCAAL,GAA0C,UAAS1B,KAAT,EAAgB;AACxD,MAAIH,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,MACEG,EAAE,KAAK,CAAC,CAAR,IACAA,EAAE,KAAK;AAAK;AADZ,KAEA,EAAEA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AAAnC,GAFA,IAGAA,EAAE,KAAK;AAAK;AAHZ,KAIAA,EAAE,KAAK;AAAK;AAJZ,KAKAA,EAAE,KAAK;AAAK;AALZ,KAMAA,EAAE,KAAK;AAAK;AANZ,KAOAA,EAAE,KAAK;AAAK;AARd,IASE;AACAG,MAAAA,KAAK,CAACJ,OAAN;AACA,aAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAhBD,C,CAkBA;AACA;AACA;;;AACArB,IAAI,CAACiD,qBAAL,GAA6B,UAASxB,KAAT,EAAgB;AAC3C,MAAIA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAI,KAAKiZ,mBAAL,CAAyB7B,KAAzB,CAAJ,EAAqC;AACnC,UAAIA,KAAK,CAACf,UAAN,CAAiBnE,OAAjB,CAAyBkF,KAAK,CAACnB,eAA/B,MAAoD,CAAC,CAAzD,EAA4D;AAC1DmB,QAAAA,KAAK,CAACvW,KAAN,CAAY,8BAAZ;AACD;;AACDuW,MAAAA,KAAK,CAACf,UAAN,CAAiBva,IAAjB,CAAsBsb,KAAK,CAACnB,eAA5B;AACA;AACD;;AACDmB,IAAAA,KAAK,CAACvW,KAAN,CAAY,eAAZ;AACD;AACF,CAXD,C,CAaA;AACA;AACA;;;AACA8U,IAAI,CAACsD,mBAAL,GAA2B,UAAS7B,KAAT,EAAgB;AACzCA,EAAAA,KAAK,CAACnB,eAAN,GAAwB,EAAxB;;AACA,MAAImB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAI,KAAKkZ,8BAAL,CAAoC9B,KAApC,KAA8CA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAAlD,EAA2E;AACzE,aAAO,IAAP;AACD;;AACDoX,IAAAA,KAAK,CAACvW,KAAN,CAAY,4BAAZ;AACD;;AACD,SAAO,KAAP;AACD,CATD,C,CAWA;AACA;AACA;AACA;;;AACA8U,IAAI,CAACuD,8BAAL,GAAsC,UAAS9B,KAAT,EAAgB;AACpDA,EAAAA,KAAK,CAACnB,eAAN,GAAwB,EAAxB;;AACA,MAAI,KAAKkD,+BAAL,CAAqC/B,KAArC,CAAJ,EAAiD;AAC/CA,IAAAA,KAAK,CAACnB,eAAN,IAAyBiB,mBAAmB,CAACE,KAAK,CAACpB,YAAP,CAA5C;;AACA,WAAO,KAAKoD,8BAAL,CAAoChC,KAApC,CAAP,EAAmD;AACjDA,MAAAA,KAAK,CAACnB,eAAN,IAAyBiB,mBAAmB,CAACE,KAAK,CAACpB,YAAP,CAA5C;AACD;;AACD,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAVD,C,CAYA;AACA;AACA;AACA;AACA;;;AACAL,IAAI,CAACwD,+BAAL,GAAuC,UAAS/B,KAAT,EAAgB;AACrD,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;AACA,MAAIilB,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;AACAM,EAAAA,KAAK,CAACJ,OAAN;;AAEA,MAAIC,EAAE,KAAK;AAAK;AAAZ,KAAuB,KAAKoC,qCAAL,CAA2CjC,KAA3C,CAA3B,EAA8E;AAC5EH,IAAAA,EAAE,GAAGG,KAAK,CAACpB,YAAX;AACD;;AACD,MAAIsD,uBAAuB,CAACrC,EAAD,CAA3B,EAAiC;AAC/BG,IAAAA,KAAK,CAACpB,YAAN,GAAqBiB,EAArB;AACA,WAAO,IAAP;AACD;;AAEDG,EAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACA,SAAO,KAAP;AACD,CAfD;;AAgBA,SAASyf,uBAAT,CAAiCrC,EAAjC,EAAqC;AACnC,SAAO9kB,iBAAiB,CAAC8kB,EAAD,EAAK,IAAL,CAAjB,IAA+BA,EAAE,KAAK;AAAK;AAA3C,KAAsDA,EAAE,KAAK,IAApE;AAAyE;AAC1E,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAtB,IAAI,CAACyD,8BAAL,GAAsC,UAAShC,KAAT,EAAgB;AACpD,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;AACA,MAAIilB,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;AACAM,EAAAA,KAAK,CAACJ,OAAN;;AAEA,MAAIC,EAAE,KAAK;AAAK;AAAZ,KAAuB,KAAKoC,qCAAL,CAA2CjC,KAA3C,CAA3B,EAA8E;AAC5EH,IAAAA,EAAE,GAAGG,KAAK,CAACpB,YAAX;AACD;;AACD,MAAIuD,sBAAsB,CAACtC,EAAD,CAA1B,EAAgC;AAC9BG,IAAAA,KAAK,CAACpB,YAAN,GAAqBiB,EAArB;AACA,WAAO,IAAP;AACD;;AAEDG,EAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACA,SAAO,KAAP;AACD,CAfD;;AAgBA,SAAS0f,sBAAT,CAAgCtC,EAAhC,EAAoC;AAClC,SAAOzkB,gBAAgB,CAACykB,EAAD,EAAK,IAAL,CAAhB,IAA8BA,EAAE,KAAK;AAAK;AAA1C,KAAqDA,EAAE,KAAK;AAAK;AAAjE,KAA4EA,EAAE,KAAK;AAAO;AAA1F,KAA0GA,EAAE,KAAK,MAAxH;AAA+H;AAChI,C,CAED;;;AACAtB,IAAI,CAACgD,oBAAL,GAA4B,UAASvB,KAAT,EAAgB;AAC1C,MACE,KAAKoC,uBAAL,CAA6BpC,KAA7B,KACA,KAAKqC,8BAAL,CAAoCrC,KAApC,CADA,IAEA,KAAKsC,yBAAL,CAA+BtC,KAA/B,CAFA,IAGCA,KAAK,CAACrB,OAAN,IAAiB,KAAK4D,oBAAL,CAA0BvC,KAA1B,CAJpB,EAKE;AACA,WAAO,IAAP;AACD;;AACD,MAAIA,KAAK,CAACtB,OAAV,EAAmB;AACjB;AACA,QAAIsB,KAAK,CAACN,OAAN,OAAoB;AAAK;AAA7B,MAAsC;AACpCM,QAAAA,KAAK,CAACvW,KAAN,CAAY,wBAAZ;AACD;;AACDuW,IAAAA,KAAK,CAACvW,KAAN,CAAY,gBAAZ;AACD;;AACD,SAAO,KAAP;AACD,CAjBD;;AAkBA8U,IAAI,CAAC6D,uBAAL,GAA+B,UAASpC,KAAT,EAAgB;AAC7C,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;;AACA,MAAI,KAAK4nB,uBAAL,CAA6BxC,KAA7B,CAAJ,EAAyC;AACvC,QAAI1d,CAAC,GAAG0d,KAAK,CAACpB,YAAd;;AACA,QAAIoB,KAAK,CAACtB,OAAV,EAAmB;AACjB;AACA,UAAIpc,CAAC,GAAG0d,KAAK,CAAChB,gBAAd,EAAgC;AAC9BgB,QAAAA,KAAK,CAAChB,gBAAN,GAAyB1c,CAAzB;AACD;;AACD,aAAO,IAAP;AACD;;AACD,QAAIA,CAAC,IAAI0d,KAAK,CAACjB,kBAAf,EAAmC;AACjC,aAAO,IAAP;AACD;;AACDiB,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD;;AACD,SAAO,KAAP;AACD,CAjBD;;AAkBA8b,IAAI,CAACgE,oBAAL,GAA4B,UAASvC,KAAT,EAAgB;AAC1C,MAAIA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAI,KAAKiZ,mBAAL,CAAyB7B,KAAzB,CAAJ,EAAqC;AACnCA,MAAAA,KAAK,CAACd,kBAAN,CAAyBxa,IAAzB,CAA8Bsb,KAAK,CAACnB,eAApC;AACA,aAAO,IAAP;AACD;;AACDmB,IAAAA,KAAK,CAACvW,KAAN,CAAY,yBAAZ;AACD;;AACD,SAAO,KAAP;AACD,CATD,C,CAWA;;;AACA8U,IAAI,CAAC+D,yBAAL,GAAiC,UAAStC,KAAT,EAAgB;AAC/C,SACE,KAAKyC,uBAAL,CAA6BzC,KAA7B,KACA,KAAK0C,wBAAL,CAA8B1C,KAA9B,CADA,IAEA,KAAK2C,cAAL,CAAoB3C,KAApB,CAFA,IAGA,KAAK4C,2BAAL,CAAiC5C,KAAjC,CAHA,IAIA,KAAKiC,qCAAL,CAA2CjC,KAA3C,CAJA,IAKC,CAACA,KAAK,CAACtB,OAAP,IAAkB,KAAKmE,mCAAL,CAAyC7C,KAAzC,CALnB,IAMA,KAAK8C,wBAAL,CAA8B9C,KAA9B,CAPF;AASD,CAVD;;AAWAzB,IAAI,CAACmE,wBAAL,GAAgC,UAAS1C,KAAT,EAAgB;AAC9C,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;;AACA,MAAIolB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAI,KAAKma,uBAAL,CAA6B/C,KAA7B,CAAJ,EAAyC;AACvC,aAAO,IAAP;AACD;;AACDA,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD;;AACD,SAAO,KAAP;AACD,CATD;;AAUA8b,IAAI,CAACoE,cAAL,GAAsB,UAAS3C,KAAT,EAAgB;AACpC,MAAIA,KAAK,CAACN,OAAN,OAAoB;AAAK;AAAzB,KAAoC,CAACsD,cAAc,CAAChD,KAAK,CAACL,SAAN,EAAD,CAAvD,EAA4E;AAC1EK,IAAAA,KAAK,CAACpB,YAAN,GAAqB,CAArB;AACAoB,IAAAA,KAAK,CAACJ,OAAN;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAPD,C,CASA;;;AACArB,IAAI,CAACkE,uBAAL,GAA+B,UAASzC,KAAT,EAAgB;AAC7C,MAAIH,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,MAAIG,EAAE,KAAK;AAAK;AAAhB,IAAyB;AACvBG,MAAAA,KAAK,CAACpB,YAAN,GAAqB,IAArB;AAA2B;;AAC3BoB,MAAAA,KAAK,CAACJ,OAAN;AACA,aAAO,IAAP;AACD;;AACD,MAAIC,EAAE,KAAK;AAAK;AAAhB,IAAyB;AACvBG,MAAAA,KAAK,CAACpB,YAAN,GAAqB,IAArB;AAA2B;;AAC3BoB,MAAAA,KAAK,CAACJ,OAAN;AACA,aAAO,IAAP;AACD;;AACD,MAAIC,EAAE,KAAK;AAAK;AAAhB,IAAyB;AACvBG,MAAAA,KAAK,CAACpB,YAAN,GAAqB,IAArB;AAA2B;;AAC3BoB,MAAAA,KAAK,CAACJ,OAAN;AACA,aAAO,IAAP;AACD;;AACD,MAAIC,EAAE,KAAK;AAAK;AAAhB,IAAyB;AACvBG,MAAAA,KAAK,CAACpB,YAAN,GAAqB,IAArB;AAA2B;;AAC3BoB,MAAAA,KAAK,CAACJ,OAAN;AACA,aAAO,IAAP;AACD;;AACD,MAAIC,EAAE,KAAK;AAAK;AAAhB,IAAyB;AACvBG,MAAAA,KAAK,CAACpB,YAAN,GAAqB,IAArB;AAA2B;;AAC3BoB,MAAAA,KAAK,CAACJ,OAAN;AACA,aAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CA5BD,C,CA8BA;;;AACArB,IAAI,CAACwE,uBAAL,GAA+B,UAAS/C,KAAT,EAAgB;AAC7C,MAAIH,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,MAAIuD,eAAe,CAACpD,EAAD,CAAnB,EAAyB;AACvBG,IAAAA,KAAK,CAACpB,YAAN,GAAqBiB,EAAE,GAAG,IAA1B;AACAG,IAAAA,KAAK,CAACJ,OAAN;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CARD;;AASA,SAASqD,eAAT,CAAyBpD,EAAzB,EAA6B;AAC3B,SACGA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AAAlC,KACCA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AAFpC;AAID,C,CAED;;;AACAtB,IAAI,CAAC0D,qCAAL,GAA6C,UAASjC,KAAT,EAAgB;AAC3D,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;;AAEA,MAAIolB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAI,KAAKsa,wBAAL,CAA8BlD,KAA9B,EAAqC,CAArC,CAAJ,EAA6C;AAC3C,UAAImD,IAAI,GAAGnD,KAAK,CAACpB,YAAjB;;AACA,UAAIoB,KAAK,CAACtB,OAAN,IAAiByE,IAAI,IAAI,MAAzB,IAAmCA,IAAI,IAAI,MAA/C,EAAuD;AACrD,YAAIC,gBAAgB,GAAGpD,KAAK,CAACplB,GAA7B;;AACA,YAAIolB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,aAA2BoX,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,SAA3B,IAAsD,KAAKsa,wBAAL,CAA8BlD,KAA9B,EAAqC,CAArC,CAA1D,EAAmG;AACjG,cAAIqD,KAAK,GAAGrD,KAAK,CAACpB,YAAlB;;AACA,cAAIyE,KAAK,IAAI,MAAT,IAAmBA,KAAK,IAAI,MAAhC,EAAwC;AACtCrD,YAAAA,KAAK,CAACpB,YAAN,GAAqB,CAACuE,IAAI,GAAG,MAAR,IAAkB,KAAlB,IAA2BE,KAAK,GAAG,MAAnC,IAA6C,OAAlE;AACA,mBAAO,IAAP;AACD;AACF;;AACDrD,QAAAA,KAAK,CAACplB,GAAN,GAAYwoB,gBAAZ;AACApD,QAAAA,KAAK,CAACpB,YAAN,GAAqBuE,IAArB;AACD;;AACD,aAAO,IAAP;AACD;;AACD,QACEnD,KAAK,CAACtB,OAAN,IACAsB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KADA,IAEA,KAAK0a,mBAAL,CAAyBtD,KAAzB,CAFA,IAGAA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAHA,IAIA2a,cAAc,CAACvD,KAAK,CAACpB,YAAP,CALhB,EAME;AACA,aAAO,IAAP;AACD;;AACD,QAAIoB,KAAK,CAACtB,OAAV,EAAmB;AACjBsB,MAAAA,KAAK,CAACvW,KAAN,CAAY,wBAAZ;AACD;;AACDuW,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD;;AAED,SAAO,KAAP;AACD,CApCD;;AAqCA,SAAS8gB,cAAT,CAAwB1D,EAAxB,EAA4B;AAC1B,SAAOA,EAAE,IAAI,CAAN,IAAWA,EAAE,IAAI,QAAxB;AACD,C,CAED;;;AACAtB,IAAI,CAACuE,wBAAL,GAAgC,UAAS9C,KAAT,EAAgB;AAC9C,MAAIA,KAAK,CAACtB,OAAV,EAAmB;AACjB,QAAI,KAAKiD,yBAAL,CAA+B3B,KAA/B,CAAJ,EAA2C;AACzC,aAAO,IAAP;AACD;;AACD,QAAIA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAAJ,EAA6B;AAC3BoX,MAAAA,KAAK,CAACpB,YAAN,GAAqB,IAArB;AAA2B;;AAC3B,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAED,MAAIiB,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,MAAIG,EAAE,KAAK;AAAK;AAAZ,MAAwB,CAACG,KAAK,CAACrB,OAAP,IAAkBkB,EAAE,KAAK;AAAK;AAAtD,GAAJ,EAAoE;AAClEG,IAAAA,KAAK,CAACpB,YAAN,GAAqBiB,EAArB;AACAG,IAAAA,KAAK,CAACJ,OAAN;AACA,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CApBD,C,CAsBA;;;AACArB,IAAI,CAACiE,uBAAL,GAA+B,UAASxC,KAAT,EAAgB;AAC7CA,EAAAA,KAAK,CAACpB,YAAN,GAAqB,CAArB;AACA,MAAIiB,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,MAAIG,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AAArC,IAA8C;AAC5C,SAAG;AACDG,QAAAA,KAAK,CAACpB,YAAN,GAAqB,KAAKoB,KAAK,CAACpB,YAAX,IAA2BiB,EAAE,GAAG;AAAK;AAArC,SAArB;AACAG,QAAAA,KAAK,CAACJ,OAAN;AACD,OAHD,QAGS,CAACC,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAN,KAA0B;AAAK;AAA/B,SAA0CG,EAAE,IAAI;AAAK;AAH9D;;AAIA,aAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAXD,C,CAaA;;;AACAtB,IAAI,CAAC8D,8BAAL,GAAsC,UAASrC,KAAT,EAAgB;AACpD,MAAIH,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AAEA,MAAI8D,sBAAsB,CAAC3D,EAAD,CAA1B,EAAgC;AAC9BG,IAAAA,KAAK,CAACpB,YAAN,GAAqB,CAAC,CAAtB;AACAoB,IAAAA,KAAK,CAACJ,OAAN;AACA,WAAO,IAAP;AACD;;AAED,MACEI,KAAK,CAACtB,OAAN,IACA,KAAKriB,OAAL,CAAa+G,WAAb,IAA4B,CAD5B,KAECyc,EAAE,KAAK;AAAK;AAAZ,KAAuBA,EAAE,KAAK;AAAK;AAFpC,GADF,EAIE;AACAG,IAAAA,KAAK,CAACpB,YAAN,GAAqB,CAAC,CAAtB;AACAoB,IAAAA,KAAK,CAACJ,OAAN;;AACA,QACEI,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,SACA,KAAK6a,wCAAL,CAA8CzD,KAA9C,CADA,IAEAA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAHF,EAIE;AACA,aAAO,IAAP;AACD;;AACDoX,IAAAA,KAAK,CAACvW,KAAN,CAAY,uBAAZ;AACD;;AAED,SAAO,KAAP;AACD,CA3BD;;AA4BA,SAAS+Z,sBAAT,CAAgC3D,EAAhC,EAAoC;AAClC,SACEA,EAAE,KAAK;AAAK;AAAZ,KACAA,EAAE,KAAK;AAAK;AADZ,KAEAA,EAAE,KAAK;AAAK;AAFZ,KAGAA,EAAE,KAAK;AAAK;AAHZ,KAIAA,EAAE,KAAK;AAAK;AAJZ,KAKAA,EAAE,KAAK;AAAK;AANd;AAQD,C,CAED;AACA;AACA;;;AACAtB,IAAI,CAACkF,wCAAL,GAAgD,UAASzD,KAAT,EAAgB;AAC9D,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB,CAD8D,CAG9D;;AACA,MAAI,KAAK8oB,6BAAL,CAAmC1D,KAAnC,KAA6CA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAjD,EAA0E;AACxE,QAAI3M,IAAI,GAAG+jB,KAAK,CAACnB,eAAjB;;AACA,QAAI,KAAK8E,8BAAL,CAAoC3D,KAApC,CAAJ,EAAgD;AAC9C,UAAI7a,KAAK,GAAG6a,KAAK,CAACnB,eAAlB;AACA,WAAK+E,0CAAL,CAAgD5D,KAAhD,EAAuD/jB,IAAvD,EAA6DkJ,KAA7D;AACA,aAAO,IAAP;AACD;AACF;;AACD6a,EAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ,CAZ8D,CAc9D;;AACA,MAAI,KAAKohB,wCAAL,CAA8C7D,KAA9C,CAAJ,EAA0D;AACxD,QAAI8D,WAAW,GAAG9D,KAAK,CAACnB,eAAxB;AACA,SAAKkF,yCAAL,CAA+C/D,KAA/C,EAAsD8D,WAAtD;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CArBD;;AAsBAvF,IAAI,CAACqF,0CAAL,GAAkD,UAAS5D,KAAT,EAAgB/jB,IAAhB,EAAsBkJ,KAAtB,EAA6B;AAC7E,MAAI,CAAC2Y,IAAI,CAACrc,cAAL,CAAoBxF,IAApB,CAAD,IAA8B6hB,IAAI,CAAC7hB,IAAD,CAAJ,CAAW6e,OAAX,CAAmB3V,KAAnB,MAA8B,CAAC,CAAjE,EAAoE;AAClE6a,IAAAA,KAAK,CAACvW,KAAN,CAAY,uBAAZ;AACD;AACF,CAJD;;AAKA8U,IAAI,CAACwF,yCAAL,GAAiD,UAAS/D,KAAT,EAAgB8D,WAAhB,EAA6B;AAC5E,MAAIhG,IAAI,CAACE,KAAL,CAAWlD,OAAX,CAAmBgJ,WAAnB,MAAoC,CAAC,CAAzC,EAA4C;AAC1C9D,IAAAA,KAAK,CAACvW,KAAN,CAAY,uBAAZ;AACD;AACF,CAJD,C,CAMA;AACA;;;AACA8U,IAAI,CAACmF,6BAAL,GAAqC,UAAS1D,KAAT,EAAgB;AACnD,MAAIH,EAAE,GAAG,CAAT;AACAG,EAAAA,KAAK,CAACnB,eAAN,GAAwB,EAAxB;;AACA,SAAOmF,8BAA8B,CAACnE,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAN,CAArC,EAA6D;AAC3DM,IAAAA,KAAK,CAACnB,eAAN,IAAyBiB,mBAAmB,CAACD,EAAD,CAA5C;AACAG,IAAAA,KAAK,CAACJ,OAAN;AACD;;AACD,SAAOI,KAAK,CAACnB,eAAN,KAA0B,EAAjC;AACD,CARD;;AASA,SAASmF,8BAAT,CAAwCnE,EAAxC,EAA4C;AAC1C,SAAOoD,eAAe,CAACpD,EAAD,CAAf,IAAuBA,EAAE,KAAK,IAArC;AAA0C;AAC3C,C,CAED;AACA;;;AACAtB,IAAI,CAACoF,8BAAL,GAAsC,UAAS3D,KAAT,EAAgB;AACpD,MAAIH,EAAE,GAAG,CAAT;AACAG,EAAAA,KAAK,CAACnB,eAAN,GAAwB,EAAxB;;AACA,SAAOoF,+BAA+B,CAACpE,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAN,CAAtC,EAA8D;AAC5DM,IAAAA,KAAK,CAACnB,eAAN,IAAyBiB,mBAAmB,CAACD,EAAD,CAA5C;AACAG,IAAAA,KAAK,CAACJ,OAAN;AACD;;AACD,SAAOI,KAAK,CAACnB,eAAN,KAA0B,EAAjC;AACD,CARD;;AASA,SAASoF,+BAAT,CAAyCpE,EAAzC,EAA6C;AAC3C,SAAOmE,8BAA8B,CAACnE,EAAD,CAA9B,IAAsCmD,cAAc,CAACnD,EAAD,CAA3D;AACD,C,CAED;AACA;;;AACAtB,IAAI,CAACsF,wCAAL,GAAgD,UAAS7D,KAAT,EAAgB;AAC9D,SAAO,KAAK2D,8BAAL,CAAoC3D,KAApC,CAAP;AACD,CAFD,C,CAIA;;;AACAzB,IAAI,CAAC6C,wBAAL,GAAgC,UAASpB,KAAT,EAAgB;AAC9C,MAAIA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3BoX,IAAAA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf;AACA,SAAKsb,kBAAL,CAAwBlE,KAAxB;;AACA,QAAIA,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,KAAJ,EAA6B;AAC3B,aAAO,IAAP;AACD,KAL0B,CAM3B;;;AACAoX,IAAAA,KAAK,CAACvW,KAAN,CAAY,8BAAZ;AACD;;AACD,SAAO,KAAP;AACD,CAXD,C,CAaA;AACA;AACA;;;AACA8U,IAAI,CAAC2F,kBAAL,GAA0B,UAASlE,KAAT,EAAgB;AACxC,MAAI9X,MAAM,GAAG,IAAb;;AAEA,SAAO,KAAKic,mBAAL,CAAyBnE,KAAzB,CAAP,EAAwC;AACtC,QAAIlQ,IAAI,GAAGkQ,KAAK,CAACpB,YAAjB;;AACA,QAAIoB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,SAA2BV,MAAM,CAACic,mBAAP,CAA2BnE,KAA3B,CAA/B,EAAkE;AAChE,UAAIjQ,KAAK,GAAGiQ,KAAK,CAACpB,YAAlB;;AACA,UAAIoB,KAAK,CAACtB,OAAN,KAAkB5O,IAAI,KAAK,CAAC,CAAV,IAAeC,KAAK,KAAK,CAAC,CAA5C,CAAJ,EAAoD;AAClDiQ,QAAAA,KAAK,CAACvW,KAAN,CAAY,yBAAZ;AACD;;AACD,UAAIqG,IAAI,KAAK,CAAC,CAAV,IAAeC,KAAK,KAAK,CAAC,CAA1B,IAA+BD,IAAI,GAAGC,KAA1C,EAAiD;AAC/CiQ,QAAAA,KAAK,CAACvW,KAAN,CAAY,uCAAZ;AACD;AACF;AACF;AACF,CAfD,C,CAiBA;AACA;;;AACA8U,IAAI,CAAC4F,mBAAL,GAA2B,UAASnE,KAAT,EAAgB;AACzC,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;;AAEA,MAAIolB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAI,KAAKwb,qBAAL,CAA2BpE,KAA3B,CAAJ,EAAuC;AACrC,aAAO,IAAP;AACD;;AACD,QAAIA,KAAK,CAACtB,OAAV,EAAmB;AACjB;AACA,UAAI2F,IAAI,GAAGrE,KAAK,CAACN,OAAN,EAAX;;AACA,UAAI2E,IAAI,KAAK;AAAK;AAAd,SAAyBC,YAAY,CAACD,IAAD,CAAzC,EAAiD;AAC/CrE,QAAAA,KAAK,CAACvW,KAAN,CAAY,sBAAZ;AACD;;AACDuW,MAAAA,KAAK,CAACvW,KAAN,CAAY,gBAAZ;AACD;;AACDuW,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD;;AAED,MAAIod,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,MAAIG,EAAE,KAAK;AAAK;AAAhB,IAAyB;AACvBG,MAAAA,KAAK,CAACpB,YAAN,GAAqBiB,EAArB;AACAG,MAAAA,KAAK,CAACJ,OAAN;AACA,aAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD,CA1BD,C,CA4BA;;;AACArB,IAAI,CAAC6F,qBAAL,GAA6B,UAASpE,KAAT,EAAgB;AAC3C,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;;AAEA,MAAIolB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3BoX,IAAAA,KAAK,CAACpB,YAAN,GAAqB,IAArB;AAA2B;;AAC3B,WAAO,IAAP;AACD;;AAED,MAAIoB,KAAK,CAACtB,OAAN,IAAiBsB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAArB,EAA8C;AAC5CoX,IAAAA,KAAK,CAACpB,YAAN,GAAqB,IAArB;AAA2B;;AAC3B,WAAO,IAAP;AACD;;AAED,MAAI,CAACoB,KAAK,CAACtB,OAAP,IAAkBsB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAtB,EAA+C;AAC7C,QAAI,KAAK2b,4BAAL,CAAkCvE,KAAlC,CAAJ,EAA8C;AAC5C,aAAO,IAAP;AACD;;AACDA,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD;;AAED,SACE,KAAK4f,8BAAL,CAAoCrC,KAApC,KACA,KAAKsC,yBAAL,CAA+BtC,KAA/B,CAFF;AAID,CAxBD,C,CA0BA;;;AACAzB,IAAI,CAACgG,4BAAL,GAAoC,UAASvE,KAAT,EAAgB;AAClD,MAAIH,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,MAAIsD,cAAc,CAACnD,EAAD,CAAd,IAAsBA,EAAE,KAAK;AAAK;AAAtC,IAA+C;AAC7CG,MAAAA,KAAK,CAACpB,YAAN,GAAqBiB,EAAE,GAAG,IAA1B;AACAG,MAAAA,KAAK,CAACJ,OAAN;AACA,aAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CARD,C,CAUA;;;AACArB,IAAI,CAACqE,2BAAL,GAAmC,UAAS5C,KAAT,EAAgB;AACjD,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;;AACA,MAAIolB,KAAK,CAACpX,GAAN,CAAU;AAAK;AAAf,GAAJ,EAA6B;AAC3B,QAAI,KAAKsa,wBAAL,CAA8BlD,KAA9B,EAAqC,CAArC,CAAJ,EAA6C;AAC3C,aAAO,IAAP;AACD;;AACD,QAAIA,KAAK,CAACtB,OAAV,EAAmB;AACjBsB,MAAAA,KAAK,CAACvW,KAAN,CAAY,gBAAZ;AACD;;AACDuW,IAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACD;;AACD,SAAO,KAAP;AACD,CAZD,C,CAcA;;;AACA8b,IAAI,CAAC0C,uBAAL,GAA+B,UAASjB,KAAT,EAAgB;AAC7C,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;AACA,MAAIilB,EAAE,GAAG,CAAT;AACAG,EAAAA,KAAK,CAACpB,YAAN,GAAqB,CAArB;;AACA,SAAOoE,cAAc,CAACnD,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAN,CAArB,EAA6C;AAC3CM,IAAAA,KAAK,CAACpB,YAAN,GAAqB,KAAKoB,KAAK,CAACpB,YAAX,IAA2BiB,EAAE,GAAG;AAAK;AAArC,KAArB;AACAG,IAAAA,KAAK,CAACJ,OAAN;AACD;;AACD,SAAOI,KAAK,CAACplB,GAAN,KAAc6H,KAArB;AACD,CATD;;AAUA,SAASugB,cAAT,CAAwBnD,EAAxB,EAA4B;AAC1B,SAAOA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI,IAAnC;AAAwC;AACzC,C,CAED;;;AACAtB,IAAI,CAAC+E,mBAAL,GAA2B,UAAStD,KAAT,EAAgB;AACzC,MAAIvd,KAAK,GAAGud,KAAK,CAACplB,GAAlB;AACA,MAAIilB,EAAE,GAAG,CAAT;AACAG,EAAAA,KAAK,CAACpB,YAAN,GAAqB,CAArB;;AACA,SAAO4F,UAAU,CAAC3E,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAN,CAAjB,EAAyC;AACvCM,IAAAA,KAAK,CAACpB,YAAN,GAAqB,KAAKoB,KAAK,CAACpB,YAAX,GAA0B6F,QAAQ,CAAC5E,EAAD,CAAvD;AACAG,IAAAA,KAAK,CAACJ,OAAN;AACD;;AACD,SAAOI,KAAK,CAACplB,GAAN,KAAc6H,KAArB;AACD,CATD;;AAUA,SAAS+hB,UAAT,CAAoB3E,EAApB,EAAwB;AACtB,SACGA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AAAlC,KACCA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AADlC,KAECA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AAHpC;AAKD;;AACD,SAAS4E,QAAT,CAAkB5E,EAAlB,EAAsB;AACpB,MAAIA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AAArC,IAA8C;AAC5C,aAAO,MAAMA,EAAE,GAAG;AAAK;AAAhB,OAAP;AACD;;AACD,MAAIA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI;AAAK;AAArC,IAA8C;AAC5C,aAAO,MAAMA,EAAE,GAAG;AAAK;AAAhB,OAAP;AACD;;AACD,SAAOA,EAAE,GAAG,IAAZ;AAAiB;AAClB,C,CAED;AACA;;;AACAtB,IAAI,CAACsE,mCAAL,GAA2C,UAAS7C,KAAT,EAAgB;AACzD,MAAI,KAAK0E,oBAAL,CAA0B1E,KAA1B,CAAJ,EAAsC;AACpC,QAAI2E,EAAE,GAAG3E,KAAK,CAACpB,YAAf;;AACA,QAAI,KAAK8F,oBAAL,CAA0B1E,KAA1B,CAAJ,EAAsC;AACpC,UAAI4E,EAAE,GAAG5E,KAAK,CAACpB,YAAf;;AACA,UAAI+F,EAAE,IAAI,CAAN,IAAW,KAAKD,oBAAL,CAA0B1E,KAA1B,CAAf,EAAiD;AAC/CA,QAAAA,KAAK,CAACpB,YAAN,GAAqB+F,EAAE,GAAG,EAAL,GAAUC,EAAE,GAAG,CAAf,GAAmB5E,KAAK,CAACpB,YAA9C;AACD,OAFD,MAEO;AACLoB,QAAAA,KAAK,CAACpB,YAAN,GAAqB+F,EAAE,GAAG,CAAL,GAASC,EAA9B;AACD;AACF,KAPD,MAOO;AACL5E,MAAAA,KAAK,CAACpB,YAAN,GAAqB+F,EAArB;AACD;;AACD,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAhBD,C,CAkBA;;;AACApG,IAAI,CAACmG,oBAAL,GAA4B,UAAS1E,KAAT,EAAgB;AAC1C,MAAIH,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,MAAI4E,YAAY,CAACzE,EAAD,CAAhB,EAAsB;AACpBG,IAAAA,KAAK,CAACpB,YAAN,GAAqBiB,EAAE,GAAG,IAA1B;AAAgC;;AAChCG,IAAAA,KAAK,CAACJ,OAAN;AACA,WAAO,IAAP;AACD;;AACDI,EAAAA,KAAK,CAACpB,YAAN,GAAqB,CAArB;AACA,SAAO,KAAP;AACD,CATD;;AAUA,SAAS0F,YAAT,CAAsBzE,EAAtB,EAA0B;AACxB,SAAOA,EAAE,IAAI;AAAK;AAAX,KAAsBA,EAAE,IAAI,IAAnC;AAAwC;AACzC,C,CAED;AACA;AACA;;;AACAtB,IAAI,CAAC2E,wBAAL,GAAgC,UAASlD,KAAT,EAAgBllB,MAAhB,EAAwB;AACtD,MAAI2H,KAAK,GAAGud,KAAK,CAACplB,GAAlB;AACAolB,EAAAA,KAAK,CAACpB,YAAN,GAAqB,CAArB;;AACA,OAAK,IAAI/jB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4B,EAAED,CAA9B,EAAiC;AAC/B,QAAIglB,EAAE,GAAGG,KAAK,CAACN,OAAN,EAAT;;AACA,QAAI,CAAC8E,UAAU,CAAC3E,EAAD,CAAf,EAAqB;AACnBG,MAAAA,KAAK,CAACplB,GAAN,GAAY6H,KAAZ;AACA,aAAO,KAAP;AACD;;AACDud,IAAAA,KAAK,CAACpB,YAAN,GAAqB,KAAKoB,KAAK,CAACpB,YAAX,GAA0B6F,QAAQ,CAAC5E,EAAD,CAAvD;AACAG,IAAAA,KAAK,CAACJ,OAAN;AACD;;AACD,SAAO,IAAP;AACD,CAbD,C,CAeA;AACA;AACA;;;AAEA,IAAIiF,KAAK,GAAG,SAASA,KAAT,CAAeriB,CAAf,EAAkB;AAC5B,OAAK0C,IAAL,GAAY1C,CAAC,CAAC0C,IAAd;AACA,OAAKC,KAAL,GAAa3C,CAAC,CAAC2C,KAAf;AACA,OAAK1C,KAAL,GAAaD,CAAC,CAACC,KAAf;AACA,OAAKC,GAAL,GAAWF,CAAC,CAACE,GAAb;;AACA,MAAIF,CAAC,CAACnG,OAAF,CAAUwH,SAAd,EACE;AAAE,SAAKuB,GAAL,GAAW,IAAI7C,cAAJ,CAAmBC,CAAnB,EAAsBA,CAAC,CAACuC,QAAxB,EAAkCvC,CAAC,CAACwC,MAApC,CAAX;AAAyD;;AAC7D,MAAIxC,CAAC,CAACnG,OAAF,CAAU2H,MAAd,EACE;AAAE,SAAKqB,KAAL,GAAa,CAAC7C,CAAC,CAACC,KAAH,EAAUD,CAAC,CAACE,GAAZ,CAAb;AAAgC;AACrC,CATD,C,CAWA;;;AAEA,IAAIoiB,IAAI,GAAGrf,MAAM,CAACjE,SAAlB,C,CAEA;;AAEAsjB,IAAI,CAACjc,IAAL,GAAY,YAAW;AACrB,MAAI,KAAKxM,OAAL,CAAayH,OAAjB,EACE;AAAE,SAAKzH,OAAL,CAAayH,OAAb,CAAqB,IAAI+gB,KAAJ,CAAU,IAAV,CAArB;AAAwC;;AAE5C,OAAKle,UAAL,GAAkB,KAAKjE,GAAvB;AACA,OAAKgE,YAAL,GAAoB,KAAKjE,KAAzB;AACA,OAAK+D,aAAL,GAAqB,KAAKxB,MAA1B;AACA,OAAKyB,eAAL,GAAuB,KAAK1B,QAA5B;AACA,OAAKyD,SAAL;AACD,CATD;;AAWAsc,IAAI,CAACC,QAAL,GAAgB,YAAW;AACzB,OAAKlc,IAAL;AACA,SAAO,IAAIgc,KAAJ,CAAU,IAAV,CAAP;AACD,CAHD,C,CAKA;;;AACA,IAAI,OAAOG,MAAP,KAAkB,WAAtB,EACE;AAAEF,EAAAA,IAAI,CAACE,MAAM,CAACC,QAAR,CAAJ,GAAwB,YAAW;AACnC,QAAI/c,MAAM,GAAG,IAAb;AAEA,WAAO;AACLW,MAAAA,IAAI,EAAE,YAAY;AAChB,YAAIpE,KAAK,GAAGyD,MAAM,CAAC6c,QAAP,EAAZ;AACA,eAAO;AACLG,UAAAA,IAAI,EAAEzgB,KAAK,CAACS,IAAN,KAAe5I,KAAK,CAACI,GADtB;AAELyI,UAAAA,KAAK,EAAEV;AAFF,SAAP;AAID;AAPI,KAAP;AASD,GAZC;AAYE,C,CAEN;AACA;;;AAEAqgB,IAAI,CAACrH,UAAL,GAAkB,YAAW;AAC3B,SAAO,KAAK7W,OAAL,CAAa,KAAKA,OAAL,CAAa9L,MAAb,GAAsB,CAAnC,CAAP;AACD,CAFD,C,CAIA;AACA;;;AAEAgqB,IAAI,CAACtc,SAAL,GAAiB,YAAW;AAC1B,MAAIiV,UAAU,GAAG,KAAKA,UAAL,EAAjB;;AACA,MAAI,CAACA,UAAD,IAAe,CAACA,UAAU,CAAClB,aAA/B,EAA8C;AAAE,SAAK4I,SAAL;AAAmB;;AAEnE,OAAK1iB,KAAL,GAAa,KAAK7H,GAAlB;;AACA,MAAI,KAAKyB,OAAL,CAAawH,SAAjB,EAA4B;AAAE,SAAKkB,QAAL,GAAgB,KAAKwB,WAAL,EAAhB;AAAqC;;AACnE,MAAI,KAAK3L,GAAL,IAAY,KAAKiI,KAAL,CAAW/H,MAA3B,EAAmC;AAAE,WAAO,KAAKsqB,WAAL,CAAiB9oB,KAAK,CAACI,GAAvB,CAAP;AAAoC;;AAEzE,MAAI+gB,UAAU,CAACjB,QAAf,EAAyB;AAAE,WAAOiB,UAAU,CAACjB,QAAX,CAAoB,IAApB,CAAP;AAAkC,GAA7D,MACK;AAAE,SAAK6I,SAAL,CAAe,KAAKC,iBAAL,EAAf;AAA2C;AACnD,CAVD;;AAYAR,IAAI,CAACO,SAAL,GAAiB,UAAS3qB,IAAT,EAAe;AAC9B;AACA;AACA,MAAIK,iBAAiB,CAACL,IAAD,EAAO,KAAK2B,OAAL,CAAa+G,WAAb,IAA4B,CAAnC,CAAjB,IAA0D1I,IAAI,KAAK;AAAG;AAA1E,IACE;AAAE,aAAO,KAAK6qB,QAAL,EAAP;AAAwB;;AAE5B,SAAO,KAAKC,gBAAL,CAAsB9qB,IAAtB,CAAP;AACD,CAPD;;AASAoqB,IAAI,CAACQ,iBAAL,GAAyB,YAAW;AAClC,MAAI5qB,IAAI,GAAG,KAAKmI,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAA3B,CAAX;;AACA,MAAIF,IAAI,IAAI,MAAR,IAAkBA,IAAI,IAAI,MAA9B,EAAsC;AAAE,WAAOA,IAAP;AAAa;;AACrD,MAAImO,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;AACA,SAAO,CAACF,IAAI,IAAI,EAAT,IAAemO,IAAf,GAAsB,SAA7B;AACD,CALD;;AAOAic,IAAI,CAACW,gBAAL,GAAwB,YAAW;AACjC,MAAIvd,MAAM,GAAG,IAAb;AAEA,MAAInD,QAAQ,GAAG,KAAK1I,OAAL,CAAa0H,SAAb,IAA0B,KAAKwC,WAAL,EAAzC;AACA,MAAI9D,KAAK,GAAG,KAAK7H,GAAjB;AAAA,MAAsB8H,GAAG,GAAG,KAAKG,KAAL,CAAWiY,OAAX,CAAmB,IAAnB,EAAyB,KAAKlgB,GAAL,IAAY,CAArC,CAA5B;;AACA,MAAI8H,GAAG,KAAK,CAAC,CAAb,EAAgB;AAAE,SAAK+G,KAAL,CAAW,KAAK7O,GAAL,GAAW,CAAtB,EAAyB,sBAAzB;AAAmD;;AACrE,OAAKA,GAAL,GAAW8H,GAAG,GAAG,CAAjB;;AACA,MAAI,KAAKrG,OAAL,CAAawH,SAAjB,EAA4B;AAC1B7C,IAAAA,UAAU,CAAC+B,SAAX,GAAuBN,KAAvB;AACA,QAAIO,KAAJ;;AACA,WAAO,CAACA,KAAK,GAAGhC,UAAU,CAACiC,IAAX,CAAgB,KAAKJ,KAArB,CAAT,KAAyCG,KAAK,CAACE,KAAN,GAAc,KAAKtI,GAAnE,EAAwE;AACtE,QAAEsN,MAAM,CAAC9B,OAAT;AACA8B,MAAAA,MAAM,CAAChC,SAAP,GAAmBlD,KAAK,CAACE,KAAN,GAAcF,KAAK,CAAC,CAAD,CAAL,CAASlI,MAA1C;AACD;AACF;;AACD,MAAI,KAAKuB,OAAL,CAAa0H,SAAjB,EACE;AAAE,SAAK1H,OAAL,CAAa0H,SAAb,CAAuB,IAAvB,EAA6B,KAAKlB,KAAL,CAAWwD,KAAX,CAAiB5D,KAAK,GAAG,CAAzB,EAA4BC,GAA5B,CAA7B,EAA+DD,KAA/D,EAAsE,KAAK7H,GAA3E,EACqBmK,QADrB,EAC+B,KAAKwB,WAAL,EAD/B;AACqD;AAC1D,CAlBD;;AAoBAue,IAAI,CAACtd,eAAL,GAAuB,UAASke,SAAT,EAAoB;AACzC,MAAIxd,MAAM,GAAG,IAAb;AAEA,MAAIzF,KAAK,GAAG,KAAK7H,GAAjB;AACA,MAAImK,QAAQ,GAAG,KAAK1I,OAAL,CAAa0H,SAAb,IAA0B,KAAKwC,WAAL,EAAzC;AACA,MAAIsZ,EAAE,GAAG,KAAKhd,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,IAAY8qB,SAAlC,CAAT;;AACA,SAAO,KAAK9qB,GAAL,GAAW,KAAKiI,KAAL,CAAW/H,MAAtB,IAAgC,CAACoG,SAAS,CAAC2e,EAAD,CAAjD,EAAuD;AACrDA,IAAAA,EAAE,GAAG3X,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwB,EAAErD,MAAM,CAACtN,GAAjC,CAAL;AACD;;AACD,MAAI,KAAKyB,OAAL,CAAa0H,SAAjB,EACE;AAAE,SAAK1H,OAAL,CAAa0H,SAAb,CAAuB,KAAvB,EAA8B,KAAKlB,KAAL,CAAWwD,KAAX,CAAiB5D,KAAK,GAAGijB,SAAzB,EAAoC,KAAK9qB,GAAzC,CAA9B,EAA6E6H,KAA7E,EAAoF,KAAK7H,GAAzF,EACqBmK,QADrB,EAC+B,KAAKwB,WAAL,EAD/B;AACqD;AAC1D,CAZD,C,CAcA;AACA;;;AAEAue,IAAI,CAACK,SAAL,GAAiB,YAAW;AAC1B,MAAIjd,MAAM,GAAG,IAAb;;AAEAyd,EAAAA,IAAI,EAAE,OAAO,KAAK/qB,GAAL,GAAW,KAAKiI,KAAL,CAAW/H,MAA7B,EAAqC;AACzC,QAAI+kB,EAAE,GAAG3X,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwBrD,MAAM,CAACtN,GAA/B,CAAT;;AACA,YAAQilB,EAAR;AACA,WAAK,EAAL;AAAS,WAAK,GAAL;AAAU;AACjB,UAAE3X,MAAM,CAACtN,GAAT;AACA;;AACF,WAAK,EAAL;AACE,YAAIsN,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwBrD,MAAM,CAACtN,GAAP,GAAa,CAArC,MAA4C,EAAhD,EAAoD;AAClD,YAAEsN,MAAM,CAACtN,GAAT;AACD;;AACH,WAAK,EAAL;AAAS,WAAK,IAAL;AAAW,WAAK,IAAL;AAClB,UAAEsN,MAAM,CAACtN,GAAT;;AACA,YAAIsN,MAAM,CAAC7L,OAAP,CAAewH,SAAnB,EAA8B;AAC5B,YAAEqE,MAAM,CAAC9B,OAAT;AACA8B,UAAAA,MAAM,CAAChC,SAAP,GAAmBgC,MAAM,CAACtN,GAA1B;AACD;;AACD;;AACF,WAAK,EAAL;AAAS;AACP,gBAAQsN,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwBrD,MAAM,CAACtN,GAAP,GAAa,CAArC,CAAR;AACA,eAAK,EAAL;AAAS;AACPsN,YAAAA,MAAM,CAACud,gBAAP;AACA;;AACF,eAAK,EAAL;AACEvd,YAAAA,MAAM,CAACV,eAAP,CAAuB,CAAvB;AACA;;AACF;AACE,kBAAMme,IAAN;AARF;;AAUA;;AACF;AACE,YAAI9F,EAAE,GAAG,CAAL,IAAUA,EAAE,GAAG,EAAf,IAAqBA,EAAE,IAAI,IAAN,IAAcze,kBAAkB,CAACnG,IAAnB,CAAwBC,MAAM,CAACC,YAAP,CAAoB0kB,EAApB,CAAxB,CAAvC,EAAyF;AACvF,YAAE3X,MAAM,CAACtN,GAAT;AACD,SAFD,MAEO;AACL,gBAAM+qB,IAAN;AACD;;AAhCH;AAkCD;AACF,CAxCD,C,CA0CA;AACA;AACA;AACA;;;AAEAb,IAAI,CAACM,WAAL,GAAmB,UAASlgB,IAAT,EAAeyT,GAAf,EAAoB;AACrC,OAAKjW,GAAL,GAAW,KAAK9H,GAAhB;;AACA,MAAI,KAAKyB,OAAL,CAAawH,SAAjB,EAA4B;AAAE,SAAKmB,MAAL,GAAc,KAAKuB,WAAL,EAAd;AAAmC;;AACjE,MAAIgX,QAAQ,GAAG,KAAKrY,IAApB;AACA,OAAKA,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAawT,GAAb;AAEA,OAAK3c,aAAL,CAAmBuhB,QAAnB;AACD,CARD,C,CAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAuH,IAAI,CAACc,aAAL,GAAqB,YAAW;AAC9B,MAAI/c,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;;AACA,MAAIiO,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;AAAE,WAAO,KAAKgd,UAAL,CAAgB,IAAhB,CAAP;AAA8B;;AAC9D,MAAIC,KAAK,GAAG,KAAKjjB,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAZ;;AACA,MAAI,KAAKyB,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiCyF,IAAI,KAAK,EAA1C,IAAgDid,KAAK,KAAK,EAA9D,EAAkE;AAAE;AAClE,SAAKlrB,GAAL,IAAY,CAAZ;AACA,WAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACmB,QAAvB,CAAP;AACD,GAHD,MAGO;AACL,MAAE,KAAK7C,GAAP;AACA,WAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACc,GAAvB,CAAP;AACD;AACF,CAXD;;AAaA0nB,IAAI,CAACiB,eAAL,GAAuB,YAAW;AAAE;AAClC,MAAIld,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;;AACA,MAAI,KAAKkM,WAAT,EAAsB;AAAE,MAAE,KAAKlM,GAAP;AAAY,WAAO,KAAKorB,UAAL,EAAP;AAA0B;;AAC9D,MAAInd,IAAI,KAAK,EAAb,EAAiB;AAAE,WAAO,KAAKod,QAAL,CAAc3pB,KAAK,CAACuB,MAApB,EAA4B,CAA5B,CAAP;AAAuC;;AAC1D,SAAO,KAAKooB,QAAL,CAAc3pB,KAAK,CAACoC,KAApB,EAA2B,CAA3B,CAAP;AACD,CALD;;AAOAomB,IAAI,CAACoB,yBAAL,GAAiC,UAASxrB,IAAT,EAAe;AAAE;AAChD,MAAImO,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;AACA,MAAIurB,IAAI,GAAG,CAAX;AACA,MAAIC,SAAS,GAAG1rB,IAAI,KAAK,EAAT,GAAc4B,KAAK,CAACmC,IAApB,GAA2BnC,KAAK,CAACkC,MAAjD,CAH8C,CAK9C;;AACA,MAAI,KAAKnC,OAAL,CAAa+G,WAAb,IAA4B,CAA5B,IAAiC1I,IAAI,KAAK,EAA1C,IAAgDmO,IAAI,KAAK,EAA7D,EAAiE;AAC/D,MAAEsd,IAAF;AACAC,IAAAA,SAAS,GAAG9pB,KAAK,CAACqC,QAAlB;AACAkK,IAAAA,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAP;AACD;;AAED,MAAIiO,IAAI,KAAK,EAAb,EAAiB;AAAE,WAAO,KAAKod,QAAL,CAAc3pB,KAAK,CAACuB,MAApB,EAA4BsoB,IAAI,GAAG,CAAnC,CAAP;AAA8C;;AACjE,SAAO,KAAKF,QAAL,CAAcG,SAAd,EAAyBD,IAAzB,CAAP;AACD,CAdD;;AAgBArB,IAAI,CAACuB,kBAAL,GAA0B,UAAS3rB,IAAT,EAAe;AAAE;AACzC,MAAImO,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;;AACA,MAAIiO,IAAI,KAAKnO,IAAb,EAAmB;AAAE,WAAO,KAAKurB,QAAL,CAAcvrB,IAAI,KAAK,GAAT,GAAe4B,KAAK,CAACyB,SAArB,GAAiCzB,KAAK,CAAC0B,UAArD,EAAiE,CAAjE,CAAP;AAA4E;;AACjG,MAAI6K,IAAI,KAAK,EAAb,EAAiB;AAAE,WAAO,KAAKod,QAAL,CAAc3pB,KAAK,CAACuB,MAApB,EAA4B,CAA5B,CAAP;AAAuC;;AAC1D,SAAO,KAAKooB,QAAL,CAAcvrB,IAAI,KAAK,GAAT,GAAe4B,KAAK,CAAC2B,SAArB,GAAiC3B,KAAK,CAAC6B,UAArD,EAAiE,CAAjE,CAAP;AACD,CALD;;AAOA2mB,IAAI,CAACwB,eAAL,GAAuB,YAAW;AAAE;AAClC,MAAIzd,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;;AACA,MAAIiO,IAAI,KAAK,EAAb,EAAiB;AAAE,WAAO,KAAKod,QAAL,CAAc3pB,KAAK,CAACuB,MAApB,EAA4B,CAA5B,CAAP;AAAuC;;AAC1D,SAAO,KAAKooB,QAAL,CAAc3pB,KAAK,CAAC4B,UAApB,EAAgC,CAAhC,CAAP;AACD,CAJD;;AAMA4mB,IAAI,CAACyB,kBAAL,GAA0B,UAAS7rB,IAAT,EAAe;AAAE;AACzC,MAAImO,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;;AACA,MAAIiO,IAAI,KAAKnO,IAAb,EAAmB;AACjB,QAAImO,IAAI,KAAK,EAAT,IAAe,CAAC,KAAK9B,QAArB,IAAiC,KAAKlE,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,MAAwC,EAAzE,KACC,KAAK+L,UAAL,KAAoB,CAApB,IAAyB5F,SAAS,CAAC9F,IAAV,CAAe,KAAK4H,KAAL,CAAWwD,KAAX,CAAiB,KAAKM,UAAtB,EAAkC,KAAK/L,GAAvC,CAAf,CAD1B,CAAJ,EAC4F;AAC1F;AACA,WAAK4M,eAAL,CAAqB,CAArB;AACA,WAAK2d,SAAL;AACA,aAAO,KAAK3c,SAAL,EAAP;AACD;;AACD,WAAO,KAAKyd,QAAL,CAAc3pB,KAAK,CAACwB,MAApB,EAA4B,CAA5B,CAAP;AACD;;AACD,MAAI+K,IAAI,KAAK,EAAb,EAAiB;AAAE,WAAO,KAAKod,QAAL,CAAc3pB,KAAK,CAACuB,MAApB,EAA4B,CAA5B,CAAP;AAAuC;;AAC1D,SAAO,KAAKooB,QAAL,CAAc3pB,KAAK,CAACiC,OAApB,EAA6B,CAA7B,CAAP;AACD,CAdD;;AAgBAumB,IAAI,CAAC0B,eAAL,GAAuB,UAAS9rB,IAAT,EAAe;AAAE;AACtC,MAAImO,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;AACA,MAAIurB,IAAI,GAAG,CAAX;;AACA,MAAItd,IAAI,KAAKnO,IAAb,EAAmB;AACjByrB,IAAAA,IAAI,GAAGzrB,IAAI,KAAK,EAAT,IAAe,KAAKmI,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,MAAwC,EAAvD,GAA4D,CAA5D,GAAgE,CAAvE;;AACA,QAAI,KAAKiI,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAWurB,IAAjC,MAA2C,EAA/C,EAAmD;AAAE,aAAO,KAAKF,QAAL,CAAc3pB,KAAK,CAACuB,MAApB,EAA4BsoB,IAAI,GAAG,CAAnC,CAAP;AAA8C;;AACnG,WAAO,KAAKF,QAAL,CAAc3pB,KAAK,CAACgC,QAApB,EAA8B6nB,IAA9B,CAAP;AACD;;AACD,MAAItd,IAAI,KAAK,EAAT,IAAenO,IAAI,KAAK,EAAxB,IAA8B,CAAC,KAAKqM,QAApC,IAAgD,KAAKlE,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,MAAwC,EAAxF,IACA,KAAKiI,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,MAAwC,EAD5C,EACgD;AAC9C;AACA,SAAK4M,eAAL,CAAqB,CAArB;AACA,SAAK2d,SAAL;AACA,WAAO,KAAK3c,SAAL,EAAP;AACD;;AACD,MAAIK,IAAI,KAAK,EAAb,EAAiB;AAAEsd,IAAAA,IAAI,GAAG,CAAP;AAAW;;AAC9B,SAAO,KAAKF,QAAL,CAAc3pB,KAAK,CAAC+B,UAApB,EAAgC8nB,IAAhC,CAAP;AACD,CAjBD;;AAmBArB,IAAI,CAAC2B,iBAAL,GAAyB,UAAS/rB,IAAT,EAAe;AAAE;AACxC,MAAImO,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;;AACA,MAAIiO,IAAI,KAAK,EAAb,EAAiB;AAAE,WAAO,KAAKod,QAAL,CAAc3pB,KAAK,CAAC8B,QAApB,EAA8B,KAAKyE,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,MAAwC,EAAxC,GAA6C,CAA7C,GAAiD,CAA/E,CAAP;AAA0F;;AAC7G,MAAIF,IAAI,KAAK,EAAT,IAAemO,IAAI,KAAK,EAAxB,IAA8B,KAAKxM,OAAL,CAAa+G,WAAb,IAA4B,CAA9D,EAAiE;AAAE;AACjE,SAAKxI,GAAL,IAAY,CAAZ;AACA,WAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACgB,KAAvB,CAAP;AACD;;AACD,SAAO,KAAK2oB,QAAL,CAAcvrB,IAAI,KAAK,EAAT,GAAc4B,KAAK,CAACsB,EAApB,GAAyBtB,KAAK,CAACT,MAA7C,EAAqD,CAArD,CAAP;AACD,CARD;;AAUAipB,IAAI,CAACU,gBAAL,GAAwB,UAAS9qB,IAAT,EAAe;AACrC,UAAQA,IAAR;AACA;AACA;AACA,SAAK,EAAL;AAAS;AACP,aAAO,KAAKkrB,aAAL,EAAP;AAEF;;AACA,SAAK,EAAL;AAAS,QAAE,KAAKhrB,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACS,MAAvB,CAAP;;AACrB,SAAK,EAAL;AAAS,QAAE,KAAKnC,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACU,MAAvB,CAAP;;AACrB,SAAK,EAAL;AAAS,QAAE,KAAKpC,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACY,IAAvB,CAAP;;AACrB,SAAK,EAAL;AAAS,QAAE,KAAKtC,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACW,KAAvB,CAAP;;AACrB,SAAK,EAAL;AAAS,QAAE,KAAKrC,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACK,QAAvB,CAAP;;AACrB,SAAK,EAAL;AAAS,QAAE,KAAK/B,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACM,QAAvB,CAAP;;AACrB,SAAK,GAAL;AAAU,QAAE,KAAKhC,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACO,MAAvB,CAAP;;AACtB,SAAK,GAAL;AAAU,QAAE,KAAKjC,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACQ,MAAvB,CAAP;;AACtB,SAAK,EAAL;AAAS,QAAE,KAAKlC,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACa,KAAvB,CAAP;;AACrB,SAAK,EAAL;AAAS,QAAE,KAAKvC,GAAP;AAAY,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACe,QAAvB,CAAP;;AAErB,SAAK,EAAL;AAAS;AACP,UAAI,KAAKhB,OAAL,CAAa+G,WAAb,GAA2B,CAA/B,EAAkC;AAAE;AAAO;;AAC3C,QAAE,KAAKxI,GAAP;AACA,aAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACoB,SAAvB,CAAP;;AAEF,SAAK,EAAL;AAAS;AACP,UAAImL,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAAL,GAAW,CAAjC,CAAX;;AACA,UAAIiO,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;AAAE,eAAO,KAAK6d,eAAL,CAAqB,EAArB,CAAP;AAAiC,OAFtE,CAEuE;;;AACrE,UAAI,KAAKrqB,OAAL,CAAa+G,WAAb,IAA4B,CAAhC,EAAmC;AACjC,YAAIyF,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;AAAE,iBAAO,KAAK6d,eAAL,CAAqB,CAArB,CAAP;AAAgC,SADlC,CACmC;;;AACpE,YAAI7d,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAAE,iBAAO,KAAK6d,eAAL,CAAqB,CAArB,CAAP;AAAgC,SAFjC,CAEkC;;AACpE;;AAEH;AACA;;AACA,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS;AAC/E,aAAO,KAAKb,UAAL,CAAgB,KAAhB,CAAP;AAEF;;AACA,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS;AAChB,aAAO,KAAKc,UAAL,CAAgBjsB,IAAhB,CAAP;AAEF;AACA;AACA;AACA;;AAEA,SAAK,EAAL;AAAS;AACP,aAAO,KAAKqrB,eAAL,EAAP;;AAEF,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS;AAChB,aAAO,KAAKG,yBAAL,CAA+BxrB,IAA/B,CAAP;;AAEF,SAAK,GAAL;AAAU,SAAK,EAAL;AAAS;AACjB,aAAO,KAAK2rB,kBAAL,CAAwB3rB,IAAxB,CAAP;;AAEF,SAAK,EAAL;AAAS;AACP,aAAO,KAAK4rB,eAAL,EAAP;;AAEF,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS;AAChB,aAAO,KAAKC,kBAAL,CAAwB7rB,IAAxB,CAAP;;AAEF,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS;AAChB,aAAO,KAAK8rB,eAAL,CAAqB9rB,IAArB,CAAP;;AAEF,SAAK,EAAL;AAAS,SAAK,EAAL;AAAS;AAChB,aAAO,KAAK+rB,iBAAL,CAAuB/rB,IAAvB,CAAP;;AAEF,SAAK,GAAL;AAAU;AACR,aAAO,KAAKurB,QAAL,CAAc3pB,KAAK,CAACT,MAApB,EAA4B,CAA5B,CAAP;AAnEF;;AAsEA,OAAK4N,KAAL,CAAW,KAAK7O,GAAhB,EAAqB,2BAA2BgsB,iBAAiB,CAAClsB,IAAD,CAA5C,GAAqD,GAA1E;AACD,CAxED;;AA0EAoqB,IAAI,CAACmB,QAAL,GAAgB,UAAS/gB,IAAT,EAAeihB,IAAf,EAAqB;AACnC,MAAIU,GAAG,GAAG,KAAKhkB,KAAL,CAAWwD,KAAX,CAAiB,KAAKzL,GAAtB,EAA2B,KAAKA,GAAL,GAAWurB,IAAtC,CAAV;AACA,OAAKvrB,GAAL,IAAYurB,IAAZ;AACA,SAAO,KAAKf,WAAL,CAAiBlgB,IAAjB,EAAuB2hB,GAAvB,CAAP;AACD,CAJD;;AAMA/B,IAAI,CAACkB,UAAL,GAAkB,YAAW;AAC3B,MAAI9d,MAAM,GAAG,IAAb;AAEA,MAAI4e,OAAJ;AAAA,MAAaC,OAAb;AAAA,MAAsBtkB,KAAK,GAAG,KAAK7H,GAAnC;;AACA,WAAS;AACP,QAAIsN,MAAM,CAACtN,GAAP,IAAcsN,MAAM,CAACrF,KAAP,CAAa/H,MAA/B,EAAuC;AAAEoN,MAAAA,MAAM,CAACuB,KAAP,CAAahH,KAAb,EAAoB,iCAApB;AAAyD;;AAClG,QAAIod,EAAE,GAAG3X,MAAM,CAACrF,KAAP,CAAa6I,MAAb,CAAoBxD,MAAM,CAACtN,GAA3B,CAAT;;AACA,QAAImG,SAAS,CAAC9F,IAAV,CAAe4kB,EAAf,CAAJ,EAAwB;AAAE3X,MAAAA,MAAM,CAACuB,KAAP,CAAahH,KAAb,EAAoB,iCAApB;AAAyD;;AACnF,QAAI,CAACqkB,OAAL,EAAc;AACZ,UAAIjH,EAAE,KAAK,GAAX,EAAgB;AAAEkH,QAAAA,OAAO,GAAG,IAAV;AAAiB,OAAnC,MACK,IAAIlH,EAAE,KAAK,GAAP,IAAckH,OAAlB,EAA2B;AAAEA,QAAAA,OAAO,GAAG,KAAV;AAAkB,OAA/C,MACA,IAAIlH,EAAE,KAAK,GAAP,IAAc,CAACkH,OAAnB,EAA4B;AAAE;AAAO;;AAC1CD,MAAAA,OAAO,GAAGjH,EAAE,KAAK,IAAjB;AACD,KALD,MAKO;AAAEiH,MAAAA,OAAO,GAAG,KAAV;AAAkB;;AAC3B,MAAE5e,MAAM,CAACtN,GAAT;AACD;;AACD,MAAI2d,OAAO,GAAG,KAAK1V,KAAL,CAAWwD,KAAX,CAAiB5D,KAAjB,EAAwB,KAAK7H,GAA7B,CAAd;AACA,IAAE,KAAKA,GAAP;AACA,MAAIosB,UAAU,GAAG,KAAKpsB,GAAtB;AACA,MAAI4d,KAAK,GAAG,KAAKyO,SAAL,EAAZ;;AACA,MAAI,KAAKjhB,WAAT,EAAsB;AAAE,SAAKiD,UAAL,CAAgB+d,UAAhB;AAA8B,GApB3B,CAsB3B;;;AACA,MAAIhH,KAAK,GAAG,KAAKrY,WAAL,KAAqB,KAAKA,WAAL,GAAmB,IAAI6W,qBAAJ,CAA0B,IAA1B,CAAxC,CAAZ;AACAwB,EAAAA,KAAK,CAACb,KAAN,CAAY1c,KAAZ,EAAmB8V,OAAnB,EAA4BC,KAA5B;AACA,OAAKuH,mBAAL,CAAyBC,KAAzB;AACA,OAAKE,qBAAL,CAA2BF,KAA3B,EA1B2B,CA4B3B;;AACA,MAAI7a,KAAK,GAAG,IAAZ;;AACA,MAAI;AACFA,IAAAA,KAAK,GAAG,IAAI9K,MAAJ,CAAWke,OAAX,EAAoBC,KAApB,CAAR;AACD,GAFD,CAEE,OAAO0O,CAAP,EAAU,CACV;AACA;AACD;;AAED,SAAO,KAAK9B,WAAL,CAAiB9oB,KAAK,CAACE,MAAvB,EAA+B;AAAC+b,IAAAA,OAAO,EAAEA,OAAV;AAAmBC,IAAAA,KAAK,EAAEA,KAA1B;AAAiCrT,IAAAA,KAAK,EAAEA;AAAxC,GAA/B,CAAP;AACD,CAtCD,C,CAwCA;AACA;AACA;;;AAEA2f,IAAI,CAACqC,OAAL,GAAe,UAASC,KAAT,EAAgB1L,GAAhB,EAAqB;AAClC,MAAIxT,MAAM,GAAG,IAAb;AAEA,MAAIzF,KAAK,GAAG,KAAK7H,GAAjB;AAAA,MAAsBysB,KAAK,GAAG,CAA9B;;AACA,OAAK,IAAIxsB,CAAC,GAAG,CAAR,EAAWqsB,CAAC,GAAGxL,GAAG,IAAI,IAAP,GAAc4L,QAAd,GAAyB5L,GAA7C,EAAkD7gB,CAAC,GAAGqsB,CAAtD,EAAyD,EAAErsB,CAA3D,EAA8D;AAC5D,QAAIH,IAAI,GAAGwN,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwBrD,MAAM,CAACtN,GAA/B,CAAX;AAAA,QAAgD+d,GAAG,GAAI,KAAK,CAA5D;;AACA,QAAIje,IAAI,IAAI,EAAZ,EAAgB;AAAEie,MAAAA,GAAG,GAAGje,IAAI,GAAG,EAAP,GAAY,EAAlB;AAAuB,KAAzC,CAA0C;AAA1C,SACK,IAAIA,IAAI,IAAI,EAAZ,EAAgB;AAAEie,QAAAA,GAAG,GAAGje,IAAI,GAAG,EAAP,GAAY,EAAlB;AAAuB,OAAzC,CAA0C;AAA1C,WACA,IAAIA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;AAAEie,UAAAA,GAAG,GAAGje,IAAI,GAAG,EAAb;AAAkB,SAAlD,CAAmD;AAAnD,aACA;AAAEie,YAAAA,GAAG,GAAG2O,QAAN;AAAiB;;AACxB,QAAI3O,GAAG,IAAIyO,KAAX,EAAkB;AAAE;AAAO;;AAC3B,MAAElf,MAAM,CAACtN,GAAT;AACAysB,IAAAA,KAAK,GAAGA,KAAK,GAAGD,KAAR,GAAgBzO,GAAxB;AACD;;AACD,MAAI,KAAK/d,GAAL,KAAa6H,KAAb,IAAsBiZ,GAAG,IAAI,IAAP,IAAe,KAAK9gB,GAAL,GAAW6H,KAAX,KAAqBiZ,GAA9D,EAAmE;AAAE,WAAO,IAAP;AAAa;;AAElF,SAAO2L,KAAP;AACD,CAjBD;;AAmBAvC,IAAI,CAAC4B,eAAL,GAAuB,UAASU,KAAT,EAAgB;AACrC,OAAKxsB,GAAL,IAAY,CAAZ,CADqC,CACtB;;AACf,MAAI+d,GAAG,GAAG,KAAKwO,OAAL,CAAaC,KAAb,CAAV;;AACA,MAAIzO,GAAG,IAAI,IAAX,EAAiB;AAAE,SAAKlP,KAAL,CAAW,KAAKhH,KAAL,GAAa,CAAxB,EAA2B,8BAA8B2kB,KAAzD;AAAkE;;AACrF,MAAIrsB,iBAAiB,CAAC,KAAKuqB,iBAAL,EAAD,CAArB,EAAiD;AAAE,SAAK7b,KAAL,CAAW,KAAK7O,GAAhB,EAAqB,kCAArB;AAA2D;;AAC9G,SAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACC,GAAvB,EAA4Boc,GAA5B,CAAP;AACD,CAND,C,CAQA;;;AAEAmM,IAAI,CAACe,UAAL,GAAkB,UAAS0B,aAAT,EAAwB;AACxC,MAAI9kB,KAAK,GAAG,KAAK7H,GAAjB;;AACA,MAAI,CAAC2sB,aAAD,IAAkB,KAAKJ,OAAL,CAAa,EAAb,MAAqB,IAA3C,EAAiD;AAAE,SAAK1d,KAAL,CAAWhH,KAAX,EAAkB,gBAAlB;AAAsC;;AACzF,MAAI+kB,KAAK,GAAG,KAAK5sB,GAAL,GAAW6H,KAAX,IAAoB,CAApB,IAAyB,KAAKI,KAAL,CAAW0I,UAAX,CAAsB9I,KAAtB,MAAiC,EAAtE;;AACA,MAAI+kB,KAAK,IAAI,KAAK3tB,MAAlB,EAA0B;AAAE,SAAK4P,KAAL,CAAWhH,KAAX,EAAkB,gBAAlB;AAAsC;;AAClE,MAAI+kB,KAAK,IAAI,OAAOvsB,IAAP,CAAY,KAAK4H,KAAL,CAAWwD,KAAX,CAAiB5D,KAAjB,EAAwB,KAAK7H,GAA7B,CAAZ,CAAb,EAA6D;AAAE4sB,IAAAA,KAAK,GAAG,KAAR;AAAgB;;AAC/E,MAAI3e,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAA3B,CAAX;;AACA,MAAIiO,IAAI,KAAK,EAAT,IAAe,CAAC2e,KAApB,EAA2B;AAAE;AAC3B,MAAE,KAAK5sB,GAAP;AACA,SAAKusB,OAAL,CAAa,EAAb;AACAte,IAAAA,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAA3B,CAAP;AACD;;AACD,MAAI,CAACiO,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAAzB,KAAiC,CAAC2e,KAAtC,EAA6C;AAAE;AAC7C3e,IAAAA,IAAI,GAAG,KAAKhG,KAAL,CAAW0I,UAAX,CAAsB,EAAE,KAAK3Q,GAA7B,CAAP;;AACA,QAAIiO,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAAE,QAAE,KAAKjO,GAAP;AAAa,KAFJ,CAEK;;;AAChD,QAAI,KAAKusB,OAAL,CAAa,EAAb,MAAqB,IAAzB,EAA+B;AAAE,WAAK1d,KAAL,CAAWhH,KAAX,EAAkB,gBAAlB;AAAsC;AACxE;;AACD,MAAI1H,iBAAiB,CAAC,KAAKuqB,iBAAL,EAAD,CAArB,EAAiD;AAAE,SAAK7b,KAAL,CAAW,KAAK7O,GAAhB,EAAqB,kCAArB;AAA2D;;AAE9G,MAAIisB,GAAG,GAAG,KAAKhkB,KAAL,CAAWwD,KAAX,CAAiB5D,KAAjB,EAAwB,KAAK7H,GAA7B,CAAV;AACA,MAAI+d,GAAG,GAAG6O,KAAK,GAAGC,QAAQ,CAACZ,GAAD,EAAM,CAAN,CAAX,GAAsBa,UAAU,CAACb,GAAD,CAA/C;AACA,SAAO,KAAKzB,WAAL,CAAiB9oB,KAAK,CAACC,GAAvB,EAA4Boc,GAA5B,CAAP;AACD,CAtBD,C,CAwBA;;;AAEAmM,IAAI,CAAC6C,aAAL,GAAqB,YAAW;AAC9B,MAAI9H,EAAE,GAAG,KAAKhd,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAA3B,CAAT;AAAA,MAA0CF,IAA1C;;AAEA,MAAImlB,EAAE,KAAK,GAAX,EAAgB;AAAE;AAChB,QAAI,KAAKxjB,OAAL,CAAa+G,WAAb,GAA2B,CAA/B,EAAkC;AAAE,WAAK6F,UAAL;AAAoB;;AACxD,QAAI2e,OAAO,GAAG,EAAE,KAAKhtB,GAArB;AACAF,IAAAA,IAAI,GAAG,KAAKmtB,WAAL,CAAiB,KAAKhlB,KAAL,CAAWiY,OAAX,CAAmB,GAAnB,EAAwB,KAAKlgB,GAA7B,IAAoC,KAAKA,GAA1D,CAAP;AACA,MAAE,KAAKA,GAAP;;AACA,QAAIF,IAAI,GAAG,QAAX,EAAqB;AAAE,WAAKotB,kBAAL,CAAwBF,OAAxB,EAAiC,0BAAjC;AAA+D;AACvF,GAND,MAMO;AACLltB,IAAAA,IAAI,GAAG,KAAKmtB,WAAL,CAAiB,CAAjB,CAAP;AACD;;AACD,SAAOntB,IAAP;AACD,CAbD;;AAeA,SAASksB,iBAAT,CAA2BlsB,IAA3B,EAAiC;AAC/B;AACA,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAAE,WAAOQ,MAAM,CAACC,YAAP,CAAoBT,IAApB,CAAP;AAAkC;;AACxDA,EAAAA,IAAI,IAAI,OAAR;AACA,SAAOQ,MAAM,CAACC,YAAP,CAAoB,CAACT,IAAI,IAAI,EAAT,IAAe,MAAnC,EAA2C,CAACA,IAAI,GAAG,IAAR,IAAgB,MAA3D,CAAP;AACD;;AAEDoqB,IAAI,CAAC6B,UAAL,GAAkB,UAASoB,KAAT,EAAgB;AAChC,MAAI7f,MAAM,GAAG,IAAb;AAEA,MAAIyV,GAAG,GAAG,EAAV;AAAA,MAAcqK,UAAU,GAAG,EAAE,KAAKptB,GAAlC;;AACA,WAAS;AACP,QAAIsN,MAAM,CAACtN,GAAP,IAAcsN,MAAM,CAACrF,KAAP,CAAa/H,MAA/B,EAAuC;AAAEoN,MAAAA,MAAM,CAACuB,KAAP,CAAavB,MAAM,CAACzF,KAApB,EAA2B,8BAA3B;AAA6D;;AACtG,QAAIod,EAAE,GAAG3X,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwBrD,MAAM,CAACtN,GAA/B,CAAT;;AACA,QAAIilB,EAAE,KAAKkI,KAAX,EAAkB;AAAE;AAAO;;AAC3B,QAAIlI,EAAE,KAAK,EAAX,EAAe;AAAE;AACflC,MAAAA,GAAG,IAAIzV,MAAM,CAACrF,KAAP,CAAawD,KAAb,CAAmB2hB,UAAnB,EAA+B9f,MAAM,CAACtN,GAAtC,CAAP;AACA+iB,MAAAA,GAAG,IAAIzV,MAAM,CAAC+f,eAAP,CAAuB,KAAvB,CAAP;AACAD,MAAAA,UAAU,GAAG9f,MAAM,CAACtN,GAApB;AACD,KAJD,MAIO;AACL,UAAIsG,SAAS,CAAC2e,EAAD,EAAK3X,MAAM,CAAC7L,OAAP,CAAe+G,WAAf,IAA8B,EAAnC,CAAb,EAAqD;AAAE8E,QAAAA,MAAM,CAACuB,KAAP,CAAavB,MAAM,CAACzF,KAApB,EAA2B,8BAA3B;AAA6D;;AACpH,QAAEyF,MAAM,CAACtN,GAAT;AACD;AACF;;AACD+iB,EAAAA,GAAG,IAAI,KAAK9a,KAAL,CAAWwD,KAAX,CAAiB2hB,UAAjB,EAA6B,KAAKptB,GAAL,EAA7B,CAAP;AACA,SAAO,KAAKwqB,WAAL,CAAiB9oB,KAAK,CAACG,MAAvB,EAA+BkhB,GAA/B,CAAP;AACD,CAnBD,C,CAqBA;;;AAEA,IAAIuK,6BAA6B,GAAG,EAApC;;AAEApD,IAAI,CAAC9H,oBAAL,GAA4B,YAAW;AACrC,OAAKmL,iBAAL,GAAyB,IAAzB;;AACA,MAAI;AACF,SAAKC,aAAL;AACD,GAFD,CAEE,OAAOhN,GAAP,EAAY;AACZ,QAAIA,GAAG,KAAK8M,6BAAZ,EAA2C;AACzC,WAAKG,wBAAL;AACD,KAFD,MAEO;AACL,YAAMjN,GAAN;AACD;AACF;;AAED,OAAK+M,iBAAL,GAAyB,KAAzB;AACD,CAbD;;AAeArD,IAAI,CAACgD,kBAAL,GAA0B,UAASQ,QAAT,EAAmBnN,OAAnB,EAA4B;AACpD,MAAI,KAAKgN,iBAAL,IAA0B,KAAK9rB,OAAL,CAAa+G,WAAb,IAA4B,CAA1D,EAA6D;AAC3D,UAAM8kB,6BAAN;AACD,GAFD,MAEO;AACL,SAAKze,KAAL,CAAW6e,QAAX,EAAqBnN,OAArB;AACD;AACF,CAND;;AAQA2J,IAAI,CAACsD,aAAL,GAAqB,YAAW;AAC9B,MAAIlgB,MAAM,GAAG,IAAb;AAEA,MAAIyV,GAAG,GAAG,EAAV;AAAA,MAAcqK,UAAU,GAAG,KAAKptB,GAAhC;;AACA,WAAS;AACP,QAAIsN,MAAM,CAACtN,GAAP,IAAcsN,MAAM,CAACrF,KAAP,CAAa/H,MAA/B,EAAuC;AAAEoN,MAAAA,MAAM,CAACuB,KAAP,CAAavB,MAAM,CAACzF,KAApB,EAA2B,uBAA3B;AAAsD;;AAC/F,QAAIod,EAAE,GAAG3X,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwBrD,MAAM,CAACtN,GAA/B,CAAT;;AACA,QAAIilB,EAAE,KAAK,EAAP,IAAaA,EAAE,KAAK,EAAP,IAAa3X,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwBrD,MAAM,CAACtN,GAAP,GAAa,CAArC,MAA4C,GAA1E,EAA+E;AAAE;AAC/E,UAAIsN,MAAM,CAACtN,GAAP,KAAesN,MAAM,CAACzF,KAAtB,KAAgCyF,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACiB,QAAtB,IAAkC2K,MAAM,CAAChD,IAAP,KAAgB5I,KAAK,CAACkB,eAAxF,CAAJ,EAA8G;AAC5G,YAAIqiB,EAAE,KAAK,EAAX,EAAe;AACb3X,UAAAA,MAAM,CAACtN,GAAP,IAAc,CAAd;AACA,iBAAOsN,MAAM,CAACkd,WAAP,CAAmB9oB,KAAK,CAACqB,YAAzB,CAAP;AACD,SAHD,MAGO;AACL,YAAEuK,MAAM,CAACtN,GAAT;AACA,iBAAOsN,MAAM,CAACkd,WAAP,CAAmB9oB,KAAK,CAACoB,SAAzB,CAAP;AACD;AACF;;AACDigB,MAAAA,GAAG,IAAIzV,MAAM,CAACrF,KAAP,CAAawD,KAAb,CAAmB2hB,UAAnB,EAA+B9f,MAAM,CAACtN,GAAtC,CAAP;AACA,aAAOsN,MAAM,CAACkd,WAAP,CAAmB9oB,KAAK,CAACiB,QAAzB,EAAmCogB,GAAnC,CAAP;AACD;;AACD,QAAIkC,EAAE,KAAK,EAAX,EAAe;AAAE;AACflC,MAAAA,GAAG,IAAIzV,MAAM,CAACrF,KAAP,CAAawD,KAAb,CAAmB2hB,UAAnB,EAA+B9f,MAAM,CAACtN,GAAtC,CAAP;AACA+iB,MAAAA,GAAG,IAAIzV,MAAM,CAAC+f,eAAP,CAAuB,IAAvB,CAAP;AACAD,MAAAA,UAAU,GAAG9f,MAAM,CAACtN,GAApB;AACD,KAJD,MAIO,IAAIsG,SAAS,CAAC2e,EAAD,CAAb,EAAmB;AACxBlC,MAAAA,GAAG,IAAIzV,MAAM,CAACrF,KAAP,CAAawD,KAAb,CAAmB2hB,UAAnB,EAA+B9f,MAAM,CAACtN,GAAtC,CAAP;AACA,QAAEsN,MAAM,CAACtN,GAAT;;AACA,cAAQilB,EAAR;AACA,aAAK,EAAL;AACE,cAAI3X,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwBrD,MAAM,CAACtN,GAA/B,MAAwC,EAA5C,EAAgD;AAAE,cAAEsN,MAAM,CAACtN,GAAT;AAAe;;AACnE,aAAK,EAAL;AACE+iB,UAAAA,GAAG,IAAI,IAAP;AACA;;AACF;AACEA,UAAAA,GAAG,IAAIziB,MAAM,CAACC,YAAP,CAAoB0kB,EAApB,CAAP;AACA;AARF;;AAUA,UAAI3X,MAAM,CAAC7L,OAAP,CAAewH,SAAnB,EAA8B;AAC5B,UAAEqE,MAAM,CAAC9B,OAAT;AACA8B,QAAAA,MAAM,CAAChC,SAAP,GAAmBgC,MAAM,CAACtN,GAA1B;AACD;;AACDotB,MAAAA,UAAU,GAAG9f,MAAM,CAACtN,GAApB;AACD,KAlBM,MAkBA;AACL,QAAEsN,MAAM,CAACtN,GAAT;AACD;AACF;AACF,CA9CD,C,CAgDA;;;AACAkqB,IAAI,CAACuD,wBAAL,GAAgC,YAAW;AACzC,MAAIngB,MAAM,GAAG,IAAb;;AAEA,SAAO,KAAKtN,GAAL,GAAW,KAAKiI,KAAL,CAAW/H,MAA7B,EAAqC,KAAKF,GAAL,EAArC,EAAiD;AAC/C,YAAQsN,MAAM,CAACrF,KAAP,CAAaqF,MAAM,CAACtN,GAApB,CAAR;AACA,WAAK,IAAL;AACE,UAAEsN,MAAM,CAACtN,GAAT;AACA;;AAEF,WAAK,GAAL;AACE,YAAIsN,MAAM,CAACrF,KAAP,CAAaqF,MAAM,CAACtN,GAAP,GAAa,CAA1B,MAAiC,GAArC,EAA0C;AACxC;AACD;;AACH;;AAEA,WAAK,GAAL;AACE,eAAOsN,MAAM,CAACkd,WAAP,CAAmB9oB,KAAK,CAACkB,eAAzB,EAA0C0K,MAAM,CAACrF,KAAP,CAAawD,KAAb,CAAmB6B,MAAM,CAACzF,KAA1B,EAAiCyF,MAAM,CAACtN,GAAxC,CAA1C,CAAP;AAEF;AAdA;AAgBD;;AACD,OAAK6O,KAAL,CAAW,KAAKhH,KAAhB,EAAuB,uBAAvB;AACD,CAtBD,C,CAwBA;;;AAEAqiB,IAAI,CAACmD,eAAL,GAAuB,UAASM,UAAT,EAAqB;AAC1C,MAAI1I,EAAE,GAAG,KAAKhd,KAAL,CAAW0I,UAAX,CAAsB,EAAE,KAAK3Q,GAA7B,CAAT;AACA,IAAE,KAAKA,GAAP;;AACA,UAAQilB,EAAR;AACA,SAAK,GAAL;AAAU,aAAO,IAAP;AAAY;;AACtB,SAAK,GAAL;AAAU,aAAO,IAAP;AAAY;;AACtB,SAAK,GAAL;AAAU,aAAO3kB,MAAM,CAACC,YAAP,CAAoB,KAAK0sB,WAAL,CAAiB,CAAjB,CAApB,CAAP;AAAgD;;AAC1D,SAAK,GAAL;AAAU,aAAOjB,iBAAiB,CAAC,KAAKe,aAAL,EAAD,CAAxB;AAA+C;;AACzD,SAAK,GAAL;AAAU,aAAO,IAAP;AAAY;;AACtB,SAAK,EAAL;AAAS,aAAO,IAAP;AAAY;;AACrB,SAAK,GAAL;AAAU,aAAO,QAAP;AAAgB;;AAC1B,SAAK,GAAL;AAAU,aAAO,IAAP;AAAY;;AACtB,SAAK,EAAL;AAAS,UAAI,KAAK9kB,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAA3B,MAAoC,EAAxC,EAA4C;AAAE,UAAE,KAAKA,GAAP;AAAa;;AAAC;;AACrE,SAAK,EAAL;AAAS;AACP,UAAI,KAAKyB,OAAL,CAAawH,SAAjB,EAA4B;AAAE,aAAKqC,SAAL,GAAiB,KAAKtL,GAAtB;AAA2B,UAAE,KAAKwL,OAAP;AAAiB;;AAC1E,aAAO,EAAP;;AACF;AACE,UAAIyZ,EAAE,IAAI,EAAN,IAAYA,EAAE,IAAI,EAAtB,EAA0B;AACxB,YAAI2I,QAAQ,GAAG,KAAK3lB,KAAL,CAAW4lB,MAAX,CAAkB,KAAK7tB,GAAL,GAAW,CAA7B,EAAgC,CAAhC,EAAmCoI,KAAnC,CAAyC,SAAzC,EAAoD,CAApD,CAAf;AACA,YAAIwkB,KAAK,GAAGC,QAAQ,CAACe,QAAD,EAAW,CAAX,CAApB;;AACA,YAAIhB,KAAK,GAAG,GAAZ,EAAiB;AACfgB,UAAAA,QAAQ,GAAGA,QAAQ,CAACniB,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACAmhB,UAAAA,KAAK,GAAGC,QAAQ,CAACe,QAAD,EAAW,CAAX,CAAhB;AACD;;AACD,aAAK5tB,GAAL,IAAY4tB,QAAQ,CAAC1tB,MAAT,GAAkB,CAA9B;AACA+kB,QAAAA,EAAE,GAAG,KAAKhd,KAAL,CAAW0I,UAAX,CAAsB,KAAK3Q,GAA3B,CAAL;;AACA,YAAI,CAAC4tB,QAAQ,KAAK,GAAb,IAAoB3I,EAAE,KAAK,EAA3B,IAAiCA,EAAE,KAAK,EAAzC,MAAiD,KAAKhmB,MAAL,IAAe0uB,UAAhE,CAAJ,EAAiF;AAC/E,eAAKT,kBAAL,CACE,KAAKltB,GAAL,GAAW,CAAX,GAAe4tB,QAAQ,CAAC1tB,MAD1B,EAEEytB,UAAU,GACN,kCADM,GAEN,8BAJN;AAMD;;AACD,eAAOrtB,MAAM,CAACC,YAAP,CAAoBqsB,KAApB,CAAP;AACD;;AACD,aAAOtsB,MAAM,CAACC,YAAP,CAAoB0kB,EAApB,CAAP;AAjCF;AAmCD,CAtCD,C,CAwCA;;;AAEAiF,IAAI,CAAC+C,WAAL,GAAmB,UAASnM,GAAT,EAAc;AAC/B,MAAIkM,OAAO,GAAG,KAAKhtB,GAAnB;AACA,MAAI0H,CAAC,GAAG,KAAK6kB,OAAL,CAAa,EAAb,EAAiBzL,GAAjB,CAAR;;AACA,MAAIpZ,CAAC,KAAK,IAAV,EAAgB;AAAE,SAAKwlB,kBAAL,CAAwBF,OAAxB,EAAiC,+BAAjC;AAAoE;;AACtF,SAAOtlB,CAAP;AACD,CALD,C,CAOA;AACA;AACA;AACA;AACA;;;AAEAwiB,IAAI,CAACmC,SAAL,GAAiB,YAAW;AAC1B,MAAI/e,MAAM,GAAG,IAAb;AAEA,OAAKlC,WAAL,GAAmB,KAAnB;AACA,MAAI6B,IAAI,GAAG,EAAX;AAAA,MAAe2L,KAAK,GAAG,IAAvB;AAAA,MAA6BwU,UAAU,GAAG,KAAKptB,GAA/C;AACA,MAAII,MAAM,GAAG,KAAKqB,OAAL,CAAa+G,WAAb,IAA4B,CAAzC;;AACA,SAAO,KAAKxI,GAAL,GAAW,KAAKiI,KAAL,CAAW/H,MAA7B,EAAqC;AACnC,QAAI+kB,EAAE,GAAG3X,MAAM,CAACod,iBAAP,EAAT;;AACA,QAAIlqB,gBAAgB,CAACykB,EAAD,EAAK7kB,MAAL,CAApB,EAAkC;AAChCkN,MAAAA,MAAM,CAACtN,GAAP,IAAcilB,EAAE,IAAI,MAAN,GAAe,CAAf,GAAmB,CAAjC;AACD,KAFD,MAEO,IAAIA,EAAE,KAAK,EAAX,EAAe;AAAE;AACtB3X,MAAAA,MAAM,CAAClC,WAAP,GAAqB,IAArB;AACA6B,MAAAA,IAAI,IAAIK,MAAM,CAACrF,KAAP,CAAawD,KAAb,CAAmB2hB,UAAnB,EAA+B9f,MAAM,CAACtN,GAAtC,CAAR;AACA,UAAI8tB,QAAQ,GAAGxgB,MAAM,CAACtN,GAAtB;;AACA,UAAIsN,MAAM,CAACrF,KAAP,CAAa0I,UAAb,CAAwB,EAAErD,MAAM,CAACtN,GAAjC,MAA0C,GAA9C,EAAmD;AACjD;AAAEsN,UAAAA,MAAM,CAAC4f,kBAAP,CAA0B5f,MAAM,CAACtN,GAAjC,EAAsC,2CAAtC;AAAqF;;AACzF,QAAEsN,MAAM,CAACtN,GAAT;AACA,UAAI+tB,GAAG,GAAGzgB,MAAM,CAACyf,aAAP,EAAV;;AACA,UAAI,CAAC,CAACnU,KAAK,GAAGzY,iBAAH,GAAuBK,gBAA7B,EAA+CutB,GAA/C,EAAoD3tB,MAApD,CAAL,EACE;AAAEkN,QAAAA,MAAM,CAAC4f,kBAAP,CAA0BY,QAA1B,EAAoC,wBAApC;AAAgE;;AACpE7gB,MAAAA,IAAI,IAAI+e,iBAAiB,CAAC+B,GAAD,CAAzB;AACAX,MAAAA,UAAU,GAAG9f,MAAM,CAACtN,GAApB;AACD,KAZM,MAYA;AACL;AACD;;AACD4Y,IAAAA,KAAK,GAAG,KAAR;AACD;;AACD,SAAO3L,IAAI,GAAG,KAAKhF,KAAL,CAAWwD,KAAX,CAAiB2hB,UAAjB,EAA6B,KAAKptB,GAAlC,CAAd;AACD,CA5BD,C,CA8BA;AACA;;;AAEAkqB,IAAI,CAACS,QAAL,GAAgB,YAAW;AACzB,MAAI1d,IAAI,GAAG,KAAKof,SAAL,EAAX;AACA,MAAI/hB,IAAI,GAAG5I,KAAK,CAACL,IAAjB;;AACA,MAAI,KAAKjC,QAAL,CAAciB,IAAd,CAAmB4M,IAAnB,CAAJ,EAA8B;AAC5B,QAAI,KAAK7B,WAAT,EAAsB;AAAE,WAAKkE,gBAAL,CAAsB,KAAKzH,KAA3B,EAAkC,gCAAgCoF,IAAlE;AAA0E;;AAClG3C,IAAAA,IAAI,GAAG/I,UAAU,CAAC0L,IAAD,CAAjB;AACD;;AACD,SAAO,KAAKud,WAAL,CAAiBlgB,IAAjB,EAAuB2C,IAAvB,CAAP;AACD,CARD,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAI+gB,OAAO,GAAG,OAAd,C,CAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASvgB,KAAT,CAAexF,KAAf,EAAsBxG,OAAtB,EAA+B;AAC7B,SAAO,IAAIoJ,MAAJ,CAAWpJ,OAAX,EAAoBwG,KAApB,EAA2BwF,KAA3B,EAAP;AACD,C,CAED;AACA;AACA;;;AAEA,SAASwgB,iBAAT,CAA2BhmB,KAA3B,EAAkCjI,GAAlC,EAAuCyB,OAAvC,EAAgD;AAC9C,MAAImG,CAAC,GAAG,IAAIiD,MAAJ,CAAWpJ,OAAX,EAAoBwG,KAApB,EAA2BjI,GAA3B,CAAR;AACA4H,EAAAA,CAAC,CAACgG,SAAF;AACA,SAAOhG,CAAC,CAACyK,eAAF,EAAP;AACD,C,CAED;AACA;;;AAEA,SAAS6b,SAAT,CAAmBjmB,KAAnB,EAA0BxG,OAA1B,EAAmC;AACjC,SAAO,IAAIoJ,MAAJ,CAAWpJ,OAAX,EAAoBwG,KAApB,CAAP;AACD,C,CAED;AACA;AACA;;;AACA,IAAIkmB,YAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,YAAJ,C,CAAkB;;AAClB,SAASC,eAAT,CAAyB7gB,KAAzB,EAAgC8gB,SAAhC,EAA2CC,UAA3C,EAAuD;AACrDL,EAAAA,YAAY,GAAG1gB,KAAf,CADqD,CAC/B;;AACtB2gB,EAAAA,WAAW,GAAGG,SAAd;AACAF,EAAAA,YAAY,GAAGG,UAAf;AACD;;AAED,SAASR,OAAT,EAAkBvgB,KAAlB,EAAyBwgB,iBAAzB,EAA4CC,SAA5C,EAAuDC,YAAvD,EAAqEC,WAArE,EAAkFC,YAAlF,EAAgGC,eAAhG,EAAiHzjB,MAAjH,EAAyHrB,OAAzH,EAAkIjB,cAAlI,EAAkJlB,QAAlJ,EAA4JM,cAA5J,EAA4KK,WAA5K,EAAyLsZ,IAAzL,EAA+L7gB,SAA/L,EAA0MiB,KAAK,IAAI+sB,QAAnN,EAA6NltB,UAAU,IAAImtB,YAA3O,EAAyPjN,UAAzP,EAAqQI,OAAO,IAAI8M,WAAhR,EAA6RnuB,gBAA7R,EAA+SL,iBAA/S,EAAkU8pB,KAAlU,EAAyU3jB,SAAzU,EAAoVH,SAApV,EAA+VC,UAA/V,EAA2WI,kBAA3W","sourcesContent":["// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7b9\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,190,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,26,230,43,117,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,68,12,0,67,12,65,1,31,6129,15,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true};\nvar startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\"),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features. The default is 7.\n  ecmaVersion: 7,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion >= 2015)\n    { options.ecmaVersion -= 2009; }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Registered plugins\nvar plugins = {};\n\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n  var reserved = \"\";\n  if (!options.allowReserved) {\n    for (var v = options.ecmaVersion;; v--)\n      { if (reserved = reservedWords[v]) { break } }\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = keywordRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = keywordRegexp(reservedStrict);\n  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Load plugins\n  this.loadPlugins(options.plugins);\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Flags to track whether we are in a function, a generator, an async function.\n  this.inFunction = this.inGenerator = this.inAsync = false;\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = 0;\n  // Labels in scope.\n  this.labels = [];\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterFunctionScope();\n\n  // For RegExp validation\n  this.regexpState = null;\n};\n\n// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\nParser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\nParser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\nParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name]);\n};\n\nParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = plugins[name];\n    if (!plugin) { throw new Error(\"Plugin '\" + name + \"' not found\") }\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\"|;)/;\npp.strictDirective = function(start) {\n  var this$1 = this;\n\n  for (;;) {\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this$1.input)[0].length;\n    var match = literal.exec(this$1.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") { return true }\n    start += match[0].length;\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var this$1 = this;\n\n  var exports = {};\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this$1.parseStatement(true, true, exports);\n    node.body.push(stmt);\n  }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"};\nvar switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function() {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  if (nextCh === 91 || nextCh === 123) { return true } // '{' and '['\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(declaration, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet()) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    if (!declaration && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false)\n  case types._class:\n    if (!declaration) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (!declaration && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock()\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (!declaration) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var this$1 = this;\n\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this$1.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterLexicalScope();\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n        !(kind !== \"var\" && init$1.declarations[0].init)) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync) {\n  this.next();\n  return this.parseFunction(node, true, false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(!this.strict && this.type === types._function);\n  node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.type === types._function) : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  var this$1 = this;\n\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterLexicalScope();\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this$1.type === types._case || this$1.type === types._default) {\n      var isCase = this$1.type === types._case;\n      if (cur) { this$1.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this$1.startNode());\n      cur.consequent = [];\n      this$1.next();\n      if (isCase) {\n        cur.test = this$1.parseExpression();\n      } else {\n        if (sawDefault) { this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this$1.expect(types.colon);\n    } else {\n      if (!cur) { this$1.unexpected(); }\n      cur.consequent.push(this$1.parseStatement(true));\n    }\n  }\n  this.exitLexicalScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      this.enterLexicalScope();\n      this.checkLVal(clause.param, \"let\");\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterLexicalScope();\n    }\n    clause.body = this.parseBlock(false);\n    this.exitLexicalScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr) {\n  var this$1 = this;\n\n  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this$1.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this$1.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(true);\n  if (node.body.type === \"ClassDeclaration\" ||\n      node.body.type === \"VariableDeclaration\" && node.body.kind !== \"var\" ||\n      node.body.type === \"FunctionDeclaration\" && (this.strict || node.body.generator || node.body.async))\n    { this.raiseRecoverable(node.body.start, \"Invalid labeled declaration\"); }\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope) {\n  var this$1 = this;\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n\n  var node = this.startNode();\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) {\n    this.enterLexicalScope();\n  }\n  while (!this.eat(types.braceR)) {\n    var stmt = this$1.parseStatement(true);\n    node.body.push(stmt);\n  }\n  if (createNewLexicalScope) {\n    this.exitLexicalScope();\n  }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var type = this.type === types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  if (type === \"ForInStatement\") {\n    if (init.type === \"AssignmentPattern\" ||\n      (init.type === \"VariableDeclaration\" && init.declarations[0].init != null &&\n       (this.strict || init.declarations[0].id.type !== \"Identifier\")))\n      { this.raise(init.start, \"Invalid assignment in for-in loop head\"); }\n  }\n  node.left = init;\n  node.right = type === \"ForInStatement\" ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type)\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  var this$1 = this;\n\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this$1.startNode();\n    this$1.parseVarId(decl, kind);\n    if (this$1.eat(types.eq)) {\n      decl.init = this$1.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n      this$1.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this$1.type === types._in || this$1.isContextual(\"of\")))) {\n      this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n    if (!this$1.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom(kind);\n  this.checkLVal(decl.id, kind, false);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync)\n    { node.generator = this.eat(types.star); }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (isStatement) {\n    node.id = isStatement === \"nullableID\" && this.type !== types.name ? null : this.parseIdent();\n    if (node.id) {\n      this.checkLVal(node.id, this.inModule && !this.inFunction ? \"let\" : \"var\");\n    }\n  }\n\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  if (!isStatement)\n    { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  var this$1 = this;\n\n  this.next();\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    var member = this$1.parseClassMember(classBody);\n    if (member && member.type === \"MethodDefinition\" && member.kind === \"constructor\") {\n      if (hadConstructor) { this$1.raise(member.start, \"Duplicate constructor in the same class\"); }\n      hadConstructor = true;\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassMember = function(classBody) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) { return null }\n\n  var method = this.startNode();\n  var tryContextual = function (k, noLineBreak) {\n    if ( noLineBreak === void 0 ) noLineBreak = false;\n\n    var start = this$1.start, startLoc = this$1.startLoc;\n    if (!this$1.eatContextual(k)) { return false }\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n    if (method.key) { this$1.unexpected(); }\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n  if (!method.key) { this.parsePropertyName(method); }\n  var key = method.key;\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n      key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    method.kind = \"constructor\";\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n  this.parseClassMethod(classBody, method, isGenerator, isAsync);\n  if (method.kind === \"get\" && method.value.params.length !== 0)\n    { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && method.value.params.length !== 1)\n    { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n  return method\n};\n\npp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {\n  method.value = this.parseMethod(isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  var this$1 = this;\n\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, \"nullableID\", false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        var spec = list[i];\n\n        this$1.checkUnreserved(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var this$1 = this;\n\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this$1.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this$1.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  var this$1 = this;\n\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this$1.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this$1.startNode();\n    node.local = this$1.parseIdent(true);\n    node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local;\n    this$1.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this$1.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, \"let\");\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, \"let\");\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this$1.startNode();\n    node$2.imported = this$1.parseIdent(true);\n    if (this$1.eatContextual(\"as\")) {\n      node$2.local = this$1.parseIdent();\n    } else {\n      this$1.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this$1.checkLVal(node$2.local, \"let\");\n    nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  var this$1 = this;\n\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Can not use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this$1.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this$1.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding);\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var this$1 = this;\n\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this$1.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this$1.expect(types.comma); }\n    if (allowEmpty && this$1.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n      break\n    } else if (this$1.type === types.ellipsis) {\n      var rest = this$1.parseRestBinding();\n      this$1.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n      this$1.expect(close);\n      break\n    } else {\n      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);\n      this$1.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\npp$2.checkLVal = function(expr, bindingType, checkClashes) {\n  var this$1 = this;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n      checkClashes[expr.name] = true;\n    }\n    if (bindingType && bindingType !== \"none\") {\n      if (\n        bindingType === \"var\" && !this.canDeclareVarName(expr.name) ||\n        bindingType !== \"var\" && !this.canDeclareLexicalName(expr.name)\n      ) {\n        this.raiseRecoverable(expr.start, (\"Identifier '\" + (expr.name) + \"' has already been declared\"));\n      }\n      if (bindingType === \"var\") {\n        this.declareVarName(expr.name);\n      } else {\n        this.declareLexicalName(expr.name);\n      }\n    }\n    break\n\n  case \"MemberExpression\":\n    if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1)\n      {\n    var prop = list[i];\n\n    this$1.checkLVal(prop, bindingType, checkClashes);\n  }\n    break\n\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLVal(expr.value, bindingType, checkClashes);\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this$1.checkLVal(elem, bindingType, checkClashes); }\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, bindingType, checkClashes);\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, bindingType, checkClashes);\n    break\n\n  default:\n    this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }\n        // Backwards-compat kludge. Can be removed in version 6.0\n        else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) { return this.parseYield() }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types.parenL || this.type === types.name)\n    { this.potentialArrowAt = this.start; }\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n    if (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }\n    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLVal(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.operator = this$1.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  else\n    { return expr }\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var this$1 = this;\n\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n  for (var computed = (void 0);;) {\n    if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {\n      var node = this$1.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);\n      node.computed = !!computed;\n      if (computed) { this$1.expect(types.bracketR); }\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this$1.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos;\n      this$1.yieldPos = 0;\n      this$1.awaitPos = 0;\n      var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {\n        this$1.checkPatternErrors(refDestructuringErrors, false);\n        this$1.checkYieldAwaitInDefaultParams();\n        this$1.yieldPos = oldYieldPos;\n        this$1.awaitPos = oldAwaitPos;\n        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this$1.checkExpressionErrors(refDestructuringErrors, true);\n      this$1.yieldPos = oldYieldPos || this$1.yieldPos;\n      this$1.awaitPos = oldAwaitPos || this$1.awaitPos;\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      base = this$1.finishNode(node$1, \"CallExpression\");\n    } else if (this$1.type === types.backQuote) {\n      var node$2 = this$1.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this$1.parseTemplate({isTagged: true});\n      base = this$1.finishNode(node$2, \"TaggedTemplateExpression\");\n    } else {\n      return base\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.inFunction)\n      { this.raise(this.start, \"'super' outside of function or class\"); }\n    node = this.startNode();\n    this.next();\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super Arguments\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(this.type !== types.name);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n        id = this.parseIdent();\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, false)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    while (this.type !== types.parenR) {\n      first ? first = false : this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this$1.type === types.ellipsis) {\n        spreadStart = this$1.start;\n        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));\n        if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\" || containsEsc)\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); }\n    if (!this.inFunction)\n      { this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  var this$1 = this;\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this$1.type === types.eof) { this$1.raise(this$1.pos, \"Unterminated template literal\"); }\n    this$1.expect(types.dollarBraceL);\n    node.expressions.push(this$1.parseExpression());\n    this$1.expect(types.braceR);\n    node.quasis.push(curElt = this$1.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var this$1 = this;\n\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this$1.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types.comma && this.type !== types.braceR)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    this.checkUnreserved(prop.key);\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync) {\n  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.enterFunctionScope();\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = false;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));\n    node.body = this.parseBlock(false);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitFunctionScope();\n\n  if (this.strict && node.id) {\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    this.checkLVal(node.id, \"none\");\n  }\n  this.strict = oldStrict;\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var this$1 = this;\n\n  var nameHash = {};\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this$1.checkLVal(param, \"var\", allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this$1.type === types.comma)\n      { elt = null; }\n    else if (this$1.type === types.ellipsis) {\n      elt = this$1.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this$1.start; }\n    } else {\n      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Can not use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Can not use 'await' as identifier inside an async function\"); }\n  if (this.isKeyword(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Can not use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved === \"never\") { liberal = false; }\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) { this.checkUnreserved(node); }\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function() {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\n// Object.assign polyfill\nvar assign = Object.assign || function(target) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  for (var i = 0, list = sources; i < list.length; i += 1) {\n    var source = list[i];\n\n    for (var key in source) {\n      if (has(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterFunctionScope = function() {\n  // var: a hash of var-declared names in the current lexical scope\n  // lexical: a hash of lexically-declared names in the current lexical scope\n  // childVar: a hash of var-declared names in all child lexical scopes of the current lexical scope (within the current function scope)\n  // parentLexical: a hash of lexically-declared names in all parent lexical scopes of the current lexical scope (within the current function scope)\n  this.scopeStack.push({var: {}, lexical: {}, childVar: {}, parentLexical: {}});\n};\n\npp$5.exitFunctionScope = function() {\n  this.scopeStack.pop();\n};\n\npp$5.enterLexicalScope = function() {\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n  var childScope = {var: {}, lexical: {}, childVar: {}, parentLexical: {}};\n\n  this.scopeStack.push(childScope);\n  assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);\n};\n\npp$5.exitLexicalScope = function() {\n  var childScope = this.scopeStack.pop();\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  assign(parentScope.childVar, childScope.var, childScope.childVar);\n};\n\n/**\n * A name can be declared with `var` if there are no variables with the same name declared with `let`/`const`\n * in the current lexical scope or any of the parent lexical scopes in this function.\n */\npp$5.canDeclareVarName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name)\n};\n\n/**\n * A name can be declared with `let`/`const` if there are no variables with the same name declared with `let`/`const`\n * in the current scope, and there are no variables with the same name declared with `var` in the current scope or in\n * any child lexical scopes in this function.\n */\npp$5.canDeclareLexicalName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name)\n};\n\npp$5.declareVarName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].var[name] = true;\n};\n\npp$5.declareLexicalName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType === types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n    { return true }\n  if (prevType === types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType === types._var || prevType === types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  var this$1 = this;\n\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this$1.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\nvar data = {\n  \"$LONE\": [\n    \"ASCII\",\n    \"ASCII_Hex_Digit\",\n    \"AHex\",\n    \"Alphabetic\",\n    \"Alpha\",\n    \"Any\",\n    \"Assigned\",\n    \"Bidi_Control\",\n    \"Bidi_C\",\n    \"Bidi_Mirrored\",\n    \"Bidi_M\",\n    \"Case_Ignorable\",\n    \"CI\",\n    \"Cased\",\n    \"Changes_When_Casefolded\",\n    \"CWCF\",\n    \"Changes_When_Casemapped\",\n    \"CWCM\",\n    \"Changes_When_Lowercased\",\n    \"CWL\",\n    \"Changes_When_NFKC_Casefolded\",\n    \"CWKCF\",\n    \"Changes_When_Titlecased\",\n    \"CWT\",\n    \"Changes_When_Uppercased\",\n    \"CWU\",\n    \"Dash\",\n    \"Default_Ignorable_Code_Point\",\n    \"DI\",\n    \"Deprecated\",\n    \"Dep\",\n    \"Diacritic\",\n    \"Dia\",\n    \"Emoji\",\n    \"Emoji_Component\",\n    \"Emoji_Modifier\",\n    \"Emoji_Modifier_Base\",\n    \"Emoji_Presentation\",\n    \"Extender\",\n    \"Ext\",\n    \"Grapheme_Base\",\n    \"Gr_Base\",\n    \"Grapheme_Extend\",\n    \"Gr_Ext\",\n    \"Hex_Digit\",\n    \"Hex\",\n    \"IDS_Binary_Operator\",\n    \"IDSB\",\n    \"IDS_Trinary_Operator\",\n    \"IDST\",\n    \"ID_Continue\",\n    \"IDC\",\n    \"ID_Start\",\n    \"IDS\",\n    \"Ideographic\",\n    \"Ideo\",\n    \"Join_Control\",\n    \"Join_C\",\n    \"Logical_Order_Exception\",\n    \"LOE\",\n    \"Lowercase\",\n    \"Lower\",\n    \"Math\",\n    \"Noncharacter_Code_Point\",\n    \"NChar\",\n    \"Pattern_Syntax\",\n    \"Pat_Syn\",\n    \"Pattern_White_Space\",\n    \"Pat_WS\",\n    \"Quotation_Mark\",\n    \"QMark\",\n    \"Radical\",\n    \"Regional_Indicator\",\n    \"RI\",\n    \"Sentence_Terminal\",\n    \"STerm\",\n    \"Soft_Dotted\",\n    \"SD\",\n    \"Terminal_Punctuation\",\n    \"Term\",\n    \"Unified_Ideograph\",\n    \"UIdeo\",\n    \"Uppercase\",\n    \"Upper\",\n    \"Variation_Selector\",\n    \"VS\",\n    \"White_Space\",\n    \"space\",\n    \"XID_Continue\",\n    \"XIDC\",\n    \"XID_Start\",\n    \"XIDS\"\n  ],\n  \"General_Category\": [\n    \"Cased_Letter\",\n    \"LC\",\n    \"Close_Punctuation\",\n    \"Pe\",\n    \"Connector_Punctuation\",\n    \"Pc\",\n    \"Control\",\n    \"Cc\",\n    \"cntrl\",\n    \"Currency_Symbol\",\n    \"Sc\",\n    \"Dash_Punctuation\",\n    \"Pd\",\n    \"Decimal_Number\",\n    \"Nd\",\n    \"digit\",\n    \"Enclosing_Mark\",\n    \"Me\",\n    \"Final_Punctuation\",\n    \"Pf\",\n    \"Format\",\n    \"Cf\",\n    \"Initial_Punctuation\",\n    \"Pi\",\n    \"Letter\",\n    \"L\",\n    \"Letter_Number\",\n    \"Nl\",\n    \"Line_Separator\",\n    \"Zl\",\n    \"Lowercase_Letter\",\n    \"Ll\",\n    \"Mark\",\n    \"M\",\n    \"Combining_Mark\",\n    \"Math_Symbol\",\n    \"Sm\",\n    \"Modifier_Letter\",\n    \"Lm\",\n    \"Modifier_Symbol\",\n    \"Sk\",\n    \"Nonspacing_Mark\",\n    \"Mn\",\n    \"Number\",\n    \"N\",\n    \"Open_Punctuation\",\n    \"Ps\",\n    \"Other\",\n    \"C\",\n    \"Other_Letter\",\n    \"Lo\",\n    \"Other_Number\",\n    \"No\",\n    \"Other_Punctuation\",\n    \"Po\",\n    \"Other_Symbol\",\n    \"So\",\n    \"Paragraph_Separator\",\n    \"Zp\",\n    \"Private_Use\",\n    \"Co\",\n    \"Punctuation\",\n    \"P\",\n    \"punct\",\n    \"Separator\",\n    \"Z\",\n    \"Space_Separator\",\n    \"Zs\",\n    \"Spacing_Mark\",\n    \"Mc\",\n    \"Surrogate\",\n    \"Cs\",\n    \"Symbol\",\n    \"S\",\n    \"Titlecase_Letter\",\n    \"Lt\",\n    \"Unassigned\",\n    \"Cn\",\n    \"Uppercase_Letter\",\n    \"Lu\"\n  ],\n  \"Script\": [\n    \"Adlam\",\n    \"Adlm\",\n    \"Ahom\",\n    \"Anatolian_Hieroglyphs\",\n    \"Hluw\",\n    \"Arabic\",\n    \"Arab\",\n    \"Armenian\",\n    \"Armn\",\n    \"Avestan\",\n    \"Avst\",\n    \"Balinese\",\n    \"Bali\",\n    \"Bamum\",\n    \"Bamu\",\n    \"Bassa_Vah\",\n    \"Bass\",\n    \"Batak\",\n    \"Batk\",\n    \"Bengali\",\n    \"Beng\",\n    \"Bhaiksuki\",\n    \"Bhks\",\n    \"Bopomofo\",\n    \"Bopo\",\n    \"Brahmi\",\n    \"Brah\",\n    \"Braille\",\n    \"Brai\",\n    \"Buginese\",\n    \"Bugi\",\n    \"Buhid\",\n    \"Buhd\",\n    \"Canadian_Aboriginal\",\n    \"Cans\",\n    \"Carian\",\n    \"Cari\",\n    \"Caucasian_Albanian\",\n    \"Aghb\",\n    \"Chakma\",\n    \"Cakm\",\n    \"Cham\",\n    \"Cherokee\",\n    \"Cher\",\n    \"Common\",\n    \"Zyyy\",\n    \"Coptic\",\n    \"Copt\",\n    \"Qaac\",\n    \"Cuneiform\",\n    \"Xsux\",\n    \"Cypriot\",\n    \"Cprt\",\n    \"Cyrillic\",\n    \"Cyrl\",\n    \"Deseret\",\n    \"Dsrt\",\n    \"Devanagari\",\n    \"Deva\",\n    \"Duployan\",\n    \"Dupl\",\n    \"Egyptian_Hieroglyphs\",\n    \"Egyp\",\n    \"Elbasan\",\n    \"Elba\",\n    \"Ethiopic\",\n    \"Ethi\",\n    \"Georgian\",\n    \"Geor\",\n    \"Glagolitic\",\n    \"Glag\",\n    \"Gothic\",\n    \"Goth\",\n    \"Grantha\",\n    \"Gran\",\n    \"Greek\",\n    \"Grek\",\n    \"Gujarati\",\n    \"Gujr\",\n    \"Gurmukhi\",\n    \"Guru\",\n    \"Han\",\n    \"Hani\",\n    \"Hangul\",\n    \"Hang\",\n    \"Hanunoo\",\n    \"Hano\",\n    \"Hatran\",\n    \"Hatr\",\n    \"Hebrew\",\n    \"Hebr\",\n    \"Hiragana\",\n    \"Hira\",\n    \"Imperial_Aramaic\",\n    \"Armi\",\n    \"Inherited\",\n    \"Zinh\",\n    \"Qaai\",\n    \"Inscriptional_Pahlavi\",\n    \"Phli\",\n    \"Inscriptional_Parthian\",\n    \"Prti\",\n    \"Javanese\",\n    \"Java\",\n    \"Kaithi\",\n    \"Kthi\",\n    \"Kannada\",\n    \"Knda\",\n    \"Katakana\",\n    \"Kana\",\n    \"Kayah_Li\",\n    \"Kali\",\n    \"Kharoshthi\",\n    \"Khar\",\n    \"Khmer\",\n    \"Khmr\",\n    \"Khojki\",\n    \"Khoj\",\n    \"Khudawadi\",\n    \"Sind\",\n    \"Lao\",\n    \"Laoo\",\n    \"Latin\",\n    \"Latn\",\n    \"Lepcha\",\n    \"Lepc\",\n    \"Limbu\",\n    \"Limb\",\n    \"Linear_A\",\n    \"Lina\",\n    \"Linear_B\",\n    \"Linb\",\n    \"Lisu\",\n    \"Lycian\",\n    \"Lyci\",\n    \"Lydian\",\n    \"Lydi\",\n    \"Mahajani\",\n    \"Mahj\",\n    \"Malayalam\",\n    \"Mlym\",\n    \"Mandaic\",\n    \"Mand\",\n    \"Manichaean\",\n    \"Mani\",\n    \"Marchen\",\n    \"Marc\",\n    \"Masaram_Gondi\",\n    \"Gonm\",\n    \"Meetei_Mayek\",\n    \"Mtei\",\n    \"Mende_Kikakui\",\n    \"Mend\",\n    \"Meroitic_Cursive\",\n    \"Merc\",\n    \"Meroitic_Hieroglyphs\",\n    \"Mero\",\n    \"Miao\",\n    \"Plrd\",\n    \"Modi\",\n    \"Mongolian\",\n    \"Mong\",\n    \"Mro\",\n    \"Mroo\",\n    \"Multani\",\n    \"Mult\",\n    \"Myanmar\",\n    \"Mymr\",\n    \"Nabataean\",\n    \"Nbat\",\n    \"New_Tai_Lue\",\n    \"Talu\",\n    \"Newa\",\n    \"Nko\",\n    \"Nkoo\",\n    \"Nushu\",\n    \"Nshu\",\n    \"Ogham\",\n    \"Ogam\",\n    \"Ol_Chiki\",\n    \"Olck\",\n    \"Old_Hungarian\",\n    \"Hung\",\n    \"Old_Italic\",\n    \"Ital\",\n    \"Old_North_Arabian\",\n    \"Narb\",\n    \"Old_Permic\",\n    \"Perm\",\n    \"Old_Persian\",\n    \"Xpeo\",\n    \"Old_South_Arabian\",\n    \"Sarb\",\n    \"Old_Turkic\",\n    \"Orkh\",\n    \"Oriya\",\n    \"Orya\",\n    \"Osage\",\n    \"Osge\",\n    \"Osmanya\",\n    \"Osma\",\n    \"Pahawh_Hmong\",\n    \"Hmng\",\n    \"Palmyrene\",\n    \"Palm\",\n    \"Pau_Cin_Hau\",\n    \"Pauc\",\n    \"Phags_Pa\",\n    \"Phag\",\n    \"Phoenician\",\n    \"Phnx\",\n    \"Psalter_Pahlavi\",\n    \"Phlp\",\n    \"Rejang\",\n    \"Rjng\",\n    \"Runic\",\n    \"Runr\",\n    \"Samaritan\",\n    \"Samr\",\n    \"Saurashtra\",\n    \"Saur\",\n    \"Sharada\",\n    \"Shrd\",\n    \"Shavian\",\n    \"Shaw\",\n    \"Siddham\",\n    \"Sidd\",\n    \"SignWriting\",\n    \"Sgnw\",\n    \"Sinhala\",\n    \"Sinh\",\n    \"Sora_Sompeng\",\n    \"Sora\",\n    \"Soyombo\",\n    \"Soyo\",\n    \"Sundanese\",\n    \"Sund\",\n    \"Syloti_Nagri\",\n    \"Sylo\",\n    \"Syriac\",\n    \"Syrc\",\n    \"Tagalog\",\n    \"Tglg\",\n    \"Tagbanwa\",\n    \"Tagb\",\n    \"Tai_Le\",\n    \"Tale\",\n    \"Tai_Tham\",\n    \"Lana\",\n    \"Tai_Viet\",\n    \"Tavt\",\n    \"Takri\",\n    \"Takr\",\n    \"Tamil\",\n    \"Taml\",\n    \"Tangut\",\n    \"Tang\",\n    \"Telugu\",\n    \"Telu\",\n    \"Thaana\",\n    \"Thaa\",\n    \"Thai\",\n    \"Tibetan\",\n    \"Tibt\",\n    \"Tifinagh\",\n    \"Tfng\",\n    \"Tirhuta\",\n    \"Tirh\",\n    \"Ugaritic\",\n    \"Ugar\",\n    \"Vai\",\n    \"Vaii\",\n    \"Warang_Citi\",\n    \"Wara\",\n    \"Yi\",\n    \"Yiii\",\n    \"Zanabazar_Square\",\n    \"Zanb\"\n  ]\n};\nArray.prototype.push.apply(data.$LONE, data.General_Category);\ndata.gc = data.General_Category;\ndata.sc = data.Script_Extensions = data.scx = data.Script;\n\nvar pp$9 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current () {\n  return this.at(this.pos)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead () {\n  return this.at(this.nextIndex(this.pos))\n};\n\nRegExpValidationState.prototype.advance = function advance () {\n  this.pos = this.nextIndex(this.pos);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch) {\n  if (this.current() === ch) {\n    this.advance();\n    return true\n  }\n  return false\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpFlags = function(state) {\n  var this$1 = this;\n\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this$1.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this$1.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$9.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$9.regexp_disjunction = function(state) {\n  var this$1 = this;\n\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this$1.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$9.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    {  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$9.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$9.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$9.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$9.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$9.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$9.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$9.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$9.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$9.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$9.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$9.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$9.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier[U] ::\n//   [empty]\n//   `?` GroupName[?U]\npp$9.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName[U] ::\n//   `<` RegExpIdentifierName[?U] `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName[U] ::\n//   RegExpIdentifierStart[?U]\n//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart[U] ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\npp$9.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart[U] ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n//   <ZWNJ>\n//   <ZWJ>\npp$9.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$9.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$9.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$9.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$9.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$9.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$9.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$9.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      state.switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$9.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$9.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$9.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$9.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$9.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!data.hasOwnProperty(name) || data[name].indexOf(value) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\npp$9.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (data.$LONE.indexOf(nameOrValue) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$9.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$9.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* [ */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$9.regexp_classRanges = function(state) {\n  var this$1 = this;\n\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this$1.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$9.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* [ */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$9.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$9.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$9.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$9.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$9.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$9.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$8 = Parser.prototype;\n\n// Move to the next token\n\npp$8.next = function() {\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$8.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$8[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$8.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$8.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$8.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$8.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$8.skipBlockComment = function() {\n  var this$1 = this;\n\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this$1.curLine;\n      this$1.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$8.skipLineComment = function(startSkip) {\n  var this$1 = this;\n\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this$1.input.charCodeAt(++this$1.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$8.skipSpace = function() {\n  var this$1 = this;\n\n  loop: while (this.pos < this.input.length) {\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this$1.pos;\n      break\n    case 13:\n      if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n        ++this$1.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this$1.pos;\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n      case 42: // '*'\n        this$1.skipBlockComment();\n        break\n      case 47:\n        this$1.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this$1.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$8.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$8.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$8.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$8.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$8.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$8.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$8.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$8.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$8.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$8.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n  case 63: ++this.pos; return this.finishToken(types.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp$8.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$8.readRegexp = function() {\n  var this$1 = this;\n\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(start, \"Unterminated regular expression\"); }\n    var ch = this$1.input.charAt(this$1.pos);\n    if (lineBreak.test(ch)) { this$1.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this$1.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$8.readInt = function(radix, len) {\n  var this$1 = this;\n\n  var start = this.pos, total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this$1.input.charCodeAt(this$1.pos), val = (void 0);\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    ++this$1.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\npp$8.readRadixNumber = function(radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$8.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var str = this.input.slice(start, this.pos);\n  var val = octal ? parseInt(str, 8) : parseFloat(str);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$8.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$8.readString = function(quote) {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(false);\n      chunkStart = this$1.pos;\n    } else {\n      if (isNewLine(ch, this$1.options.ecmaVersion >= 10)) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n      ++this$1.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$8.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$8.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$8.readTmplToken = function() {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated template\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this$1.pos += 2;\n          return this$1.finishToken(types.dollarBraceL)\n        } else {\n          ++this$1.pos;\n          return this$1.finishToken(types.backQuote)\n        }\n      }\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      return this$1.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(true);\n      chunkStart = this$1.pos;\n    } else if (isNewLine(ch)) {\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      ++this$1.pos;\n      switch (ch) {\n      case 13:\n        if (this$1.input.charCodeAt(this$1.pos) === 10) { ++this$1.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      chunkStart = this$1.pos;\n    } else {\n      ++this$1.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$8.readInvalidTemplateToken = function() {\n  var this$1 = this;\n\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this$1.input[this$1.pos]) {\n    case \"\\\\\":\n      ++this$1.pos;\n      break\n\n    case \"$\":\n      if (this$1.input[this$1.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$8.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$8.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$8.readWord1 = function() {\n  var this$1 = this;\n\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this$1.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this$1.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this$1.containsEsc = true;\n      word += this$1.input.slice(chunkStart, this$1.pos);\n      var escStart = this$1.pos;\n      if (this$1.input.charCodeAt(++this$1.pos) !== 117) // \"u\"\n        { this$1.invalidStringToken(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this$1.pos;\n      var esc = this$1.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this$1.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this$1.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$8.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word); }\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nvar version = \"5.7.3\";\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new Parser(options, input)\n}\n\n// This is a terrible kludge to support the existing, pre-ES6\n// interface where the loose parser module retroactively adds exports\n// to this module.\nvar parse_dammit;\nvar LooseParser;\nvar pluginsLoose; // eslint-disable-line camelcase\nfunction addLooseExports(parse, Parser$$1, plugins$$1) {\n  parse_dammit = parse; // eslint-disable-line camelcase\n  LooseParser = Parser$$1;\n  pluginsLoose = plugins$$1;\n}\n\nexport { version, parse, parseExpressionAt, tokenizer, parse_dammit, LooseParser, pluginsLoose, addLooseExports, Parser, plugins, defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, types as tokTypes, keywords$1 as keywordTypes, TokContext, types$1 as tokContexts, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace };\n"]},"metadata":{},"sourceType":"module"}