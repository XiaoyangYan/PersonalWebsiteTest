{"ast":null,"code":"var act = {\n  add: add,\n  update: update,\n  remove: remove\n},\n    emitterify = require('./emitterify'),\n    def = require('./def'),\n    is = require('./is'),\n    str = JSON.stringify,\n    parse = JSON.parse;\n\nmodule.exports = function set(d, skipEmit) {\n  return function (o, existing, max) {\n    if (!is.obj(o) && !is.fn(o)) return o;\n\n    if (!is.obj(d)) {\n      var log = existing || o.log || [],\n          root = o;\n      if (!is.def(max)) max = log.max || 0;\n      if (!max) log = [];\n      if (max < 0) log = log.concat(null);\n\n      if (max > 0) {\n        var s = str(o);\n        root = parse(s);\n        log = log.concat({\n          type: 'update',\n          value: parse(s),\n          time: log.length\n        });\n      }\n\n      def(log, 'max', max);\n      root.log ? root.log = log : def(emitterify(root, null), 'log', log, 1);\n      return root;\n    }\n\n    if (is.def(d.key)) {\n      if (!apply(o, d.type, (d.key = '' + d.key).split('.').filter(Boolean), d.value)) return false;\n    } else return false;\n\n    if (o.log && o.log.max) o.log.push((d.time = o.log.length, o.log.max > 0 ? d : null));\n    if (!skipEmit && o.emit) o.emit('change', d);\n    return o;\n  };\n};\n\nfunction apply(body, type, path, value) {\n  var next = path.shift();\n  if (!act[type]) return false;\n\n  if (path.length) {\n    if (!(next in body)) if (type == 'remove') return true;else body[next] = {};\n    return apply(body[next], type, path, value);\n  } else {\n    return !act[type](body, next, value);\n  }\n}\n\nfunction add(o, k, v) {\n  is.arr(o) ? o.splice(k, 0, v) : o[k] = v;\n}\n\nfunction update(o, k, v) {\n  if (!is.num(k) && !k) {\n    if (!is.obj(v)) return true;\n\n    for (var x in o) delete o[x];\n\n    for (var x in v) o[x] = v[x];\n  } else o[k] = v;\n}\n\nfunction remove(o, k, v) {\n  is.arr(o) ? o.splice(k, 1) : delete o[k];\n}","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/utilise/set.js"],"names":["act","add","update","remove","emitterify","require","def","is","str","JSON","stringify","parse","module","exports","set","d","skipEmit","o","existing","max","obj","fn","log","root","concat","s","type","value","time","length","key","apply","split","filter","Boolean","push","emit","body","path","next","shift","k","v","arr","splice","num","x"],"mappings":"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","sourcesContent":["var act = { add: add, update: update, remove: remove }\n  , emitterify = require('./emitterify')\n  , def = require('./def')\n  , is  = require('./is')\n  , str = JSON.stringify\n  , parse = JSON.parse\n\nmodule.exports = function set(d, skipEmit) {\n  return function(o, existing, max) {\n    if (!is.obj(o) && !is.fn(o))\n      return o\n\n    if (!is.obj(d)) { \n      var log = existing || o.log || []\n        , root = o\n\n      if (!is.def(max)) max = log.max || 0\n      if (!max)    log = []\n      if (max < 0) log = log.concat(null)\n      if (max > 0) {\n        var s = str(o)\n        root = parse(s) \n        log = log.concat({ type: 'update', value: parse(s), time: log.length })\n      } \n\n      def(log, 'max', max)\n      \n      root.log \n        ? (root.log = log)\n        : def(emitterify(root, null), 'log', log, 1)\n\n      return root\n    }\n\n    if (is.def(d.key)) {\n      if (!apply(o, d.type, (d.key = '' + d.key).split('.').filter(Boolean), d.value))\n        return false\n    } else\n      return false\n\n    if (o.log && o.log.max) \n      o.log.push((d.time = o.log.length, o.log.max > 0 ? d : null))\n\n    if (!skipEmit && o.emit)\n      o.emit('change', d)\n\n    return o\n  }\n}\n\nfunction apply(body, type, path, value) {\n  var next = path.shift()\n\n  if (!act[type]) \n    return false\n  if (path.length) { \n    if (!(next in body)) \n      if (type == 'remove') return true\n      else body[next] = {}\n    return apply(body[next], type, path, value)\n  }\n  else {\n    return !act[type](body, next, value)\n  }\n}\n\nfunction add(o, k, v) {\n  is.arr(o) \n    ? o.splice(k, 0, v) \n    : (o[k] = v)\n}\n\nfunction update(o, k, v) {\n  if (!is.num(k) && !k) {\n    if (!is.obj(v)) return true\n    for (var x in o) delete o[x]\n    for (var x in v) o[x] = v[x]\n  } else \n    o[k] = v \n}\n\nfunction remove(o, k, v) { \n  is.arr(o) \n    ? o.splice(k, 1)\n    : delete o[k]\n}"]},"metadata":{},"sourceType":"script"}