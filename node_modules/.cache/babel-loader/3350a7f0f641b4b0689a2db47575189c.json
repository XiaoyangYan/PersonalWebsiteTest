{"ast":null,"code":"/* Generated by `npm run build`, do not edit! */\n\"use strict\";\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar tt = require(\"acorn\").tokTypes;\n\nmodule.exports = function (Parser) {\n  return (\n    /*@__PURE__*/\n    function (Parser) {\n      function anonymous() {\n        Parser.apply(this, arguments);\n      }\n\n      if (Parser) anonymous.__proto__ = Parser;\n      anonymous.prototype = Object.create(Parser && Parser.prototype);\n      anonymous.prototype.constructor = anonymous;\n\n      anonymous.prototype.parseExport = function parseExport(node, exports) {\n        skipWhiteSpace.lastIndex = this.pos;\n        var skip = skipWhiteSpace.exec(this.input);\n        var next = this.input.charAt(this.pos + skip[0].length);\n\n        if (next !== \"*\") {\n          return Parser.prototype.parseExport.call(this, node, exports);\n        }\n\n        this.next();\n        var specifier = this.startNode();\n        this.expect(tt.star);\n\n        if (this.eatContextual(\"as\")) {\n          node.declaration = null;\n          specifier.exported = this.parseIdent(true);\n          this.checkExport(exports, specifier.exported.name, this.lastTokStart);\n          node.specifiers = [this.finishNode(specifier, \"ExportNamespaceSpecifier\")];\n        }\n\n        this.expectContextual(\"from\");\n\n        if (this.type !== tt.string) {\n          this.unexpected();\n        }\n\n        node.source = this.parseExprAtom();\n        this.semicolon();\n        return this.finishNode(node, node.specifiers ? \"ExportNamedDeclaration\" : \"ExportAllDeclaration\");\n      };\n\n      return anonymous;\n    }(Parser)\n  );\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/acorn-node/lib/export-ns-from/index.js"],"names":["skipWhiteSpace","tt","require","tokTypes","module","exports","Parser","anonymous","apply","arguments","__proto__","prototype","Object","create","constructor","parseExport","node","lastIndex","pos","skip","exec","input","next","charAt","length","call","specifier","startNode","expect","star","eatContextual","declaration","exported","parseIdent","checkExport","name","lastTokStart","specifiers","finishNode","expectContextual","type","string","unexpected","source","parseExprAtom","semicolon"],"mappings":"AAAA;AAEA;;AAEA,IAAIA,cAAc,GAAG,+BAArB;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,QAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAASC,MAAT,EAAiB;AAChC;AAAO;AAAc,cAAUA,MAAV,EAAkB;AACrC,eAASC,SAAT,GAAsB;AACpBD,QAAAA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB;AACD;;AAED,UAAKH,MAAL,EAAcC,SAAS,CAACG,SAAV,GAAsBJ,MAAtB;AACdC,MAAAA,SAAS,CAACI,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAeP,MAAM,IAAIA,MAAM,CAACK,SAAhC,CAAtB;AACAJ,MAAAA,SAAS,CAACI,SAAV,CAAoBG,WAApB,GAAkCP,SAAlC;;AAEAA,MAAAA,SAAS,CAACI,SAAV,CAAoBI,WAApB,GAAkC,SAASA,WAAT,CAAsBC,IAAtB,EAA4BX,OAA5B,EAAqC;AACrEL,QAAAA,cAAc,CAACiB,SAAf,GAA2B,KAAKC,GAAhC;AACA,YAAIC,IAAI,GAAGnB,cAAc,CAACoB,IAAf,CAAoB,KAAKC,KAAzB,CAAX;AACA,YAAIC,IAAI,GAAG,KAAKD,KAAL,CAAWE,MAAX,CAAkB,KAAKL,GAAL,GAAWC,IAAI,CAAC,CAAD,CAAJ,CAAQK,MAArC,CAAX;;AACA,YAAIF,IAAI,KAAK,GAAb,EAAkB;AAAE,iBAAOhB,MAAM,CAACK,SAAP,CAAiBI,WAAjB,CAA6BU,IAA7B,CAAkC,IAAlC,EAAwCT,IAAxC,EAA8CX,OAA9C,CAAP;AAA+D;;AAEnF,aAAKiB,IAAL;AACA,YAAII,SAAS,GAAG,KAAKC,SAAL,EAAhB;AACA,aAAKC,MAAL,CAAY3B,EAAE,CAAC4B,IAAf;;AACA,YAAI,KAAKC,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5Bd,UAAAA,IAAI,CAACe,WAAL,GAAmB,IAAnB;AACAL,UAAAA,SAAS,CAACM,QAAV,GAAqB,KAAKC,UAAL,CAAgB,IAAhB,CAArB;AACA,eAAKC,WAAL,CAAiB7B,OAAjB,EAA0BqB,SAAS,CAACM,QAAV,CAAmBG,IAA7C,EAAmD,KAAKC,YAAxD;AACApB,UAAAA,IAAI,CAACqB,UAAL,GAAkB,CAAC,KAAKC,UAAL,CAAgBZ,SAAhB,EAA2B,0BAA3B,CAAD,CAAlB;AACD;;AACD,aAAKa,gBAAL,CAAsB,MAAtB;;AACA,YAAI,KAAKC,IAAL,KAAcvC,EAAE,CAACwC,MAArB,EAA6B;AAAE,eAAKC,UAAL;AAAmB;;AAClD1B,QAAAA,IAAI,CAAC2B,MAAL,GAAc,KAAKC,aAAL,EAAd;AACA,aAAKC,SAAL;AACA,eAAO,KAAKP,UAAL,CAAgBtB,IAAhB,EAAsBA,IAAI,CAACqB,UAAL,GAAkB,wBAAlB,GAA6C,sBAAnE,CAAP;AACD,OApBD;;AAsBA,aAAO9B,SAAP;AACD,KAhCoB,CAgCnBD,MAhCmB;AAArB;AAiCD,CAlCD","sourcesContent":["/* Generated by `npm run build`, do not edit! */\n\n\"use strict\"\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g\n\nvar tt = require(\"acorn\").tokTypes\n\nmodule.exports = function(Parser) {\n  return /*@__PURE__*/(function (Parser) {\n    function anonymous () {\n      Parser.apply(this, arguments);\n    }\n\n    if ( Parser ) anonymous.__proto__ = Parser;\n    anonymous.prototype = Object.create( Parser && Parser.prototype );\n    anonymous.prototype.constructor = anonymous;\n\n    anonymous.prototype.parseExport = function parseExport (node, exports) {\n      skipWhiteSpace.lastIndex = this.pos\n      var skip = skipWhiteSpace.exec(this.input)\n      var next = this.input.charAt(this.pos + skip[0].length)\n      if (next !== \"*\") { return Parser.prototype.parseExport.call(this, node, exports) }\n\n      this.next()\n      var specifier = this.startNode()\n      this.expect(tt.star)\n      if (this.eatContextual(\"as\")) {\n        node.declaration = null\n        specifier.exported = this.parseIdent(true)\n        this.checkExport(exports, specifier.exported.name, this.lastTokStart)\n        node.specifiers = [this.finishNode(specifier, \"ExportNamespaceSpecifier\")]\n      }\n      this.expectContextual(\"from\")\n      if (this.type !== tt.string) { this.unexpected() }\n      node.source = this.parseExprAtom()\n      this.semicolon()\n      return this.finishNode(node, node.specifiers ? \"ExportNamedDeclaration\" : \"ExportAllDeclaration\")\n    };\n\n    return anonymous;\n  }(Parser))\n}\n"]},"metadata":{},"sourceType":"script"}