{"ast":null,"code":"/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n'use strict';\n/**\n * Module dependencies\n */\n\nvar expand = require('expand-range');\n\nvar repeat = require('repeat-element');\n\nvar tokens = require('preserve');\n/**\n * Expose `braces`\n */\n\n\nmodule.exports = function (str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n\n  return braces(str, options);\n};\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n\n  var opts = options || {};\n  arr = arr || [];\n\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n\n  var fn = opts.fn;\n  var es6;\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n\n  switch (m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n\n    case ' ':\n      return splitWhitespace(str);\n\n    case '{,}':\n      return exponential(str, opts, braces);\n\n    case '{}':\n      return emptyBraces(str, arr, opts);\n\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = tokens.before(str, es6Regex());\n      }\n\n  }\n\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n\n  var match = braceRe.exec(str);\n\n  if (match == null) {\n    return [str];\n  }\n\n  var outter = match[1];\n  var inner = match[2];\n\n  if (inner === '') {\n    return [str];\n  }\n\n  var segs, segsLength;\n\n  if (inner.indexOf('..') !== -1) {\n    segs = expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n  } else {\n    segs = inner.split(',');\n\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n\n    segsLength = segs.length;\n\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n\n  var len = segs.length;\n  var i = 0,\n      val;\n\n  while (len--) {\n    var path = segs[i++];\n\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n\n    val = splice(str, outter, path);\n\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) {\n        continue;\n      }\n\n      arr.push(es6 ? tokens.after(val) : val);\n    }\n  }\n\n  if (opts.strict) {\n    return filter(arr, filterEmpty);\n  }\n\n  return arr;\n}\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n  var parts = str.split('{,}');\n\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n\n    if (idx === -1) {\n      arr.push(ele);\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, repeat(ele, num));\n      }\n    }\n  }\n\n  return arr;\n}\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n/**\n * Handle empty braces: `{}`\n */\n\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n/**\n * Filter out empty-ish values\n */\n\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n/**\n * Handle patterns with whitespace\n */\n\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n\n  return res;\n}\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function (ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function (ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function (ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n/**\n * Regex for common patterns\n */\n\n\nfunction patternRegex() {\n  return /\\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n/**\n * Braces regex.\n */\n\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n/**\n * es6 delimiter regex.\n */\n\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\n\nvar braceRe;\nvar patternRe;\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement + str.substr(i + token.length);\n}\n/**\n * Fast array map\n */\n\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n\n  return res;\n}\n/**\n * Fast array filter\n */\n\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n\n  return res;\n}","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/rijs.resdir/node_modules/braces/index.js"],"names":["expand","require","repeat","tokens","module","exports","str","options","Error","braces","arr","Array","isArray","opts","nodupes","fn","es6","patternRe","RegExp","patternRegex","matches","match","m","escapeCommas","escapeDots","escapePaths","splitWhitespace","exponential","emptyBraces","escapeBraces","test","concat","before","es6Regex","braceRe","braceRegex","exec","outter","inner","segs","segsLength","indexOf","split","length","join","makeRe","replace","wrap","bash","len","i","val","path","splice","push","after","strict","filter","filterEmpty","esc","exp","res","parts","ele","idx","num","Math","pow","apply","ch","map","token","replacement","substr","cb","TypeError","slice"],"mappings":"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","sourcesContent":["/*!\n * braces <https://github.com/jonschlinkert/braces>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n/**\n * Module dependencies\n */\n\nvar expand = require('expand-range');\nvar repeat = require('repeat-element');\nvar tokens = require('preserve');\n\n/**\n * Expose `braces`\n */\n\nmodule.exports = function(str, options) {\n  if (typeof str !== 'string') {\n    throw new Error('braces expects a string');\n  }\n  return braces(str, options);\n};\n\n/**\n * Expand `{foo,bar}` or `{1..5}` braces in the\n * given `string`.\n *\n * @param  {String} `str`\n * @param  {Array} `arr`\n * @param  {Object} `options`\n * @return {Array}\n */\n\nfunction braces(str, arr, options) {\n  if (str === '') {\n    return [];\n  }\n\n  if (!Array.isArray(arr)) {\n    options = arr;\n    arr = [];\n  }\n\n  var opts = options || {};\n  arr = arr || [];\n\n  if (typeof opts.nodupes === 'undefined') {\n    opts.nodupes = true;\n  }\n\n  var fn = opts.fn;\n  var es6;\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = {};\n  }\n\n  if (!(patternRe instanceof RegExp)) {\n    patternRe = patternRegex();\n  }\n\n  var matches = str.match(patternRe) || [];\n  var m = matches[0];\n\n  switch(m) {\n    case '\\\\,':\n      return escapeCommas(str, arr, opts);\n    case '\\\\.':\n      return escapeDots(str, arr, opts);\n    case '\\/.':\n      return escapePaths(str, arr, opts);\n    case ' ':\n      return splitWhitespace(str);\n    case '{,}':\n      return exponential(str, opts, braces);\n    case '{}':\n      return emptyBraces(str, arr, opts);\n    case '\\\\{':\n    case '\\\\}':\n      return escapeBraces(str, arr, opts);\n    case '${':\n      if (!/\\{[^{]+\\{/.test(str)) {\n        return arr.concat(str);\n      } else {\n        es6 = true;\n        str = tokens.before(str, es6Regex());\n      }\n  }\n\n  if (!(braceRe instanceof RegExp)) {\n    braceRe = braceRegex();\n  }\n\n  var match = braceRe.exec(str);\n  if (match == null) {\n    return [str];\n  }\n\n  var outter = match[1];\n  var inner = match[2];\n  if (inner === '') { return [str]; }\n\n  var segs, segsLength;\n\n  if (inner.indexOf('..') !== -1) {\n    segs = expand(inner, opts, fn) || inner.split(',');\n    segsLength = segs.length;\n\n  } else if (inner[0] === '\"' || inner[0] === '\\'') {\n    return arr.concat(str.split(/['\"]/).join(''));\n\n  } else {\n    segs = inner.split(',');\n    if (opts.makeRe) {\n      return braces(str.replace(outter, wrap(segs, '|')), opts);\n    }\n\n    segsLength = segs.length;\n    if (segsLength === 1 && opts.bash) {\n      segs[0] = wrap(segs[0], '\\\\');\n    }\n  }\n\n  var len = segs.length;\n  var i = 0, val;\n\n  while (len--) {\n    var path = segs[i++];\n\n    if (/(\\.[^.\\/])/.test(path)) {\n      if (segsLength > 1) {\n        return segs;\n      } else {\n        return [str];\n      }\n    }\n\n    val = splice(str, outter, path);\n\n    if (/\\{[^{}]+?\\}/.test(val)) {\n      arr = braces(val, arr, opts);\n    } else if (val !== '') {\n      if (opts.nodupes && arr.indexOf(val) !== -1) { continue; }\n      arr.push(es6 ? tokens.after(val) : val);\n    }\n  }\n\n  if (opts.strict) { return filter(arr, filterEmpty); }\n  return arr;\n}\n\n/**\n * Expand exponential ranges\n *\n *   `a{,}{,}` => ['a', 'a', 'a', 'a']\n */\n\nfunction exponential(str, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = null;\n  }\n\n  var opts = options || {};\n  var esc = '__ESC_EXP__';\n  var exp = 0;\n  var res;\n\n  var parts = str.split('{,}');\n  if (opts.nodupes) {\n    return fn(parts.join(''), opts);\n  }\n\n  exp = parts.length - 1;\n  res = fn(parts.join(esc), opts);\n  var len = res.length;\n  var arr = [];\n  var i = 0;\n\n  while (len--) {\n    var ele = res[i++];\n    var idx = ele.indexOf(esc);\n\n    if (idx === -1) {\n      arr.push(ele);\n\n    } else {\n      ele = ele.split('__ESC_EXP__').join('');\n      if (!!ele && opts.nodupes !== false) {\n        arr.push(ele);\n\n      } else {\n        var num = Math.pow(2, exp);\n        arr.push.apply(arr, repeat(ele, num));\n      }\n    }\n  }\n  return arr;\n}\n\n/**\n * Wrap a value with parens, brackets or braces,\n * based on the given character/separator.\n *\n * @param  {String|Array} `val`\n * @param  {String} `ch`\n * @return {String}\n */\n\nfunction wrap(val, ch) {\n  if (ch === '|') {\n    return '(' + val.join(ch) + ')';\n  }\n  if (ch === ',') {\n    return '{' + val.join(ch) + '}';\n  }\n  if (ch === '-') {\n    return '[' + val.join(ch) + ']';\n  }\n  if (ch === '\\\\') {\n    return '\\\\{' + val + '\\\\}';\n  }\n}\n\n/**\n * Handle empty braces: `{}`\n */\n\nfunction emptyBraces(str, arr, opts) {\n  return braces(str.split('{}').join('\\\\{\\\\}'), arr, opts);\n}\n\n/**\n * Filter out empty-ish values\n */\n\nfunction filterEmpty(ele) {\n  return !!ele && ele !== '\\\\';\n}\n\n/**\n * Handle patterns with whitespace\n */\n\nfunction splitWhitespace(str) {\n  var segs = str.split(' ');\n  var len = segs.length;\n  var res = [];\n  var i = 0;\n\n  while (len--) {\n    res.push.apply(res, braces(segs[i++]));\n  }\n  return res;\n}\n\n/**\n * Handle escaped braces: `\\\\{foo,bar}`\n */\n\nfunction escapeBraces(str, arr, opts) {\n  if (!/\\{[^{]+\\{/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\{').join('__LT_BRACE__');\n    str = str.split('\\\\}').join('__RT_BRACE__');\n    return map(braces(str, arr, opts), function(ele) {\n      ele = ele.split('__LT_BRACE__').join('{');\n      return ele.split('__RT_BRACE__').join('}');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapeDots(str, arr, opts) {\n  if (!/[^\\\\]\\..+\\\\\\./.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\.').join('__ESC_DOT__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_DOT__').join('.');\n    });\n  }\n}\n\n/**\n * Handle escaped dots: `{1\\\\.2}`\n */\n\nfunction escapePaths(str, arr, opts) {\n  str = str.split('\\/.').join('__ESC_PATH__');\n  return map(braces(str, arr, opts), function(ele) {\n    return ele.split('__ESC_PATH__').join('\\/.');\n  });\n}\n\n/**\n * Handle escaped commas: `{a\\\\,b}`\n */\n\nfunction escapeCommas(str, arr, opts) {\n  if (!/\\w,/.test(str)) {\n    return arr.concat(str.split('\\\\').join(''));\n  } else {\n    str = str.split('\\\\,').join('__ESC_COMMA__');\n    return map(braces(str, arr, opts), function(ele) {\n      return ele.split('__ESC_COMMA__').join(',');\n    });\n  }\n}\n\n/**\n * Regex for common patterns\n */\n\nfunction patternRegex() {\n  return /\\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\\\,(?=.*[{}])|\\/\\.(?=.*[{}])|\\\\\\.(?={)|\\\\{|\\\\}/;\n}\n\n/**\n * Braces regex.\n */\n\nfunction braceRegex() {\n  return /.*(\\\\?\\{([^}]+)\\})/;\n}\n\n/**\n * es6 delimiter regex.\n */\n\nfunction es6Regex() {\n  return /\\$\\{([^}]+)\\}/;\n}\n\nvar braceRe;\nvar patternRe;\n\n/**\n * Faster alternative to `String.replace()` when the\n * index of the token to be replaces can't be supplied\n */\n\nfunction splice(str, token, replacement) {\n  var i = str.indexOf(token);\n  return str.substr(0, i) + replacement\n    + str.substr(i + token.length);\n}\n\n/**\n * Fast array map\n */\n\nfunction map(arr, fn) {\n  if (arr == null) {\n    return [];\n  }\n\n  var len = arr.length;\n  var res = new Array(len);\n  var i = -1;\n\n  while (++i < len) {\n    res[i] = fn(arr[i], i, arr);\n  }\n\n  return res;\n}\n\n/**\n * Fast array filter\n */\n\nfunction filter(arr, cb) {\n  if (arr == null) return [];\n  if (typeof cb !== 'function') {\n    throw new TypeError('braces: filter expects a callback function.');\n  }\n\n  var len = arr.length;\n  var res = arr.slice();\n  var i = 0;\n\n  while (len--) {\n    if (!cb(arr[len], i++)) {\n      res.splice(len, 1);\n    }\n  }\n  return res;\n}\n"]},"metadata":{},"sourceType":"script"}