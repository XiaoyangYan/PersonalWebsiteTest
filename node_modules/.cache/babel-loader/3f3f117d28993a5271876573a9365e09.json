{"ast":null,"code":"var core = require('./core');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar caller = require('./caller.js');\n\nvar nodeModulesPaths = require('./node-modules-paths.js');\n\nmodule.exports = function (x, opts) {\n  if (!opts) opts = {};\n\n  var isFile = opts.isFile || function (file) {\n    try {\n      var stat = fs.statSync(file);\n    } catch (err) {\n      if (err && err.code === 'ENOENT') return false;\n    }\n\n    return stat.isFile() || stat.isFIFO();\n  };\n\n  var readFileSync = opts.readFileSync || fs.readFileSync;\n  var extensions = opts.extensions || ['.js'];\n  var y = opts.basedir || path.dirname(caller());\n  opts.paths = opts.paths || [];\n\n  if (/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[\\\\\\/])/.test(x)) {\n    var res = path.resolve(y, x);\n    if (x === '..') res += '/';\n    var m = loadAsFileSync(res) || loadAsDirectorySync(res);\n    if (m) return m;\n  } else {\n    var n = loadNodeModulesSync(x, y);\n    if (n) return n;\n  }\n\n  if (core[x]) return x;\n  throw new Error(\"Cannot find module '\" + x + \"' from '\" + y + \"'\");\n\n  function loadAsFileSync(x) {\n    if (isFile(x)) {\n      return x;\n    }\n\n    for (var i = 0; i < extensions.length; i++) {\n      var file = x + extensions[i];\n\n      if (isFile(file)) {\n        return file;\n      }\n    }\n  }\n\n  function loadAsDirectorySync(x) {\n    var pkgfile = path.join(x, '/package.json');\n\n    if (isFile(pkgfile)) {\n      var body = readFileSync(pkgfile, 'utf8');\n\n      try {\n        var pkg = JSON.parse(body);\n\n        if (opts.packageFilter) {\n          pkg = opts.packageFilter(pkg, x);\n        }\n\n        if (pkg.main) {\n          var m = loadAsFileSync(path.resolve(x, pkg.main));\n          if (m) return m;\n          var n = loadAsDirectorySync(path.resolve(x, pkg.main));\n          if (n) return n;\n        }\n      } catch (err) {}\n    }\n\n    return loadAsFileSync(path.join(x, '/index'));\n  }\n\n  function loadNodeModulesSync(x, start) {\n    var dirs = nodeModulesPaths(start, opts);\n\n    for (var i = 0; i < dirs.length; i++) {\n      var dir = dirs[i];\n      var m = loadAsFileSync(path.join(dir, '/', x));\n      if (m) return m;\n      var n = loadAsDirectorySync(path.join(dir, '/', x));\n      if (n) return n;\n    }\n  }\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/browser-resolve/node_modules/resolve/lib/sync.js"],"names":["core","require","fs","path","caller","nodeModulesPaths","module","exports","x","opts","isFile","file","stat","statSync","err","code","isFIFO","readFileSync","extensions","y","basedir","dirname","paths","test","res","resolve","m","loadAsFileSync","loadAsDirectorySync","n","loadNodeModulesSync","Error","i","length","pkgfile","join","body","pkg","JSON","parse","packageFilter","main","start","dirs","dir"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,aAAD,CAApB;;AACA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,yBAAD,CAA9B;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAAUC,CAAV,EAAaC,IAAb,EAAmB;AAChC,MAAI,CAACA,IAAL,EAAWA,IAAI,GAAG,EAAP;;AACX,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAL,IAAe,UAAUC,IAAV,EAAgB;AACxC,QAAI;AAAE,UAAIC,IAAI,GAAGV,EAAE,CAACW,QAAH,CAAYF,IAAZ,CAAX;AAA8B,KAApC,CACA,OAAOG,GAAP,EAAY;AAAE,UAAIA,GAAG,IAAIA,GAAG,CAACC,IAAJ,KAAa,QAAxB,EAAkC,OAAO,KAAP;AAAc;;AAC9D,WAAOH,IAAI,CAACF,MAAL,MAAiBE,IAAI,CAACI,MAAL,EAAxB;AACH,GAJD;;AAKA,MAAIC,YAAY,GAAGR,IAAI,CAACQ,YAAL,IAAqBf,EAAE,CAACe,YAA3C;AAEA,MAAIC,UAAU,GAAGT,IAAI,CAACS,UAAL,IAAmB,CAAE,KAAF,CAApC;AACA,MAAIC,CAAC,GAAGV,IAAI,CAACW,OAAL,IAAgBjB,IAAI,CAACkB,OAAL,CAAajB,MAAM,EAAnB,CAAxB;AAEAK,EAAAA,IAAI,CAACa,KAAL,GAAab,IAAI,CAACa,KAAL,IAAc,EAA3B;;AAEA,MAAI,2CAA2CC,IAA3C,CAAgDf,CAAhD,CAAJ,EAAwD;AACpD,QAAIgB,GAAG,GAAGrB,IAAI,CAACsB,OAAL,CAAaN,CAAb,EAAgBX,CAAhB,CAAV;AACA,QAAIA,CAAC,KAAK,IAAV,EAAgBgB,GAAG,IAAI,GAAP;AAChB,QAAIE,CAAC,GAAGC,cAAc,CAACH,GAAD,CAAd,IAAuBI,mBAAmB,CAACJ,GAAD,CAAlD;AACA,QAAIE,CAAJ,EAAO,OAAOA,CAAP;AACV,GALD,MAKO;AACH,QAAIG,CAAC,GAAGC,mBAAmB,CAACtB,CAAD,EAAIW,CAAJ,CAA3B;AACA,QAAIU,CAAJ,EAAO,OAAOA,CAAP;AACV;;AAED,MAAI7B,IAAI,CAACQ,CAAD,CAAR,EAAa,OAAOA,CAAP;AAEb,QAAM,IAAIuB,KAAJ,CAAU,yBAAyBvB,CAAzB,GAA6B,UAA7B,GAA0CW,CAA1C,GAA8C,GAAxD,CAAN;;AAEA,WAASQ,cAAT,CAAyBnB,CAAzB,EAA4B;AACxB,QAAIE,MAAM,CAACF,CAAD,CAAV,EAAe;AACX,aAAOA,CAAP;AACH;;AAED,SAAK,IAAIwB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,UAAU,CAACe,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,UAAIrB,IAAI,GAAGH,CAAC,GAAGU,UAAU,CAACc,CAAD,CAAzB;;AACA,UAAItB,MAAM,CAACC,IAAD,CAAV,EAAkB;AACd,eAAOA,IAAP;AACH;AACJ;AACJ;;AAED,WAASiB,mBAAT,CAA8BpB,CAA9B,EAAiC;AAC7B,QAAI0B,OAAO,GAAG/B,IAAI,CAACgC,IAAL,CAAU3B,CAAV,EAAa,eAAb,CAAd;;AACA,QAAIE,MAAM,CAACwB,OAAD,CAAV,EAAqB;AACjB,UAAIE,IAAI,GAAGnB,YAAY,CAACiB,OAAD,EAAU,MAAV,CAAvB;;AACA,UAAI;AACA,YAAIG,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAV;;AACA,YAAI3B,IAAI,CAAC+B,aAAT,EAAwB;AACpBH,UAAAA,GAAG,GAAG5B,IAAI,CAAC+B,aAAL,CAAmBH,GAAnB,EAAwB7B,CAAxB,CAAN;AACH;;AAED,YAAI6B,GAAG,CAACI,IAAR,EAAc;AACV,cAAIf,CAAC,GAAGC,cAAc,CAACxB,IAAI,CAACsB,OAAL,CAAajB,CAAb,EAAgB6B,GAAG,CAACI,IAApB,CAAD,CAAtB;AACA,cAAIf,CAAJ,EAAO,OAAOA,CAAP;AACP,cAAIG,CAAC,GAAGD,mBAAmB,CAACzB,IAAI,CAACsB,OAAL,CAAajB,CAAb,EAAgB6B,GAAG,CAACI,IAApB,CAAD,CAA3B;AACA,cAAIZ,CAAJ,EAAO,OAAOA,CAAP;AACV;AACJ,OAZD,CAaA,OAAOf,GAAP,EAAY,CAAE;AACjB;;AAED,WAAOa,cAAc,CAACxB,IAAI,CAACgC,IAAL,CAAW3B,CAAX,EAAc,QAAd,CAAD,CAArB;AACH;;AAED,WAASsB,mBAAT,CAA8BtB,CAA9B,EAAiCkC,KAAjC,EAAwC;AACpC,QAAIC,IAAI,GAAGtC,gBAAgB,CAACqC,KAAD,EAAQjC,IAAR,CAA3B;;AACA,SAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGW,IAAI,CAACV,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,UAAIY,GAAG,GAAGD,IAAI,CAACX,CAAD,CAAd;AACA,UAAIN,CAAC,GAAGC,cAAc,CAACxB,IAAI,CAACgC,IAAL,CAAWS,GAAX,EAAgB,GAAhB,EAAqBpC,CAArB,CAAD,CAAtB;AACA,UAAIkB,CAAJ,EAAO,OAAOA,CAAP;AACP,UAAIG,CAAC,GAAGD,mBAAmB,CAACzB,IAAI,CAACgC,IAAL,CAAWS,GAAX,EAAgB,GAAhB,EAAqBpC,CAArB,CAAD,CAA3B;AACA,UAAIqB,CAAJ,EAAO,OAAOA,CAAP;AACV;AACJ;AACJ,CA1ED","sourcesContent":["var core = require('./core');\nvar fs = require('fs');\nvar path = require('path');\nvar caller = require('./caller.js');\nvar nodeModulesPaths = require('./node-modules-paths.js');\n\nmodule.exports = function (x, opts) {\n    if (!opts) opts = {};\n    var isFile = opts.isFile || function (file) {\n        try { var stat = fs.statSync(file) }\n        catch (err) { if (err && err.code === 'ENOENT') return false }\n        return stat.isFile() || stat.isFIFO();\n    };\n    var readFileSync = opts.readFileSync || fs.readFileSync;\n    \n    var extensions = opts.extensions || [ '.js' ];\n    var y = opts.basedir || path.dirname(caller());\n\n    opts.paths = opts.paths || [];\n\n    if (/^(?:\\.\\.?(?:\\/|$)|\\/|([A-Za-z]:)?[\\\\\\/])/.test(x)) {\n        var res = path.resolve(y, x);\n        if (x === '..') res += '/';\n        var m = loadAsFileSync(res) || loadAsDirectorySync(res);\n        if (m) return m;\n    } else {\n        var n = loadNodeModulesSync(x, y);\n        if (n) return n;\n    }\n    \n    if (core[x]) return x;\n    \n    throw new Error(\"Cannot find module '\" + x + \"' from '\" + y + \"'\");\n    \n    function loadAsFileSync (x) {\n        if (isFile(x)) {\n            return x;\n        }\n        \n        for (var i = 0; i < extensions.length; i++) {\n            var file = x + extensions[i];\n            if (isFile(file)) {\n                return file;\n            }\n        }\n    }\n    \n    function loadAsDirectorySync (x) {\n        var pkgfile = path.join(x, '/package.json');\n        if (isFile(pkgfile)) {\n            var body = readFileSync(pkgfile, 'utf8');\n            try {\n                var pkg = JSON.parse(body);\n                if (opts.packageFilter) {\n                    pkg = opts.packageFilter(pkg, x);\n                }\n                \n                if (pkg.main) {\n                    var m = loadAsFileSync(path.resolve(x, pkg.main));\n                    if (m) return m;\n                    var n = loadAsDirectorySync(path.resolve(x, pkg.main));\n                    if (n) return n;\n                }\n            }\n            catch (err) {}\n        }\n        \n        return loadAsFileSync(path.join( x, '/index'));\n    }\n    \n    function loadNodeModulesSync (x, start) {\n        var dirs = nodeModulesPaths(start, opts);\n        for (var i = 0; i < dirs.length; i++) {\n            var dir = dirs[i];\n            var m = loadAsFileSync(path.join( dir, '/', x));\n            if (m) return m;\n            var n = loadAsDirectorySync(path.join( dir, '/', x ));\n            if (n) return n;\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"script"}