{"ast":null,"code":"/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\n'use strict';\n\nconst _require = require('readable-stream'),\n      Transform = _require.Transform;\n\nconst _require2 = require('crc'),\n      crc32 = _require2.crc32;\n\nclass CRC32Stream extends Transform {\n  constructor(options) {\n    super(options);\n    this.checksum = Buffer.allocUnsafe(4);\n    this.checksum.writeInt32BE(0, 0);\n    this.rawSize = 0;\n  }\n\n  _transform(chunk, encoding, callback) {\n    if (chunk) {\n      this.checksum = crc32(chunk, this.checksum);\n      this.rawSize += chunk.length;\n    }\n\n    callback(null, chunk);\n  }\n\n  digest(encoding) {\n    const checksum = Buffer.allocUnsafe(4);\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\n    return encoding ? checksum.toString(encoding) : checksum;\n  }\n\n  hex() {\n    return this.digest('hex').toUpperCase();\n  }\n\n  size() {\n    return this.rawSize;\n  }\n\n}\n\nmodule.exports = CRC32Stream;","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/crc32-stream/lib/crc32-stream.js"],"names":["require","Transform","crc32","CRC32Stream","constructor","options","checksum","Buffer","allocUnsafe","writeInt32BE","rawSize","_transform","chunk","encoding","callback","length","digest","writeUInt32BE","toString","hex","toUpperCase","size","module","exports"],"mappings":"AAAA;;;;;;;AAQC;;iBAEmBA,OAAO,CAAC,iBAAD,C;MAApBC,S,YAAAA,S;;kBAESD,OAAO,CAAC,KAAD,C;MAAhBE,K,aAAAA,K;;AAEP,MAAMC,WAAN,SAA0BF,SAA1B,CAAoC;AAClCG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;AACA,SAAKC,QAAL,GAAgBC,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAhB;AACA,SAAKF,QAAL,CAAcG,YAAd,CAA2B,CAA3B,EAA8B,CAA9B;AAEA,SAAKC,OAAL,GAAe,CAAf;AACD;;AAEDC,EAAAA,UAAU,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAlB,EAA4B;AACpC,QAAIF,KAAJ,EAAW;AACT,WAAKN,QAAL,GAAgBJ,KAAK,CAACU,KAAD,EAAQ,KAAKN,QAAb,CAArB;AACA,WAAKI,OAAL,IAAgBE,KAAK,CAACG,MAAtB;AACD;;AAEDD,IAAAA,QAAQ,CAAC,IAAD,EAAOF,KAAP,CAAR;AACD;;AAEDI,EAAAA,MAAM,CAACH,QAAD,EAAW;AACf,UAAMP,QAAQ,GAAGC,MAAM,CAACC,WAAP,CAAmB,CAAnB,CAAjB;AACAF,IAAAA,QAAQ,CAACW,aAAT,CAAuB,KAAKX,QAAL,KAAkB,CAAzC,EAA4C,CAA5C;AACA,WAAOO,QAAQ,GAAGP,QAAQ,CAACY,QAAT,CAAkBL,QAAlB,CAAH,GAAiCP,QAAhD;AACD;;AAEDa,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKH,MAAL,CAAY,KAAZ,EAAmBI,WAAnB,EAAP;AACD;;AAEDC,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKX,OAAZ;AACD;;AA9BiC;;AAiCpCY,MAAM,CAACC,OAAP,GAAiBpB,WAAjB","sourcesContent":["/**\r\n * node-crc32-stream\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-crc32-stream/blob/master/LICENSE-MIT\r\n */\r\n\r\n 'use strict';\r\n\r\nconst {Transform} = require('readable-stream');\r\n\r\nconst {crc32} = require('crc');\r\n\r\nclass CRC32Stream extends Transform {\r\n  constructor(options) {\r\n    super(options);\r\n    this.checksum = Buffer.allocUnsafe(4);\r\n    this.checksum.writeInt32BE(0, 0);\r\n\r\n    this.rawSize = 0;\r\n  }\r\n\r\n  _transform(chunk, encoding, callback) {\r\n    if (chunk) {\r\n      this.checksum = crc32(chunk, this.checksum);\r\n      this.rawSize += chunk.length;\r\n    }\r\n\r\n    callback(null, chunk);\r\n  }\r\n\r\n  digest(encoding) {\r\n    const checksum = Buffer.allocUnsafe(4);\r\n    checksum.writeUInt32BE(this.checksum >>> 0, 0);\r\n    return encoding ? checksum.toString(encoding) : checksum;\r\n  }\r\n\r\n  hex() {\r\n    return this.digest('hex').toUpperCase();\r\n  }\r\n\r\n  size() {\r\n    return this.rawSize;\r\n  }\r\n}\r\n\r\nmodule.exports = CRC32Stream;\r\n"]},"metadata":{},"sourceType":"script"}