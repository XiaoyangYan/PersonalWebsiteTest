{"ast":null,"code":"/**\r\n * archiver-utils\r\n *\r\n * Copyright (c) 2015 Chris Talkington.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/archiver-utils/blob/master/LICENSE\r\n */\nvar fs = require('graceful-fs');\n\nvar path = require('path');\n\nvar nutil = require('util');\n\nvar lazystream = require('lazystream');\n\nvar normalizePath = require('normalize-path');\n\nvar defaults = require('lodash.defaults');\n\nvar Stream = require('stream').Stream;\n\nvar PassThrough = require('readable-stream').PassThrough;\n\nvar utils = module.exports = {};\nutils.file = require('./file.js');\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + nutils.inspect(path));\n  }\n}\n\nutils.collectStream = function (source, callback) {\n  var collection = [];\n  var size = 0;\n  source.on('error', callback);\n  source.on('data', function (chunk) {\n    collection.push(chunk);\n    size += chunk.length;\n  });\n  source.on('end', function () {\n    var buf = new Buffer(size);\n    var offset = 0;\n    collection.forEach(function (data) {\n      data.copy(buf, offset);\n      offset += data.length;\n    });\n    callback(null, buf);\n  });\n};\n\nutils.dateify = function (dateish) {\n  dateish = dateish || new Date();\n\n  if (dateish instanceof Date) {\n    dateish = dateish;\n  } else if (typeof dateish === 'string') {\n    dateish = new Date(dateish);\n  } else {\n    dateish = new Date();\n  }\n\n  return dateish;\n}; // this is slightly different from lodash version\n\n\nutils.defaults = function (object, source, guard) {\n  var args = arguments;\n  args[0] = args[0] || {};\n  return defaults(...args);\n};\n\nutils.isStream = function (source) {\n  return source instanceof Stream;\n};\n\nutils.lazyReadStream = function (filepath) {\n  return new lazystream.Readable(function () {\n    return fs.createReadStream(filepath);\n  });\n};\n\nutils.normalizeInputSource = function (source) {\n  if (source === null) {\n    return new Buffer(0);\n  } else if (typeof source === 'string') {\n    return new Buffer(source);\n  } else if (utils.isStream(source) && !source._readableState) {\n    var normalized = new PassThrough();\n    source.pipe(normalized);\n    return normalized;\n  }\n\n  return source;\n};\n\nutils.sanitizePath = function (filepath) {\n  return normalizePath(filepath, false).replace(/^\\w+:/, '').replace(/^(\\.\\.\\/|\\/)+/, '');\n};\n\nutils.trailingSlashIt = function (str) {\n  return str.slice(-1) !== '/' ? str + '/' : str;\n};\n\nutils.unixifyPath = function (filepath) {\n  return normalizePath(filepath, false).replace(/^\\w+:/, '');\n};\n\nutils.walkdir = function (dirpath, base, callback) {\n  var results = [];\n\n  if (typeof base === 'function') {\n    callback = base;\n    base = dirpath;\n  }\n\n  fs.readdir(dirpath, function (err, list) {\n    var i = 0;\n    var file;\n    var filepath;\n\n    if (err) {\n      return callback(err);\n    }\n\n    (function next() {\n      file = list[i++];\n\n      if (!file) {\n        return callback(null, results);\n      }\n\n      filepath = path.join(dirpath, file);\n      fs.stat(filepath, function (err, stats) {\n        results.push({\n          path: filepath,\n          relative: path.relative(base, filepath).replace(/\\\\/g, '/'),\n          stats: stats\n        });\n\n        if (stats && stats.isDirectory()) {\n          utils.walkdir(filepath, base, function (err, res) {\n            res.forEach(function (dirEntry) {\n              results.push(dirEntry);\n            });\n            next();\n          });\n        } else {\n          next();\n        }\n      });\n    })();\n  });\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/archiver-utils/index.js"],"names":["fs","require","path","nutil","lazystream","normalizePath","defaults","Stream","PassThrough","utils","module","exports","file","assertPath","TypeError","nutils","inspect","collectStream","source","callback","collection","size","on","chunk","push","length","buf","Buffer","offset","forEach","data","copy","dateify","dateish","Date","object","guard","args","arguments","isStream","lazyReadStream","filepath","Readable","createReadStream","normalizeInputSource","_readableState","normalized","pipe","sanitizePath","replace","trailingSlashIt","str","slice","unixifyPath","walkdir","dirpath","base","results","readdir","err","list","i","next","join","stat","stats","relative","isDirectory","res","dirEntry"],"mappings":"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","sourcesContent":["/**\r\n * archiver-utils\r\n *\r\n * Copyright (c) 2015 Chris Talkington.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/archiver-utils/blob/master/LICENSE\r\n */\r\nvar fs = require('graceful-fs');\r\nvar path = require('path');\r\nvar nutil = require('util');\r\nvar lazystream = require('lazystream');\r\nvar normalizePath = require('normalize-path');\r\nvar defaults = require('lodash.defaults');\r\n\r\nvar Stream = require('stream').Stream;\r\nvar PassThrough = require('readable-stream').PassThrough;\r\n\r\nvar utils = module.exports = {};\r\nutils.file = require('./file.js');\r\n\r\nfunction assertPath(path) {\r\n  if (typeof path !== 'string') {\r\n    throw new TypeError('Path must be a string. Received ' + nutils.inspect(path));\r\n  }\r\n}\r\n\r\nutils.collectStream = function(source, callback) {\r\n  var collection = [];\r\n  var size = 0;\r\n\r\n  source.on('error', callback);\r\n\r\n  source.on('data', function(chunk) {\r\n    collection.push(chunk);\r\n    size += chunk.length;\r\n  });\r\n\r\n  source.on('end', function() {\r\n    var buf = new Buffer(size);\r\n    var offset = 0;\r\n\r\n    collection.forEach(function(data) {\r\n      data.copy(buf, offset);\r\n      offset += data.length;\r\n    });\r\n\r\n    callback(null, buf);\r\n  });\r\n};\r\n\r\nutils.dateify = function(dateish) {\r\n  dateish = dateish || new Date();\r\n\r\n  if (dateish instanceof Date) {\r\n    dateish = dateish;\r\n  } else if (typeof dateish === 'string') {\r\n    dateish = new Date(dateish);\r\n  } else {\r\n    dateish = new Date();\r\n  }\r\n\r\n  return dateish;\r\n};\r\n\r\n// this is slightly different from lodash version\r\nutils.defaults = function(object, source, guard) {\r\n  var args = arguments;\r\n  args[0] = args[0] || {};\r\n\r\n  return defaults(...args);\r\n};\r\n\r\nutils.isStream = function(source) {\r\n  return source instanceof Stream;\r\n};\r\n\r\nutils.lazyReadStream = function(filepath) {\r\n  return new lazystream.Readable(function() {\r\n    return fs.createReadStream(filepath);\r\n  });\r\n};\r\n\r\nutils.normalizeInputSource = function(source) {\r\n  if (source === null) {\r\n    return new Buffer(0);\r\n  } else if (typeof source === 'string') {\r\n    return new Buffer(source);\r\n  } else if (utils.isStream(source) && !source._readableState) {\r\n    var normalized = new PassThrough();\r\n    source.pipe(normalized);\r\n\r\n    return normalized;\r\n  }\r\n\r\n  return source;\r\n};\r\n\r\nutils.sanitizePath = function(filepath) {\r\n  return normalizePath(filepath, false).replace(/^\\w+:/, '').replace(/^(\\.\\.\\/|\\/)+/, '');\r\n};\r\n\r\nutils.trailingSlashIt = function(str) {\r\n  return str.slice(-1) !== '/' ? str + '/' : str;\r\n};\r\n\r\nutils.unixifyPath = function(filepath) {\r\n  return normalizePath(filepath, false).replace(/^\\w+:/, '');\r\n};\r\n\r\nutils.walkdir = function(dirpath, base, callback) {\r\n  var results = [];\r\n\r\n  if (typeof base === 'function') {\r\n    callback = base;\r\n    base = dirpath;\r\n  }\r\n\r\n  fs.readdir(dirpath, function(err, list) {\r\n    var i = 0;\r\n    var file;\r\n    var filepath;\r\n\r\n    if (err) {\r\n      return callback(err);\r\n    }\r\n\r\n    (function next() {\r\n      file = list[i++];\r\n\r\n      if (!file) {\r\n        return callback(null, results);\r\n      }\r\n\r\n      filepath = path.join(dirpath, file);\r\n\r\n      fs.stat(filepath, function(err, stats) {\r\n        results.push({\r\n          path: filepath,\r\n          relative: path.relative(base, filepath).replace(/\\\\/g, '/'),\r\n          stats: stats\r\n        });\r\n\r\n        if (stats && stats.isDirectory()) {\r\n          utils.walkdir(filepath, base, function(err, res) {\r\n            res.forEach(function(dirEntry) {\r\n              results.push(dirEntry);\r\n            });\r\n            next();\r\n          });\r\n        } else {\r\n          next();\r\n        }\r\n      });\r\n    })();\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"script"}