{"ast":null,"code":"/**\r\n * ZIP Format Plugin\r\n *\r\n * @module plugins/zip\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\nvar engine = require('zip-stream');\n\nvar util = require('archiver-utils');\n/**\r\n * @constructor\r\n * @param {ZipOptions} [options]\r\n * @param {String} [options.comment] Sets the zip archive comment.\r\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\r\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\r\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\r\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\r\n */\n\n\nvar Zip = function (options) {\n  if (!(this instanceof Zip)) {\n    return new Zip(options);\n  }\n\n  options = this.options = util.defaults(options, {\n    comment: '',\n    forceUTC: false,\n    store: false\n  });\n  this.supports = {\n    directory: true,\n    symlink: true\n  };\n  this.engine = new engine(options);\n};\n/**\r\n * @param  {(Buffer|Stream)} source\r\n * @param  {ZipEntryData} data\r\n * @param  {String} data.name Sets the entry name including internal path.\r\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\r\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\r\n * @param  {String} [data.prefix] Sets a path prefix for the entry name. Useful\r\n * when working with methods like `directory` or `glob`.\r\n * @param  {fs.Stats} [data.stats] Sets the fs stat data for this entry allowing\r\n * for reduction of fs stat calls when stat data is already known.\r\n * @param  {Boolean} [data.store=ZipOptions.store] Sets the compression method to STORE.\r\n * @param  {Function} callback\r\n * @return void\r\n */\n\n\nZip.prototype.append = function (source, data, callback) {\n  this.engine.entry(source, data, callback);\n};\n/**\r\n * @return void\r\n */\n\n\nZip.prototype.finalize = function () {\n  this.engine.finalize();\n};\n/**\r\n * @return this.engine\r\n */\n\n\nZip.prototype.on = function () {\n  return this.engine.on.apply(this.engine, arguments);\n};\n/**\r\n * @return this.engine\r\n */\n\n\nZip.prototype.pipe = function () {\n  return this.engine.pipe.apply(this.engine, arguments);\n};\n/**\r\n * @return this.engine\r\n */\n\n\nZip.prototype.unpipe = function () {\n  return this.engine.unpipe.apply(this.engine, arguments);\n};\n\nmodule.exports = Zip;\n/**\r\n * @typedef {Object} ZipOptions\r\n * @global\r\n * @property {String} [comment] Sets the zip archive comment.\r\n * @property {Boolean} [forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\r\n * @property {Boolean} [forceZip64=false] Forces the archive to contain ZIP64 headers.\r\n * @property {Boolean} [store=false] Sets the compression method to STORE.\r\n * @property {Object} [zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\r\n * to control compression.\r\n * @property {*} [*] See [zip-stream]{@link https://archiverjs.com/zip-stream/ZipStream.html} documentation for current list of properties.\r\n */\n\n/**\r\n * @typedef {Object} ZipEntryData\r\n * @global\r\n * @property {String} name Sets the entry name including internal path.\r\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\r\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\r\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\r\n * when working with methods like `directory` or `glob`.\r\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\r\n * for reduction of fs stat calls when stat data is already known.\r\n * @property {Boolean} [store=ZipOptions.store] Sets the compression method to STORE.\r\n */\n\n/**\r\n * ZipStream Module\r\n * @external ZipStream\r\n * @see {@link https://www.archiverjs.com/zip-stream/ZipStream.html}\r\n */","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/archiver/lib/plugins/zip.js"],"names":["engine","require","util","Zip","options","defaults","comment","forceUTC","store","supports","directory","symlink","prototype","append","source","data","callback","entry","finalize","on","apply","arguments","pipe","unpipe","module","exports"],"mappings":"AAAA;;;;;;;AAOA,IAAIA,MAAM,GAAGC,OAAO,CAAC,YAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,gBAAD,CAAlB;AAEA;;;;;;;;;;;AASA,IAAIE,GAAG,GAAG,UAASC,OAAT,EAAkB;AAC1B,MAAI,EAAE,gBAAgBD,GAAlB,CAAJ,EAA4B;AAC1B,WAAO,IAAIA,GAAJ,CAAQC,OAAR,CAAP;AACD;;AAEDA,EAAAA,OAAO,GAAG,KAAKA,OAAL,GAAeF,IAAI,CAACG,QAAL,CAAcD,OAAd,EAAuB;AAC9CE,IAAAA,OAAO,EAAE,EADqC;AAE9CC,IAAAA,QAAQ,EAAE,KAFoC;AAG9CC,IAAAA,KAAK,EAAE;AAHuC,GAAvB,CAAzB;AAMA,OAAKC,QAAL,GAAgB;AACdC,IAAAA,SAAS,EAAE,IADG;AAEdC,IAAAA,OAAO,EAAE;AAFK,GAAhB;AAKA,OAAKX,MAAL,GAAc,IAAIA,MAAJ,CAAWI,OAAX,CAAd;AACD,CAjBD;AAmBA;;;;;;;;;;;;;;;;AAcAD,GAAG,CAACS,SAAJ,CAAcC,MAAd,GAAuB,UAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;AACtD,OAAKhB,MAAL,CAAYiB,KAAZ,CAAkBH,MAAlB,EAA0BC,IAA1B,EAAgCC,QAAhC;AACD,CAFD;AAIA;;;;;AAGAb,GAAG,CAACS,SAAJ,CAAcM,QAAd,GAAyB,YAAW;AAClC,OAAKlB,MAAL,CAAYkB,QAAZ;AACD,CAFD;AAIA;;;;;AAGAf,GAAG,CAACS,SAAJ,CAAcO,EAAd,GAAmB,YAAW;AAC5B,SAAO,KAAKnB,MAAL,CAAYmB,EAAZ,CAAeC,KAAf,CAAqB,KAAKpB,MAA1B,EAAkCqB,SAAlC,CAAP;AACD,CAFD;AAIA;;;;;AAGAlB,GAAG,CAACS,SAAJ,CAAcU,IAAd,GAAqB,YAAW;AAC9B,SAAO,KAAKtB,MAAL,CAAYsB,IAAZ,CAAiBF,KAAjB,CAAuB,KAAKpB,MAA5B,EAAoCqB,SAApC,CAAP;AACD,CAFD;AAIA;;;;;AAGAlB,GAAG,CAACS,SAAJ,CAAcW,MAAd,GAAuB,YAAW;AAChC,SAAO,KAAKvB,MAAL,CAAYuB,MAAZ,CAAmBH,KAAnB,CAAyB,KAAKpB,MAA9B,EAAsCqB,SAAtC,CAAP;AACD,CAFD;;AAIAG,MAAM,CAACC,OAAP,GAAiBtB,GAAjB;AAEA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;AAaA","sourcesContent":["/**\r\n * ZIP Format Plugin\r\n *\r\n * @module plugins/zip\r\n * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}\r\n * @copyright (c) 2012-2014 Chris Talkington, contributors.\r\n */\r\nvar engine = require('zip-stream');\r\nvar util = require('archiver-utils');\r\n\r\n/**\r\n * @constructor\r\n * @param {ZipOptions} [options]\r\n * @param {String} [options.comment] Sets the zip archive comment.\r\n * @param {Boolean} [options.forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\r\n * @param {Boolean} [options.forceZip64=false] Forces the archive to contain ZIP64 headers.\r\n * @param {Boolean} [options.store=false] Sets the compression method to STORE.\r\n * @param {Object} [options.zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\r\n */\r\nvar Zip = function(options) {\r\n  if (!(this instanceof Zip)) {\r\n    return new Zip(options);\r\n  }\r\n\r\n  options = this.options = util.defaults(options, {\r\n    comment: '',\r\n    forceUTC: false,\r\n    store: false\r\n  });\r\n\r\n  this.supports = {\r\n    directory: true,\r\n    symlink: true\r\n  };\r\n\r\n  this.engine = new engine(options);\r\n};\r\n\r\n/**\r\n * @param  {(Buffer|Stream)} source\r\n * @param  {ZipEntryData} data\r\n * @param  {String} data.name Sets the entry name including internal path.\r\n * @param  {(String|Date)} [data.date=NOW()] Sets the entry date.\r\n * @param  {Number} [data.mode=D:0755/F:0644] Sets the entry permissions.\r\n * @param  {String} [data.prefix] Sets a path prefix for the entry name. Useful\r\n * when working with methods like `directory` or `glob`.\r\n * @param  {fs.Stats} [data.stats] Sets the fs stat data for this entry allowing\r\n * for reduction of fs stat calls when stat data is already known.\r\n * @param  {Boolean} [data.store=ZipOptions.store] Sets the compression method to STORE.\r\n * @param  {Function} callback\r\n * @return void\r\n */\r\nZip.prototype.append = function(source, data, callback) {\r\n  this.engine.entry(source, data, callback);\r\n};\r\n\r\n/**\r\n * @return void\r\n */\r\nZip.prototype.finalize = function() {\r\n  this.engine.finalize();\r\n};\r\n\r\n/**\r\n * @return this.engine\r\n */\r\nZip.prototype.on = function() {\r\n  return this.engine.on.apply(this.engine, arguments);\r\n};\r\n\r\n/**\r\n * @return this.engine\r\n */\r\nZip.prototype.pipe = function() {\r\n  return this.engine.pipe.apply(this.engine, arguments);\r\n};\r\n\r\n/**\r\n * @return this.engine\r\n */\r\nZip.prototype.unpipe = function() {\r\n  return this.engine.unpipe.apply(this.engine, arguments);\r\n};\r\n\r\nmodule.exports = Zip;\r\n\r\n/**\r\n * @typedef {Object} ZipOptions\r\n * @global\r\n * @property {String} [comment] Sets the zip archive comment.\r\n * @property {Boolean} [forceLocalTime=false] Forces the archive to contain local file times instead of UTC.\r\n * @property {Boolean} [forceZip64=false] Forces the archive to contain ZIP64 headers.\r\n * @property {Boolean} [store=false] Sets the compression method to STORE.\r\n * @property {Object} [zlib] Passed to [zlib]{@link https://nodejs.org/api/zlib.html#zlib_class_options}\r\n * to control compression.\r\n * @property {*} [*] See [zip-stream]{@link https://archiverjs.com/zip-stream/ZipStream.html} documentation for current list of properties.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ZipEntryData\r\n * @global\r\n * @property {String} name Sets the entry name including internal path.\r\n * @property {(String|Date)} [date=NOW()] Sets the entry date.\r\n * @property {Number} [mode=D:0755/F:0644] Sets the entry permissions.\r\n * @property {String} [prefix] Sets a path prefix for the entry name. Useful\r\n * when working with methods like `directory` or `glob`.\r\n * @property {fs.Stats} [stats] Sets the fs stat data for this entry allowing\r\n * for reduction of fs stat calls when stat data is already known.\r\n * @property {Boolean} [store=ZipOptions.store] Sets the compression method to STORE.\r\n */\r\n\r\n/**\r\n * ZipStream Module\r\n * @external ZipStream\r\n * @see {@link https://www.archiverjs.com/zip-stream/ZipStream.html}\r\n */\r\n"]},"metadata":{},"sourceType":"script"}