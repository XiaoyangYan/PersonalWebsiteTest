{"ast":null,"code":"'use strict';\n\nvar templateSTR = \"(function(f){if(typeof exports===\\\"object\\\"&&typeof module!==\\\"undefined\\\"){module.exports=f()}else if(typeof define===\\\"function\\\"&&define.amd){define([],f)}else{var g;if(typeof window!==\\\"undefined\\\"){g=window}else if(typeof global!==\\\"undefined\\\"){g=global}else if(typeof self!==\\\"undefined\\\"){g=self}else{g=this}defineNamespace()}})(function(){source()});\\n\";\n\nfunction template(moduleName, options) {\n  if (typeof options === 'boolean') {\n    options = {\n      commonJS: options\n    };\n  } else if (!options) {\n    options = {};\n  }\n\n  var str = templateSTR.replace(/defineNamespace\\(\\)/g, compileNamespace(moduleName)).split('source()');\n  str[0] = str[0].trim(); //make sure these are undefined so as to not get confused if modules have inner UMD systems\n\n  str[0] += 'var define,module,exports;';\n  if (options.commonJS) str[0] += 'module={exports:(exports={})};';\n  str[0] += '\\n';\n  if (options.commonJS) str[1] = 'return module.exports;' + str[1];\n  str[1] = '\\n' + str[1];\n  return str;\n}\n\nexports = module.exports = function (name, src, options) {\n  if (typeof options === 'string' && typeof src === 'object') {\n    var tmp = options;\n    options = src;\n    src = tmp;\n  }\n\n  return exports.prelude(name, options) + src + exports.postlude(name, options);\n};\n\nexports.prelude = function (moduleName, options) {\n  return template(moduleName, options)[0];\n};\n\nexports.postlude = function (moduleName, options) {\n  return template(moduleName, options)[1];\n};\n\nfunction camelCase(name) {\n  name = name.replace(/\\-([a-z])/g, function (_, char) {\n    return char.toUpperCase();\n  });\n\n  if (!/^[a-zA-Z_$]$/.test(name[0])) {\n    name = name.substr(1);\n  }\n\n  var result = name.replace(/[^\\w$]+/g, '');\n\n  if (!result) {\n    throw new Error('Invalid JavaScript identifier resulted from camel-casing');\n  }\n\n  return result;\n}\n\nfunction compileNamespace(name) {\n  var names = name.split('.'); // No namespaces, yield the best case 'global.NAME = VALUE'\n\n  if (names.length === 1) {\n    return 'g.' + camelCase(name) + ' = f()'; // Acceptable case, with reasonable compilation\n  } else if (names.length === 2) {\n    names = names.map(camelCase);\n    return '(g.' + names[0] + ' || (g.' + names[0] + ' = {})).' + names[1] + ' = f()'; // Worst case, too many namespaces to care about\n  } else {\n    var valueContainer = names.pop();\n    return names.map(compileNamespaceStep).concat(['g.' + camelCase(valueContainer) + ' = f()']).join(';');\n  }\n}\n\nfunction compileNamespaceStep(name) {\n  name = camelCase(name);\n  return 'g=(g.' + name + '||(g.' + name + ' = {}))';\n}","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/umd/index.js"],"names":["templateSTR","template","moduleName","options","commonJS","str","replace","compileNamespace","split","trim","exports","module","name","src","tmp","prelude","postlude","camelCase","_","char","toUpperCase","test","substr","result","Error","names","length","map","valueContainer","pop","compileNamespaceStep","concat","join"],"mappings":"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","sourcesContent":["'use strict';\n\n\nvar templateSTR = \"(function(f){if(typeof exports===\\\"object\\\"&&typeof module!==\\\"undefined\\\"){module.exports=f()}else if(typeof define===\\\"function\\\"&&define.amd){define([],f)}else{var g;if(typeof window!==\\\"undefined\\\"){g=window}else if(typeof global!==\\\"undefined\\\"){g=global}else if(typeof self!==\\\"undefined\\\"){g=self}else{g=this}defineNamespace()}})(function(){source()});\\n\";\n\nfunction template(moduleName, options) {\n  if (typeof options === 'boolean') {\n    options = {commonJS: options};\n  } else if (!options) {\n    options = {};\n  }\n  var str = templateSTR.replace(/defineNamespace\\(\\)/g, compileNamespace(moduleName))\n    .split('source()')\n  str[0] = str[0].trim();\n  //make sure these are undefined so as to not get confused if modules have inner UMD systems\n  str[0] += 'var define,module,exports;';\n  if (options.commonJS) str[0] += 'module={exports:(exports={})};';\n  str[0] += '\\n';\n  if (options.commonJS) str[1] = 'return module.exports;' + str[1];\n  str[1] = '\\n' + str[1];\n  return str;\n}\n\nexports = module.exports = function (name, src, options) {\n  if (typeof options === 'string' && typeof src === 'object') {\n    var tmp = options;\n    options = src;\n    src = tmp;\n  }\n  return exports.prelude(name, options) + src + exports.postlude(name, options);\n};\n\nexports.prelude = function (moduleName, options) {\n  return template(moduleName, options)[0];\n};\nexports.postlude = function (moduleName, options) {\n  return template(moduleName, options)[1];\n};\n\n\nfunction camelCase(name) {\n  name = name.replace(/\\-([a-z])/g, function (_, char) { return char.toUpperCase(); });\n  if (!/^[a-zA-Z_$]$/.test(name[0])) {\n    name = name.substr(1);\n  }\n  var result = name.replace(/[^\\w$]+/g, '')\n  if (!result) {\n    throw new Error('Invalid JavaScript identifier resulted from camel-casing');\n  }\n  return result\n}\n\n\nfunction compileNamespace(name) {\n  var names = name.split('.')\n\n  // No namespaces, yield the best case 'global.NAME = VALUE'\n  if (names.length === 1) {\n    return 'g.' + camelCase(name) + ' = f()';\n\n  // Acceptable case, with reasonable compilation\n  } else if (names.length === 2) {\n    names = names.map(camelCase);\n    return '(g.' + names[0] + ' || (g.' + names[0] + ' = {})).' + names[1] + ' = f()';\n\n  // Worst case, too many namespaces to care about\n  } else {\n    var valueContainer = names.pop()\n    return names.map(compileNamespaceStep)\n                .concat(['g.' + camelCase(valueContainer) + ' = f()'])\n                .join(';');\n  }\n}\n\nfunction compileNamespaceStep(name) {\n  name = camelCase(name);\n  return 'g=(g.' + name + '||(g.' + name + ' = {}))';\n}\n"]},"metadata":{},"sourceType":"script"}