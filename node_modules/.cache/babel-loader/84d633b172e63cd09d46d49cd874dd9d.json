{"ast":null,"code":"/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\nvar util = module.exports = {};\n\nutil.dateToDos = function (d, forceLocalTime) {\n  forceLocalTime = forceLocalTime || false;\n  var year = forceLocalTime ? d.getFullYear() : d.getUTCFullYear();\n\n  if (year < 1980) {\n    return 2162688; // 1980-1-1 00:00:00\n  } else if (year >= 2044) {\n    return 2141175677; // 2043-12-31 23:59:58\n  }\n\n  var val = {\n    year: year,\n    month: forceLocalTime ? d.getMonth() : d.getUTCMonth(),\n    date: forceLocalTime ? d.getDate() : d.getUTCDate(),\n    hours: forceLocalTime ? d.getHours() : d.getUTCHours(),\n    minutes: forceLocalTime ? d.getMinutes() : d.getUTCMinutes(),\n    seconds: forceLocalTime ? d.getSeconds() : d.getUTCSeconds()\n  };\n  return val.year - 1980 << 25 | val.month + 1 << 21 | val.date << 16 | val.hours << 11 | val.minutes << 5 | val.seconds / 2;\n};\n\nutil.dosToDate = function (dos) {\n  return new Date((dos >> 25 & 0x7f) + 1980, (dos >> 21 & 0x0f) - 1, dos >> 16 & 0x1f, dos >> 11 & 0x1f, dos >> 5 & 0x3f, (dos & 0x1f) << 1);\n};\n\nutil.fromDosTime = function (buf) {\n  return util.dosToDate(buf.readUInt32LE(0));\n};\n\nutil.getEightBytes = function (v) {\n  var buf = Buffer.alloc(8);\n  buf.writeUInt32LE(v % 0x0100000000, 0);\n  buf.writeUInt32LE(v / 0x0100000000 | 0, 4);\n  return buf;\n};\n\nutil.getShortBytes = function (v) {\n  var buf = Buffer.alloc(2);\n  buf.writeUInt16LE((v & 0xFFFF) >>> 0, 0);\n  return buf;\n};\n\nutil.getShortBytesValue = function (buf, offset) {\n  return buf.readUInt16LE(offset);\n};\n\nutil.getLongBytes = function (v) {\n  var buf = Buffer.alloc(4);\n  buf.writeUInt32LE((v & 0xFFFFFFFF) >>> 0, 0);\n  return buf;\n};\n\nutil.getLongBytesValue = function (buf, offset) {\n  return buf.readUInt32LE(offset);\n};\n\nutil.toDosTime = function (d) {\n  return util.getLongBytes(util.dateToDos(d));\n};","map":{"version":3,"sources":["/home/yanxiaoyang/react-project/PersonalWebsiteTest/node_modules/compress-commons/lib/archivers/zip/util.js"],"names":["util","module","exports","dateToDos","d","forceLocalTime","year","getFullYear","getUTCFullYear","val","month","getMonth","getUTCMonth","date","getDate","getUTCDate","hours","getHours","getUTCHours","minutes","getMinutes","getUTCMinutes","seconds","getSeconds","getUTCSeconds","dosToDate","dos","Date","fromDosTime","buf","readUInt32LE","getEightBytes","v","Buffer","alloc","writeUInt32LE","getShortBytes","writeUInt16LE","getShortBytesValue","offset","readUInt16LE","getLongBytes","getLongBytesValue","toDosTime"],"mappings":"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","sourcesContent":["/**\r\n * node-compress-commons\r\n *\r\n * Copyright (c) 2014 Chris Talkington, contributors.\r\n * Licensed under the MIT license.\r\n * https://github.com/archiverjs/node-compress-commons/blob/master/LICENSE-MIT\r\n */\r\nvar util = module.exports = {};\r\n\r\nutil.dateToDos = function(d, forceLocalTime) {\r\n  forceLocalTime = forceLocalTime || false;\r\n\r\n  var year = forceLocalTime ? d.getFullYear() : d.getUTCFullYear();\r\n\r\n  if (year < 1980) {\r\n    return 2162688; // 1980-1-1 00:00:00\r\n  } else if (year >= 2044) {\r\n    return 2141175677; // 2043-12-31 23:59:58\r\n  }\r\n\r\n  var val = {\r\n    year: year,\r\n    month: forceLocalTime ? d.getMonth() : d.getUTCMonth(),\r\n    date: forceLocalTime ? d.getDate() : d.getUTCDate(),\r\n    hours: forceLocalTime ? d.getHours() : d.getUTCHours(),\r\n    minutes: forceLocalTime ? d.getMinutes() : d.getUTCMinutes(),\r\n    seconds: forceLocalTime ? d.getSeconds() : d.getUTCSeconds()\r\n  };\r\n\r\n  return ((val.year - 1980) << 25) | ((val.month + 1) << 21) | (val.date << 16) |\r\n    (val.hours << 11) | (val.minutes << 5) | (val.seconds / 2);\r\n};\r\n\r\nutil.dosToDate = function(dos) {\r\n  return new Date(((dos >> 25) & 0x7f) + 1980, ((dos >> 21) & 0x0f) - 1, (dos >> 16) & 0x1f, (dos >> 11) & 0x1f, (dos >> 5) & 0x3f, (dos & 0x1f) << 1);\r\n};\r\n\r\nutil.fromDosTime = function(buf) {\r\n  return util.dosToDate(buf.readUInt32LE(0));\r\n};\r\n\r\nutil.getEightBytes = function(v) {\r\n  var buf = Buffer.alloc(8);\r\n  buf.writeUInt32LE(v % 0x0100000000, 0);\r\n  buf.writeUInt32LE((v / 0x0100000000) | 0, 4);\r\n\r\n  return buf;\r\n};\r\n\r\nutil.getShortBytes = function(v) {\r\n  var buf = Buffer.alloc(2);\r\n  buf.writeUInt16LE((v & 0xFFFF) >>> 0, 0);\r\n\r\n  return buf;\r\n};\r\n\r\nutil.getShortBytesValue = function(buf, offset) {\r\n  return buf.readUInt16LE(offset);\r\n};\r\n\r\nutil.getLongBytes = function(v) {\r\n  var buf = Buffer.alloc(4);\r\n  buf.writeUInt32LE((v & 0xFFFFFFFF) >>> 0, 0);\r\n\r\n  return buf;\r\n};\r\n\r\nutil.getLongBytesValue = function(buf, offset) {\r\n  return buf.readUInt32LE(offset);\r\n};\r\n\r\nutil.toDosTime = function(d) {\r\n  return util.getLongBytes(util.dateToDos(d));\r\n};"]},"metadata":{},"sourceType":"script"}